
f401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e9e4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001640  0800eb84  0800eb84  0001eb84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080101c4  080101c4  00030218  2**0
                  CONTENTS
  4 .ARM          00000008  080101c4  080101c4  000201c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080101cc  080101cc  00030218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080101cc  080101cc  000201cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080101d0  080101d0  000201d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  080101d4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000900  20000218  080103ec  00030218  2**2
                  ALLOC
 10 ._user_heap_stack 00004800  20000b18  080103ec  00030b18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 12 .debug_info   000393c4  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006cf7  00000000  00000000  0006960c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ba8  00000000  00000000  00070308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001938  00000000  00000000  00071eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021c31  00000000  00000000  000737e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bce6  00000000  00000000  00095419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a44f1  00000000  00000000  000c10ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001655f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007734  00000000  00000000  00165640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800eb6c 	.word	0x0800eb6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	0800eb6c 	.word	0x0800eb6c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08c      	sub	sp, #48	; 0x30
 8000588:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	f107 031c 	add.w	r3, r7, #28
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	61bb      	str	r3, [r7, #24]
 800059e:	4b75      	ldr	r3, [pc, #468]	; (8000774 <MX_GPIO_Init+0x1f0>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a74      	ldr	r2, [pc, #464]	; (8000774 <MX_GPIO_Init+0x1f0>)
 80005a4:	f043 0310 	orr.w	r3, r3, #16
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b72      	ldr	r3, [pc, #456]	; (8000774 <MX_GPIO_Init+0x1f0>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0310 	and.w	r3, r3, #16
 80005b2:	61bb      	str	r3, [r7, #24]
 80005b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]
 80005ba:	4b6e      	ldr	r3, [pc, #440]	; (8000774 <MX_GPIO_Init+0x1f0>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a6d      	ldr	r2, [pc, #436]	; (8000774 <MX_GPIO_Init+0x1f0>)
 80005c0:	f043 0304 	orr.w	r3, r3, #4
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b6b      	ldr	r3, [pc, #428]	; (8000774 <MX_GPIO_Init+0x1f0>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0304 	and.w	r3, r3, #4
 80005ce:	617b      	str	r3, [r7, #20]
 80005d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
 80005d6:	4b67      	ldr	r3, [pc, #412]	; (8000774 <MX_GPIO_Init+0x1f0>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a66      	ldr	r2, [pc, #408]	; (8000774 <MX_GPIO_Init+0x1f0>)
 80005dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b64      	ldr	r3, [pc, #400]	; (8000774 <MX_GPIO_Init+0x1f0>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ea:	613b      	str	r3, [r7, #16]
 80005ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	4b60      	ldr	r3, [pc, #384]	; (8000774 <MX_GPIO_Init+0x1f0>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a5f      	ldr	r2, [pc, #380]	; (8000774 <MX_GPIO_Init+0x1f0>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
 80005fe:	4b5d      	ldr	r3, [pc, #372]	; (8000774 <MX_GPIO_Init+0x1f0>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	4b59      	ldr	r3, [pc, #356]	; (8000774 <MX_GPIO_Init+0x1f0>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	4a58      	ldr	r2, [pc, #352]	; (8000774 <MX_GPIO_Init+0x1f0>)
 8000614:	f043 0302 	orr.w	r3, r3, #2
 8000618:	6313      	str	r3, [r2, #48]	; 0x30
 800061a:	4b56      	ldr	r3, [pc, #344]	; (8000774 <MX_GPIO_Init+0x1f0>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	f003 0302 	and.w	r3, r3, #2
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	4b52      	ldr	r3, [pc, #328]	; (8000774 <MX_GPIO_Init+0x1f0>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a51      	ldr	r2, [pc, #324]	; (8000774 <MX_GPIO_Init+0x1f0>)
 8000630:	f043 0308 	orr.w	r3, r3, #8
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b4f      	ldr	r3, [pc, #316]	; (8000774 <MX_GPIO_Init+0x1f0>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_1_CS0_GPIO_Port, SPI_1_CS0_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	2110      	movs	r1, #16
 8000646:	484c      	ldr	r0, [pc, #304]	; (8000778 <MX_GPIO_Init+0x1f4>)
 8000648:	f001 f8d8 	bl	80017fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_01_Pin|LCD_02_Pin|LCD_03_Pin, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000652:	484a      	ldr	r0, [pc, #296]	; (800077c <MX_GPIO_Init+0x1f8>)
 8000654:	f001 f8d2 	bl	80017fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_K_Pin|LCD_RS_Pin|LCD_RW_Pin|LCD_EE_Pin
 8000658:	2200      	movs	r2, #0
 800065a:	f64f 7101 	movw	r1, #65281	; 0xff01
 800065e:	4848      	ldr	r0, [pc, #288]	; (8000780 <MX_GPIO_Init+0x1fc>)
 8000660:	f001 f8cc 	bl	80017fc <HAL_GPIO_WritePin>
                          |RP_PINCS1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = RP_PIN22_Pin|RP_PIN07_Pin|RP_PIN11_Pin|RP_PIN13_Pin
 8000664:	f64f 037f 	movw	r3, #63615	; 0xf87f
 8000668:	61fb      	str	r3, [r7, #28]
                          |RP_PIN06_Pin|SW_01_Pin|SW_02_Pin|SW_03_Pin
                          |SW_04_Pin|SW_05_Pin|RP_PIN15_Pin|RP_PIN16_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800066a:	2300      	movs	r3, #0
 800066c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	4619      	mov	r1, r3
 8000678:	4840      	ldr	r0, [pc, #256]	; (800077c <MX_GPIO_Init+0x1f8>)
 800067a:	f000 fe2b 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC5 PC6
                           PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 800067e:	f242 13ff 	movw	r3, #8703	; 0x21ff
 8000682:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000684:	2303      	movs	r3, #3
 8000686:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800068c:	f107 031c 	add.w	r3, r7, #28
 8000690:	4619      	mov	r1, r3
 8000692:	483c      	ldr	r0, [pc, #240]	; (8000784 <MX_GPIO_Init+0x200>)
 8000694:	f000 fe1e 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000698:	23ef      	movs	r3, #239	; 0xef
 800069a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800069c:	2303      	movs	r3, #3
 800069e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a4:	f107 031c 	add.w	r3, r7, #28
 80006a8:	4619      	mov	r1, r3
 80006aa:	4833      	ldr	r0, [pc, #204]	; (8000778 <MX_GPIO_Init+0x1f4>)
 80006ac:	f000 fe12 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_1_CS0_Pin;
 80006b0:	2310      	movs	r3, #16
 80006b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b4:	2301      	movs	r3, #1
 80006b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006bc:	2300      	movs	r3, #0
 80006be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI_1_CS0_GPIO_Port, &GPIO_InitStruct);
 80006c0:	f107 031c 	add.w	r3, r7, #28
 80006c4:	4619      	mov	r1, r3
 80006c6:	482c      	ldr	r0, [pc, #176]	; (8000778 <MX_GPIO_Init+0x1f4>)
 80006c8:	f000 fe04 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80006cc:	f24f 4307 	movw	r3, #62471	; 0xf407
 80006d0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d2:	2303      	movs	r3, #3
 80006d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006da:	f107 031c 	add.w	r3, r7, #28
 80006de:	4619      	mov	r1, r3
 80006e0:	4829      	ldr	r0, [pc, #164]	; (8000788 <MX_GPIO_Init+0x204>)
 80006e2:	f000 fdf7 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006e6:	2380      	movs	r3, #128	; 0x80
 80006e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ea:	2303      	movs	r3, #3
 80006ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	4619      	mov	r1, r3
 80006f8:	4820      	ldr	r0, [pc, #128]	; (800077c <MX_GPIO_Init+0x1f8>)
 80006fa:	f000 fdeb 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LCD_01_Pin|LCD_02_Pin|LCD_03_Pin;
 80006fe:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000704:	2301      	movs	r3, #1
 8000706:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070c:	2300      	movs	r3, #0
 800070e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000710:	f107 031c 	add.w	r3, r7, #28
 8000714:	4619      	mov	r1, r3
 8000716:	4819      	ldr	r0, [pc, #100]	; (800077c <MX_GPIO_Init+0x1f8>)
 8000718:	f000 fddc 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LCD_K_Pin|LCD_RS_Pin|LCD_RW_Pin|LCD_EE_Pin
 800071c:	f64f 7301 	movw	r3, #65281	; 0xff01
 8000720:	61fb      	str	r3, [r7, #28]
                          |LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin
                          |RP_PINCS1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000722:	2301      	movs	r3, #1
 8000724:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072a:	2300      	movs	r3, #0
 800072c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800072e:	f107 031c 	add.w	r3, r7, #28
 8000732:	4619      	mov	r1, r3
 8000734:	4812      	ldr	r0, [pc, #72]	; (8000780 <MX_GPIO_Init+0x1fc>)
 8000736:	f000 fdcd 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = RP_PIN32_Pin|RP_PIN31_Pin|RP_PIN36_Pin|RP_PIN37_Pin
 800073a:	23fe      	movs	r3, #254	; 0xfe
 800073c:	61fb      	str	r3, [r7, #28]
                          |RP_PIN35_Pin|RP_PIN33_Pin|RP_PIN29_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800073e:	2300      	movs	r3, #0
 8000740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	4619      	mov	r1, r3
 800074c:	480c      	ldr	r0, [pc, #48]	; (8000780 <MX_GPIO_Init+0x1fc>)
 800074e:	f000 fdc1 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RP_PIN38_Pin|RP_PIN18_Pin;
 8000752:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000758:	2300      	movs	r3, #0
 800075a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000760:	f107 031c 	add.w	r3, r7, #28
 8000764:	4619      	mov	r1, r3
 8000766:	4808      	ldr	r0, [pc, #32]	; (8000788 <MX_GPIO_Init+0x204>)
 8000768:	f000 fdb4 	bl	80012d4 <HAL_GPIO_Init>

}
 800076c:	bf00      	nop
 800076e:	3730      	adds	r7, #48	; 0x30
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40023800 	.word	0x40023800
 8000778:	40020000 	.word	0x40020000
 800077c:	40021000 	.word	0x40021000
 8000780:	40020c00 	.word	0x40020c00
 8000784:	40020800 	.word	0x40020800
 8000788:	40020400 	.word	0x40020400

0800078c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_I2C1_Init+0x50>)
 8000792:	4a13      	ldr	r2, [pc, #76]	; (80007e0 <MX_I2C1_Init+0x54>)
 8000794:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_I2C1_Init+0x50>)
 8000798:	4a12      	ldr	r2, [pc, #72]	; (80007e4 <MX_I2C1_Init+0x58>)
 800079a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_I2C1_Init+0x50>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_I2C1_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_I2C1_Init+0x50>)
 80007aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <MX_I2C1_Init+0x50>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_I2C1_Init+0x50>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <MX_I2C1_Init+0x50>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_I2C1_Init+0x50>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_I2C1_Init+0x50>)
 80007ca:	f001 f849 	bl	8001860 <HAL_I2C_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007d4:	f000 f916 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000234 	.word	0x20000234
 80007e0:	40005400 	.word	0x40005400
 80007e4:	00061a80 	.word	0x00061a80

080007e8 <HAL_I2C_MspInit>:
  /* USER CODE END I2C3_Init 2 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08c      	sub	sp, #48	; 0x30
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	f107 031c 	add.w	r3, r7, #28
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a42      	ldr	r2, [pc, #264]	; (8000910 <HAL_I2C_MspInit+0x128>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d12c      	bne.n	8000864 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	61bb      	str	r3, [r7, #24]
 800080e:	4b41      	ldr	r3, [pc, #260]	; (8000914 <HAL_I2C_MspInit+0x12c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a40      	ldr	r2, [pc, #256]	; (8000914 <HAL_I2C_MspInit+0x12c>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b3e      	ldr	r3, [pc, #248]	; (8000914 <HAL_I2C_MspInit+0x12c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	61bb      	str	r3, [r7, #24]
 8000824:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000826:	23c0      	movs	r3, #192	; 0xc0
 8000828:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800082a:	2312      	movs	r3, #18
 800082c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800082e:	2301      	movs	r3, #1
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000832:	2303      	movs	r3, #3
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000836:	2304      	movs	r3, #4
 8000838:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	4619      	mov	r1, r3
 8000840:	4835      	ldr	r0, [pc, #212]	; (8000918 <HAL_I2C_MspInit+0x130>)
 8000842:	f000 fd47 	bl	80012d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
 800084a:	4b32      	ldr	r3, [pc, #200]	; (8000914 <HAL_I2C_MspInit+0x12c>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084e:	4a31      	ldr	r2, [pc, #196]	; (8000914 <HAL_I2C_MspInit+0x12c>)
 8000850:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000854:	6413      	str	r3, [r2, #64]	; 0x40
 8000856:	4b2f      	ldr	r3, [pc, #188]	; (8000914 <HAL_I2C_MspInit+0x12c>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000862:	e050      	b.n	8000906 <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a2c      	ldr	r2, [pc, #176]	; (800091c <HAL_I2C_MspInit+0x134>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d14b      	bne.n	8000906 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	4b28      	ldr	r3, [pc, #160]	; (8000914 <HAL_I2C_MspInit+0x12c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a27      	ldr	r2, [pc, #156]	; (8000914 <HAL_I2C_MspInit+0x12c>)
 8000878:	f043 0304 	orr.w	r3, r3, #4
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b25      	ldr	r3, [pc, #148]	; (8000914 <HAL_I2C_MspInit+0x12c>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0304 	and.w	r3, r3, #4
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	4b21      	ldr	r3, [pc, #132]	; (8000914 <HAL_I2C_MspInit+0x12c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a20      	ldr	r2, [pc, #128]	; (8000914 <HAL_I2C_MspInit+0x12c>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b1e      	ldr	r3, [pc, #120]	; (8000914 <HAL_I2C_MspInit+0x12c>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ac:	2312      	movs	r3, #18
 80008ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008b0:	2301      	movs	r3, #1
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b4:	2303      	movs	r3, #3
 80008b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80008b8:	2304      	movs	r3, #4
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	4817      	ldr	r0, [pc, #92]	; (8000920 <HAL_I2C_MspInit+0x138>)
 80008c4:	f000 fd06 	bl	80012d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80008c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ce:	2312      	movs	r3, #18
 80008d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008d2:	2301      	movs	r3, #1
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d6:	2303      	movs	r3, #3
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80008da:	2304      	movs	r3, #4
 80008dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	480f      	ldr	r0, [pc, #60]	; (8000924 <HAL_I2C_MspInit+0x13c>)
 80008e6:	f000 fcf5 	bl	80012d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <HAL_I2C_MspInit+0x12c>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f2:	4a08      	ldr	r2, [pc, #32]	; (8000914 <HAL_I2C_MspInit+0x12c>)
 80008f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80008f8:	6413      	str	r3, [r2, #64]	; 0x40
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <HAL_I2C_MspInit+0x12c>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
}
 8000906:	bf00      	nop
 8000908:	3730      	adds	r7, #48	; 0x30
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40005400 	.word	0x40005400
 8000914:	40023800 	.word	0x40023800
 8000918:	40020400 	.word	0x40020400
 800091c:	40005c00 	.word	0x40005c00
 8000920:	40020800 	.word	0x40020800
 8000924:	40020000 	.word	0x40020000

08000928 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b094      	sub	sp, #80	; 0x50
 800092c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092e:	f107 0320 	add.w	r3, r7, #32
 8000932:	2230      	movs	r2, #48	; 0x30
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f00d fb00 	bl	800df3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800094c:	2300      	movs	r3, #0
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	4b2a      	ldr	r3, [pc, #168]	; (80009fc <SystemClock_Config+0xd4>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	4a29      	ldr	r2, [pc, #164]	; (80009fc <SystemClock_Config+0xd4>)
 8000956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095a:	6413      	str	r3, [r2, #64]	; 0x40
 800095c:	4b27      	ldr	r3, [pc, #156]	; (80009fc <SystemClock_Config+0xd4>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000968:	2300      	movs	r3, #0
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	4b24      	ldr	r3, [pc, #144]	; (8000a00 <SystemClock_Config+0xd8>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000974:	4a22      	ldr	r2, [pc, #136]	; (8000a00 <SystemClock_Config+0xd8>)
 8000976:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800097a:	6013      	str	r3, [r2, #0]
 800097c:	4b20      	ldr	r3, [pc, #128]	; (8000a00 <SystemClock_Config+0xd8>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000988:	2305      	movs	r3, #5
 800098a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800098c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000992:	2301      	movs	r3, #1
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000996:	2302      	movs	r3, #2
 8000998:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800099a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800099e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80009a0:	2306      	movs	r3, #6
 80009a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009a4:	23a8      	movs	r3, #168	; 0xa8
 80009a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009a8:	2304      	movs	r3, #4
 80009aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009ac:	2307      	movs	r3, #7
 80009ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b0:	f107 0320 	add.w	r3, r7, #32
 80009b4:	4618      	mov	r0, r3
 80009b6:	f002 fc1b 	bl	80031f0 <HAL_RCC_OscConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80009c0:	f000 f820 	bl	8000a04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c4:	230f      	movs	r3, #15
 80009c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c8:	2302      	movs	r3, #2
 80009ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009da:	f107 030c 	add.w	r3, r7, #12
 80009de:	2102      	movs	r1, #2
 80009e0:	4618      	mov	r0, r3
 80009e2:	f002 ff2d 	bl	8003840 <HAL_RCC_ClockConfig>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80009ec:	f000 f80a 	bl	8000a04 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80009f0:	f003 f8b4 	bl	8003b5c <HAL_RCC_EnableCSS>
}
 80009f4:	bf00      	nop
 80009f6:	3750      	adds	r7, #80	; 0x50
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40007000 	.word	0x40007000

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a08:	b672      	cpsid	i
}
 8000a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <Error_Handler+0x8>

08000a0e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	b083      	sub	sp, #12
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
 8000a16:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <MX_SPI3_Init>:
  /* USER CODE END SPI1_Init 2 */

}
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000a28:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <MX_SPI3_Init+0x64>)
 8000a2a:	4a18      	ldr	r2, [pc, #96]	; (8000a8c <MX_SPI3_Init+0x68>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a2e:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <MX_SPI3_Init+0x64>)
 8000a30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a34:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a36:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <MX_SPI3_Init+0x64>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <MX_SPI3_Init+0x64>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a42:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <MX_SPI3_Init+0x64>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <MX_SPI3_Init+0x64>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <MX_SPI3_Init+0x64>)
 8000a50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a54:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <MX_SPI3_Init+0x64>)
 8000a58:	2208      	movs	r2, #8
 8000a5a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <MX_SPI3_Init+0x64>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <MX_SPI3_Init+0x64>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a68:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <MX_SPI3_Init+0x64>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <MX_SPI3_Init+0x64>)
 8000a70:	220a      	movs	r2, #10
 8000a72:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a74:	4804      	ldr	r0, [pc, #16]	; (8000a88 <MX_SPI3_Init+0x64>)
 8000a76:	f003 f993 	bl	8003da0 <HAL_SPI_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000a80:	f7ff ffc0 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000288 	.word	0x20000288
 8000a8c:	40003c00 	.word	0x40003c00

08000a90 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08c      	sub	sp, #48	; 0x30
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 031c 	add.w	r3, r7, #28
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a42      	ldr	r2, [pc, #264]	; (8000bb8 <HAL_SPI_MspInit+0x128>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d12c      	bne.n	8000b0c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61bb      	str	r3, [r7, #24]
 8000ab6:	4b41      	ldr	r3, [pc, #260]	; (8000bbc <HAL_SPI_MspInit+0x12c>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aba:	4a40      	ldr	r2, [pc, #256]	; (8000bbc <HAL_SPI_MspInit+0x12c>)
 8000abc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac2:	4b3e      	ldr	r3, [pc, #248]	; (8000bbc <HAL_SPI_MspInit+0x12c>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000aca:	61bb      	str	r3, [r7, #24]
 8000acc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
 8000ad2:	4b3a      	ldr	r3, [pc, #232]	; (8000bbc <HAL_SPI_MspInit+0x12c>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a39      	ldr	r2, [pc, #228]	; (8000bbc <HAL_SPI_MspInit+0x12c>)
 8000ad8:	f043 0302 	orr.w	r3, r3, #2
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b37      	ldr	r3, [pc, #220]	; (8000bbc <HAL_SPI_MspInit+0x12c>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0302 	and.w	r3, r3, #2
 8000ae6:	617b      	str	r3, [r7, #20]
 8000ae8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000aea:	2338      	movs	r3, #56	; 0x38
 8000aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af6:	2303      	movs	r3, #3
 8000af8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000afa:	2305      	movs	r3, #5
 8000afc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	4619      	mov	r1, r3
 8000b04:	482e      	ldr	r0, [pc, #184]	; (8000bc0 <HAL_SPI_MspInit+0x130>)
 8000b06:	f000 fbe5 	bl	80012d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000b0a:	e050      	b.n	8000bae <HAL_SPI_MspInit+0x11e>
  else if(spiHandle->Instance==SPI3)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a2c      	ldr	r2, [pc, #176]	; (8000bc4 <HAL_SPI_MspInit+0x134>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d14b      	bne.n	8000bae <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	4b28      	ldr	r3, [pc, #160]	; (8000bbc <HAL_SPI_MspInit+0x12c>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	4a27      	ldr	r2, [pc, #156]	; (8000bbc <HAL_SPI_MspInit+0x12c>)
 8000b20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b24:	6413      	str	r3, [r2, #64]	; 0x40
 8000b26:	4b25      	ldr	r3, [pc, #148]	; (8000bbc <HAL_SPI_MspInit+0x12c>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	4b21      	ldr	r3, [pc, #132]	; (8000bbc <HAL_SPI_MspInit+0x12c>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a20      	ldr	r2, [pc, #128]	; (8000bbc <HAL_SPI_MspInit+0x12c>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b1e      	ldr	r3, [pc, #120]	; (8000bbc <HAL_SPI_MspInit+0x12c>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	4b1a      	ldr	r3, [pc, #104]	; (8000bbc <HAL_SPI_MspInit+0x12c>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a19      	ldr	r2, [pc, #100]	; (8000bbc <HAL_SPI_MspInit+0x12c>)
 8000b58:	f043 0304 	orr.w	r3, r3, #4
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <HAL_SPI_MspInit+0x12c>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0304 	and.w	r3, r3, #4
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b7c:	2306      	movs	r3, #6
 8000b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b80:	f107 031c 	add.w	r3, r7, #28
 8000b84:	4619      	mov	r1, r3
 8000b86:	4810      	ldr	r0, [pc, #64]	; (8000bc8 <HAL_SPI_MspInit+0x138>)
 8000b88:	f000 fba4 	bl	80012d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000b8c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b9e:	2306      	movs	r3, #6
 8000ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba2:	f107 031c 	add.w	r3, r7, #28
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4808      	ldr	r0, [pc, #32]	; (8000bcc <HAL_SPI_MspInit+0x13c>)
 8000baa:	f000 fb93 	bl	80012d4 <HAL_GPIO_Init>
}
 8000bae:	bf00      	nop
 8000bb0:	3730      	adds	r7, #48	; 0x30
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40013000 	.word	0x40013000
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40020400 	.word	0x40020400
 8000bc4:	40003c00 	.word	0x40003c00
 8000bc8:	40020000 	.word	0x40020000
 8000bcc:	40020800 	.word	0x40020800

08000bd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <HAL_MspInit+0x4c>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	4a0f      	ldr	r2, [pc, #60]	; (8000c1c <HAL_MspInit+0x4c>)
 8000be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be4:	6453      	str	r3, [r2, #68]	; 0x44
 8000be6:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <HAL_MspInit+0x4c>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	603b      	str	r3, [r7, #0]
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <HAL_MspInit+0x4c>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	4a08      	ldr	r2, [pc, #32]	; (8000c1c <HAL_MspInit+0x4c>)
 8000bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c00:	6413      	str	r3, [r2, #64]	; 0x40
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_MspInit+0x4c>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	40023800 	.word	0x40023800

08000c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000c24:	f003 f8a0 	bl	8003d68 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <NMI_Handler+0x8>

08000c2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <HardFault_Handler+0x4>

08000c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <MemManage_Handler+0x4>

08000c36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c3a:	e7fe      	b.n	8000c3a <BusFault_Handler+0x4>

08000c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <UsageFault_Handler+0x4>

08000c42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c70:	f000 f9ac 	bl	8000fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c7c:	4802      	ldr	r0, [pc, #8]	; (8000c88 <OTG_FS_IRQHandler+0x10>)
 8000c7e:	f001 fa9c 	bl	80021ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000640 	.word	0x20000640

08000c8c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	e00a      	b.n	8000cb4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c9e:	f00b fec1 	bl	800ca24 <__io_getchar>
 8000ca2:	4601      	mov	r1, r0
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	1c5a      	adds	r2, r3, #1
 8000ca8:	60ba      	str	r2, [r7, #8]
 8000caa:	b2ca      	uxtb	r2, r1
 8000cac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	697a      	ldr	r2, [r7, #20]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	dbf0      	blt.n	8000c9e <_read+0x12>
	}

return len;
 8000cbc:	687b      	ldr	r3, [r7, #4]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b086      	sub	sp, #24
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	60f8      	str	r0, [r7, #12]
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
 8000cd6:	e009      	b.n	8000cec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	1c5a      	adds	r2, r3, #1
 8000cdc:	60ba      	str	r2, [r7, #8]
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f00b fe81 	bl	800c9e8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	697a      	ldr	r2, [r7, #20]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	dbf1      	blt.n	8000cd8 <_write+0x12>
	}
	return len;
 8000cf4:	687b      	ldr	r3, [r7, #4]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <_close>:

int _close(int file)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
	return -1;
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d16:	b480      	push	{r7}
 8000d18:	b083      	sub	sp, #12
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
 8000d1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d26:	605a      	str	r2, [r3, #4]
	return 0;
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <_isatty>:

int _isatty(int file)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
	return 1;
 8000d3e:	2301      	movs	r3, #1
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
	return 0;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3714      	adds	r7, #20
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
	...

08000d68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d70:	4a14      	ldr	r2, [pc, #80]	; (8000dc4 <_sbrk+0x5c>)
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <_sbrk+0x60>)
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d7c:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <_sbrk+0x64>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d102      	bne.n	8000d8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d84:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <_sbrk+0x64>)
 8000d86:	4a12      	ldr	r2, [pc, #72]	; (8000dd0 <_sbrk+0x68>)
 8000d88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <_sbrk+0x64>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d207      	bcs.n	8000da8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d98:	f00c fe68 	bl	800da6c <__errno>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	220c      	movs	r2, #12
 8000da0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000da2:	f04f 33ff 	mov.w	r3, #4294967295
 8000da6:	e009      	b.n	8000dbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <_sbrk+0x64>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dae:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <_sbrk+0x64>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	4a05      	ldr	r2, [pc, #20]	; (8000dcc <_sbrk+0x64>)
 8000db8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dba:	68fb      	ldr	r3, [r7, #12]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20010000 	.word	0x20010000
 8000dc8:	00000800 	.word	0x00000800
 8000dcc:	200002e0 	.word	0x200002e0
 8000dd0:	20000b18 	.word	0x20000b18

08000dd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <SystemInit+0x20>)
 8000dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dde:	4a05      	ldr	r2, [pc, #20]	; (8000df4 <SystemInit+0x20>)
 8000de0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <MX_USART1_UART_Init+0x4c>)
 8000dfe:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <MX_USART1_UART_Init+0x50>)
 8000e00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <MX_USART1_UART_Init+0x4c>)
 8000e04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <MX_USART1_UART_Init+0x4c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <MX_USART1_UART_Init+0x4c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e16:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <MX_USART1_UART_Init+0x4c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e1c:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <MX_USART1_UART_Init+0x4c>)
 8000e1e:	220c      	movs	r2, #12
 8000e20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e22:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <MX_USART1_UART_Init+0x4c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <MX_USART1_UART_Init+0x4c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e2e:	4805      	ldr	r0, [pc, #20]	; (8000e44 <MX_USART1_UART_Init+0x4c>)
 8000e30:	f003 f94a 	bl	80040c8 <HAL_UART_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e3a:	f7ff fde3 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	200002e4 	.word	0x200002e4
 8000e48:	40011000 	.word	0x40011000

08000e4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	; 0x28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a19      	ldr	r2, [pc, #100]	; (8000ed0 <HAL_UART_MspInit+0x84>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d12c      	bne.n	8000ec8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <HAL_UART_MspInit+0x88>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e76:	4a17      	ldr	r2, [pc, #92]	; (8000ed4 <HAL_UART_MspInit+0x88>)
 8000e78:	f043 0310 	orr.w	r3, r3, #16
 8000e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <HAL_UART_MspInit+0x88>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e82:	f003 0310 	and.w	r3, r3, #16
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <HAL_UART_MspInit+0x88>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a10      	ldr	r2, [pc, #64]	; (8000ed4 <HAL_UART_MspInit+0x88>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <HAL_UART_MspInit+0x88>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ea6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000eb8:	2307      	movs	r3, #7
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <HAL_UART_MspInit+0x8c>)
 8000ec4:	f000 fa06 	bl	80012d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000ec8:	bf00      	nop
 8000eca:	3728      	adds	r7, #40	; 0x28
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40011000 	.word	0x40011000
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40020000 	.word	0x40020000

08000edc <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000edc:	480c      	ldr	r0, [pc, #48]	; (8000f10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ede:	490d      	ldr	r1, [pc, #52]	; (8000f14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ee0:	4a0d      	ldr	r2, [pc, #52]	; (8000f18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee4:	e002      	b.n	8000eec <LoopCopyDataInit>

08000ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eea:	3304      	adds	r3, #4

08000eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef0:	d3f9      	bcc.n	8000ee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ef2:	4a0a      	ldr	r2, [pc, #40]	; (8000f1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ef4:	4c0a      	ldr	r4, [pc, #40]	; (8000f20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef8:	e001      	b.n	8000efe <LoopFillZerobss>

08000efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000efc:	3204      	adds	r2, #4

08000efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f00:	d3fb      	bcc.n	8000efa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f02:	f7ff ff67 	bl	8000dd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f06:	f00c ff6f 	bl	800dde8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f0a:	f00b f9ad 	bl	800c268 <main>
  bx  lr    
 8000f0e:	4770      	bx	lr
  ldr r0, =_sdata
 8000f10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f14:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8000f18:	080101d4 	.word	0x080101d4
  ldr r2, =_sbss
 8000f1c:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8000f20:	20000b18 	.word	0x20000b18

08000f24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f24:	e7fe      	b.n	8000f24 <ADC_IRQHandler>
	...

08000f28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <HAL_Init+0x40>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0d      	ldr	r2, [pc, #52]	; (8000f68 <HAL_Init+0x40>)
 8000f32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f38:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <HAL_Init+0x40>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <HAL_Init+0x40>)
 8000f3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f44:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <HAL_Init+0x40>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a07      	ldr	r2, [pc, #28]	; (8000f68 <HAL_Init+0x40>)
 8000f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f50:	2003      	movs	r0, #3
 8000f52:	f000 f94f 	bl	80011f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f56:	2000      	movs	r0, #0
 8000f58:	f000 f808 	bl	8000f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f5c:	f7ff fe38 	bl	8000bd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40023c00 	.word	0x40023c00

08000f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <HAL_InitTick+0x54>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_InitTick+0x58>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 f996 	bl	80012bc <HAL_SYSTICK_Config>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e00e      	b.n	8000fb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b0f      	cmp	r3, #15
 8000f9e:	d80a      	bhi.n	8000fb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa8:	f000 f944 	bl	8001234 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fac:	4a06      	ldr	r2, [pc, #24]	; (8000fc8 <HAL_InitTick+0x5c>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e000      	b.n	8000fb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	20000008 	.word	0x20000008
 8000fc8:	20000004 	.word	0x20000004

08000fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_IncTick+0x20>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_IncTick+0x24>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4413      	add	r3, r2
 8000fdc:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <HAL_IncTick+0x24>)
 8000fde:	6013      	str	r3, [r2, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20000008 	.word	0x20000008
 8000ff0:	20000328 	.word	0x20000328

08000ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff8:	4b03      	ldr	r3, [pc, #12]	; (8001008 <HAL_GetTick+0x14>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000328 	.word	0x20000328

0800100c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001014:	f7ff ffee 	bl	8000ff4 <HAL_GetTick>
 8001018:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001024:	d005      	beq.n	8001032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <HAL_Delay+0x44>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4413      	add	r3, r2
 8001030:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001032:	bf00      	nop
 8001034:	f7ff ffde 	bl	8000ff4 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	429a      	cmp	r2, r3
 8001042:	d8f7      	bhi.n	8001034 <HAL_Delay+0x28>
  {
  }
}
 8001044:	bf00      	nop
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000008 	.word	0x20000008

08001054 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <__NVIC_SetPriorityGrouping+0x44>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001070:	4013      	ands	r3, r2
 8001072:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800107c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001084:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001086:	4a04      	ldr	r2, [pc, #16]	; (8001098 <__NVIC_SetPriorityGrouping+0x44>)
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	60d3      	str	r3, [r2, #12]
}
 800108c:	bf00      	nop
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a0:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <__NVIC_GetPriorityGrouping+0x18>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	0a1b      	lsrs	r3, r3, #8
 80010a6:	f003 0307 	and.w	r3, r3, #7
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	db0b      	blt.n	80010e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	f003 021f 	and.w	r2, r3, #31
 80010d0:	4907      	ldr	r1, [pc, #28]	; (80010f0 <__NVIC_EnableIRQ+0x38>)
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	095b      	lsrs	r3, r3, #5
 80010d8:	2001      	movs	r0, #1
 80010da:	fa00 f202 	lsl.w	r2, r0, r2
 80010de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000e100 	.word	0xe000e100

080010f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	6039      	str	r1, [r7, #0]
 80010fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	2b00      	cmp	r3, #0
 8001106:	db0a      	blt.n	800111e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	b2da      	uxtb	r2, r3
 800110c:	490c      	ldr	r1, [pc, #48]	; (8001140 <__NVIC_SetPriority+0x4c>)
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	0112      	lsls	r2, r2, #4
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	440b      	add	r3, r1
 8001118:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800111c:	e00a      	b.n	8001134 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4908      	ldr	r1, [pc, #32]	; (8001144 <__NVIC_SetPriority+0x50>)
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	f003 030f 	and.w	r3, r3, #15
 800112a:	3b04      	subs	r3, #4
 800112c:	0112      	lsls	r2, r2, #4
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	440b      	add	r3, r1
 8001132:	761a      	strb	r2, [r3, #24]
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000e100 	.word	0xe000e100
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001148:	b480      	push	{r7}
 800114a:	b089      	sub	sp, #36	; 0x24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f1c3 0307 	rsb	r3, r3, #7
 8001162:	2b04      	cmp	r3, #4
 8001164:	bf28      	it	cs
 8001166:	2304      	movcs	r3, #4
 8001168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3304      	adds	r3, #4
 800116e:	2b06      	cmp	r3, #6
 8001170:	d902      	bls.n	8001178 <NVIC_EncodePriority+0x30>
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3b03      	subs	r3, #3
 8001176:	e000      	b.n	800117a <NVIC_EncodePriority+0x32>
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	f04f 32ff 	mov.w	r2, #4294967295
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43da      	mvns	r2, r3
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	401a      	ands	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001190:	f04f 31ff 	mov.w	r1, #4294967295
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	fa01 f303 	lsl.w	r3, r1, r3
 800119a:	43d9      	mvns	r1, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	4313      	orrs	r3, r2
         );
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3724      	adds	r7, #36	; 0x24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
	...

080011b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011c0:	d301      	bcc.n	80011c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011c2:	2301      	movs	r3, #1
 80011c4:	e00f      	b.n	80011e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011c6:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <SysTick_Config+0x40>)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ce:	210f      	movs	r1, #15
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295
 80011d4:	f7ff ff8e 	bl	80010f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d8:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <SysTick_Config+0x40>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011de:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <SysTick_Config+0x40>)
 80011e0:	2207      	movs	r2, #7
 80011e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	e000e010 	.word	0xe000e010

080011f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b07      	cmp	r3, #7
 8001200:	d00f      	beq.n	8001222 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b06      	cmp	r3, #6
 8001206:	d00c      	beq.n	8001222 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b05      	cmp	r3, #5
 800120c:	d009      	beq.n	8001222 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2b04      	cmp	r3, #4
 8001212:	d006      	beq.n	8001222 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b03      	cmp	r3, #3
 8001218:	d003      	beq.n	8001222 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800121a:	2192      	movs	r1, #146	; 0x92
 800121c:	4804      	ldr	r0, [pc, #16]	; (8001230 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800121e:	f7ff fbf6 	bl	8000a0e <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ff16 	bl	8001054 <__NVIC_SetPriorityGrouping>
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	0800eb84 	.word	0x0800eb84

08001234 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
 8001240:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2b0f      	cmp	r3, #15
 800124a:	d903      	bls.n	8001254 <HAL_NVIC_SetPriority+0x20>
 800124c:	21aa      	movs	r1, #170	; 0xaa
 800124e:	480e      	ldr	r0, [pc, #56]	; (8001288 <HAL_NVIC_SetPriority+0x54>)
 8001250:	f7ff fbdd 	bl	8000a0e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	2b0f      	cmp	r3, #15
 8001258:	d903      	bls.n	8001262 <HAL_NVIC_SetPriority+0x2e>
 800125a:	21ab      	movs	r1, #171	; 0xab
 800125c:	480a      	ldr	r0, [pc, #40]	; (8001288 <HAL_NVIC_SetPriority+0x54>)
 800125e:	f7ff fbd6 	bl	8000a0e <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001262:	f7ff ff1b 	bl	800109c <__NVIC_GetPriorityGrouping>
 8001266:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	68b9      	ldr	r1, [r7, #8]
 800126c:	6978      	ldr	r0, [r7, #20]
 800126e:	f7ff ff6b 	bl	8001148 <NVIC_EncodePriority>
 8001272:	4602      	mov	r2, r0
 8001274:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001278:	4611      	mov	r1, r2
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff ff3a 	bl	80010f4 <__NVIC_SetPriority>
}
 8001280:	bf00      	nop
 8001282:	3718      	adds	r7, #24
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	0800eb84 	.word	0x0800eb84

0800128c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129a:	2b00      	cmp	r3, #0
 800129c:	da03      	bge.n	80012a6 <HAL_NVIC_EnableIRQ+0x1a>
 800129e:	21be      	movs	r1, #190	; 0xbe
 80012a0:	4805      	ldr	r0, [pc, #20]	; (80012b8 <HAL_NVIC_EnableIRQ+0x2c>)
 80012a2:	f7ff fbb4 	bl	8000a0e <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ff04 	bl	80010b8 <__NVIC_EnableIRQ>
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	0800eb84 	.word	0x0800eb84

080012bc <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff ff73 	bl	80011b0 <SysTick_Config>
 80012ca:	4603      	mov	r3, r0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012e2:	2300      	movs	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a33      	ldr	r2, [pc, #204]	; (80013bc <HAL_GPIO_Init+0xe8>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d017      	beq.n	8001322 <HAL_GPIO_Init+0x4e>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a32      	ldr	r2, [pc, #200]	; (80013c0 <HAL_GPIO_Init+0xec>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d013      	beq.n	8001322 <HAL_GPIO_Init+0x4e>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a31      	ldr	r2, [pc, #196]	; (80013c4 <HAL_GPIO_Init+0xf0>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d00f      	beq.n	8001322 <HAL_GPIO_Init+0x4e>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a30      	ldr	r2, [pc, #192]	; (80013c8 <HAL_GPIO_Init+0xf4>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d00b      	beq.n	8001322 <HAL_GPIO_Init+0x4e>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a2f      	ldr	r2, [pc, #188]	; (80013cc <HAL_GPIO_Init+0xf8>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d007      	beq.n	8001322 <HAL_GPIO_Init+0x4e>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a2e      	ldr	r2, [pc, #184]	; (80013d0 <HAL_GPIO_Init+0xfc>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x4e>
 800131a:	21ac      	movs	r1, #172	; 0xac
 800131c:	482d      	ldr	r0, [pc, #180]	; (80013d4 <HAL_GPIO_Init+0x100>)
 800131e:	f7ff fb76 	bl	8000a0e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	b29b      	uxth	r3, r3
 8001328:	2b00      	cmp	r3, #0
 800132a:	d005      	beq.n	8001338 <HAL_GPIO_Init+0x64>
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	0c1b      	lsrs	r3, r3, #16
 8001332:	041b      	lsls	r3, r3, #16
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <HAL_GPIO_Init+0x6c>
 8001338:	21ad      	movs	r1, #173	; 0xad
 800133a:	4826      	ldr	r0, [pc, #152]	; (80013d4 <HAL_GPIO_Init+0x100>)
 800133c:	f7ff fb67 	bl	8000a0e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d035      	beq.n	80013b4 <HAL_GPIO_Init+0xe0>
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d031      	beq.n	80013b4 <HAL_GPIO_Init+0xe0>
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	2b11      	cmp	r3, #17
 8001356:	d02d      	beq.n	80013b4 <HAL_GPIO_Init+0xe0>
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b02      	cmp	r3, #2
 800135e:	d029      	beq.n	80013b4 <HAL_GPIO_Init+0xe0>
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	2b12      	cmp	r3, #18
 8001366:	d025      	beq.n	80013b4 <HAL_GPIO_Init+0xe0>
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001370:	d020      	beq.n	80013b4 <HAL_GPIO_Init+0xe0>
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800137a:	d01b      	beq.n	80013b4 <HAL_GPIO_Init+0xe0>
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8001384:	d016      	beq.n	80013b4 <HAL_GPIO_Init+0xe0>
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800138e:	d011      	beq.n	80013b4 <HAL_GPIO_Init+0xe0>
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8001398:	d00c      	beq.n	80013b4 <HAL_GPIO_Init+0xe0>
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80013a2:	d007      	beq.n	80013b4 <HAL_GPIO_Init+0xe0>
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	2b03      	cmp	r3, #3
 80013aa:	d003      	beq.n	80013b4 <HAL_GPIO_Init+0xe0>
 80013ac:	21ae      	movs	r1, #174	; 0xae
 80013ae:	4809      	ldr	r0, [pc, #36]	; (80013d4 <HAL_GPIO_Init+0x100>)
 80013b0:	f7ff fb2d 	bl	8000a0e <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013b4:	2300      	movs	r3, #0
 80013b6:	61fb      	str	r3, [r7, #28]
 80013b8:	e206      	b.n	80017c8 <HAL_GPIO_Init+0x4f4>
 80013ba:	bf00      	nop
 80013bc:	40020000 	.word	0x40020000
 80013c0:	40020400 	.word	0x40020400
 80013c4:	40020800 	.word	0x40020800
 80013c8:	40020c00 	.word	0x40020c00
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40021c00 	.word	0x40021c00
 80013d4:	0800ebc0 	.word	0x0800ebc0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013d8:	2201      	movs	r2, #1
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	4013      	ands	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	f040 81e6 	bne.w	80017c2 <HAL_GPIO_Init+0x4ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f003 0303 	and.w	r3, r3, #3
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d005      	beq.n	800140e <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800140a:	2b02      	cmp	r3, #2
 800140c:	d144      	bne.n	8001498 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d00f      	beq.n	8001436 <HAL_GPIO_Init+0x162>
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d00b      	beq.n	8001436 <HAL_GPIO_Init+0x162>
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	2b02      	cmp	r3, #2
 8001424:	d007      	beq.n	8001436 <HAL_GPIO_Init+0x162>
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	2b03      	cmp	r3, #3
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_Init+0x162>
 800142e:	21c0      	movs	r1, #192	; 0xc0
 8001430:	4894      	ldr	r0, [pc, #592]	; (8001684 <HAL_GPIO_Init+0x3b0>)
 8001432:	f7ff faec 	bl	8000a0e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	2203      	movs	r2, #3
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4013      	ands	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	68da      	ldr	r2, [r3, #12]
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4313      	orrs	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800146c:	2201      	movs	r2, #1
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	091b      	lsrs	r3, r3, #4
 8001482:	f003 0201 	and.w	r2, r3, #1
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 0303 	and.w	r3, r3, #3
 80014a0:	2b03      	cmp	r3, #3
 80014a2:	d027      	beq.n	80014f4 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d00b      	beq.n	80014c4 <HAL_GPIO_Init+0x1f0>
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d007      	beq.n	80014c4 <HAL_GPIO_Init+0x1f0>
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_Init+0x1f0>
 80014bc:	21d1      	movs	r1, #209	; 0xd1
 80014be:	4871      	ldr	r0, [pc, #452]	; (8001684 <HAL_GPIO_Init+0x3b0>)
 80014c0:	f7ff faa5 	bl	8000a0e <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	2203      	movs	r2, #3
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4013      	ands	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 0303 	and.w	r3, r3, #3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	f040 8098 	bne.w	8001632 <HAL_GPIO_Init+0x35e>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d06f      	beq.n	80015ea <HAL_GPIO_Init+0x316>
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	2b0c      	cmp	r3, #12
 8001510:	d06b      	beq.n	80015ea <HAL_GPIO_Init+0x316>
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d067      	beq.n	80015ea <HAL_GPIO_Init+0x316>
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d063      	beq.n	80015ea <HAL_GPIO_Init+0x316>
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	691b      	ldr	r3, [r3, #16]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d05f      	beq.n	80015ea <HAL_GPIO_Init+0x316>
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d05b      	beq.n	80015ea <HAL_GPIO_Init+0x316>
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	691b      	ldr	r3, [r3, #16]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d057      	beq.n	80015ea <HAL_GPIO_Init+0x316>
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d053      	beq.n	80015ea <HAL_GPIO_Init+0x316>
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	2b02      	cmp	r3, #2
 8001548:	d04f      	beq.n	80015ea <HAL_GPIO_Init+0x316>
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	2b02      	cmp	r3, #2
 8001550:	d04b      	beq.n	80015ea <HAL_GPIO_Init+0x316>
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	2b02      	cmp	r3, #2
 8001558:	d047      	beq.n	80015ea <HAL_GPIO_Init+0x316>
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	2b03      	cmp	r3, #3
 8001560:	d043      	beq.n	80015ea <HAL_GPIO_Init+0x316>
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	2b03      	cmp	r3, #3
 8001568:	d03f      	beq.n	80015ea <HAL_GPIO_Init+0x316>
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	691b      	ldr	r3, [r3, #16]
 800156e:	2b03      	cmp	r3, #3
 8001570:	d03b      	beq.n	80015ea <HAL_GPIO_Init+0x316>
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	2b04      	cmp	r3, #4
 8001578:	d037      	beq.n	80015ea <HAL_GPIO_Init+0x316>
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	2b04      	cmp	r3, #4
 8001580:	d033      	beq.n	80015ea <HAL_GPIO_Init+0x316>
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	2b04      	cmp	r3, #4
 8001588:	d02f      	beq.n	80015ea <HAL_GPIO_Init+0x316>
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	2b05      	cmp	r3, #5
 8001590:	d02b      	beq.n	80015ea <HAL_GPIO_Init+0x316>
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	2b05      	cmp	r3, #5
 8001598:	d027      	beq.n	80015ea <HAL_GPIO_Init+0x316>
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	2b05      	cmp	r3, #5
 80015a0:	d023      	beq.n	80015ea <HAL_GPIO_Init+0x316>
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	2b06      	cmp	r3, #6
 80015a8:	d01f      	beq.n	80015ea <HAL_GPIO_Init+0x316>
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	2b07      	cmp	r3, #7
 80015b0:	d01b      	beq.n	80015ea <HAL_GPIO_Init+0x316>
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	2b07      	cmp	r3, #7
 80015b8:	d017      	beq.n	80015ea <HAL_GPIO_Init+0x316>
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	2b08      	cmp	r3, #8
 80015c0:	d013      	beq.n	80015ea <HAL_GPIO_Init+0x316>
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	691b      	ldr	r3, [r3, #16]
 80015c6:	2b09      	cmp	r3, #9
 80015c8:	d00f      	beq.n	80015ea <HAL_GPIO_Init+0x316>
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	2b09      	cmp	r3, #9
 80015d0:	d00b      	beq.n	80015ea <HAL_GPIO_Init+0x316>
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	2b0a      	cmp	r3, #10
 80015d8:	d007      	beq.n	80015ea <HAL_GPIO_Init+0x316>
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	2b0f      	cmp	r3, #15
 80015e0:	d003      	beq.n	80015ea <HAL_GPIO_Init+0x316>
 80015e2:	21de      	movs	r1, #222	; 0xde
 80015e4:	4827      	ldr	r0, [pc, #156]	; (8001684 <HAL_GPIO_Init+0x3b0>)
 80015e6:	f7ff fa12 	bl	8000a0e <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	08da      	lsrs	r2, r3, #3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	3208      	adds	r2, #8
 80015f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	220f      	movs	r2, #15
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4013      	ands	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	691a      	ldr	r2, [r3, #16]
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	f003 0307 	and.w	r3, r3, #7
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4313      	orrs	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	08da      	lsrs	r2, r3, #3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3208      	adds	r2, #8
 800162c:	69b9      	ldr	r1, [r7, #24]
 800162e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	2203      	movs	r2, #3
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43db      	mvns	r3, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4013      	ands	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f003 0203 	and.w	r2, r3, #3
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4313      	orrs	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800166e:	2b00      	cmp	r3, #0
 8001670:	f000 80a7 	beq.w	80017c2 <HAL_GPIO_Init+0x4ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001674:	2300      	movs	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	4b03      	ldr	r3, [pc, #12]	; (8001688 <HAL_GPIO_Init+0x3b4>)
 800167a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167c:	4a02      	ldr	r2, [pc, #8]	; (8001688 <HAL_GPIO_Init+0x3b4>)
 800167e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001682:	e003      	b.n	800168c <HAL_GPIO_Init+0x3b8>
 8001684:	0800ebc0 	.word	0x0800ebc0
 8001688:	40023800 	.word	0x40023800
 800168c:	6453      	str	r3, [r2, #68]	; 0x44
 800168e:	4b53      	ldr	r3, [pc, #332]	; (80017dc <HAL_GPIO_Init+0x508>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800169a:	4a51      	ldr	r2, [pc, #324]	; (80017e0 <HAL_GPIO_Init+0x50c>)
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	089b      	lsrs	r3, r3, #2
 80016a0:	3302      	adds	r3, #2
 80016a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	220f      	movs	r2, #15
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43db      	mvns	r3, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4013      	ands	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a48      	ldr	r2, [pc, #288]	; (80017e4 <HAL_GPIO_Init+0x510>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d019      	beq.n	80016fa <HAL_GPIO_Init+0x426>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a47      	ldr	r2, [pc, #284]	; (80017e8 <HAL_GPIO_Init+0x514>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d013      	beq.n	80016f6 <HAL_GPIO_Init+0x422>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a46      	ldr	r2, [pc, #280]	; (80017ec <HAL_GPIO_Init+0x518>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d00d      	beq.n	80016f2 <HAL_GPIO_Init+0x41e>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a45      	ldr	r2, [pc, #276]	; (80017f0 <HAL_GPIO_Init+0x51c>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d007      	beq.n	80016ee <HAL_GPIO_Init+0x41a>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a44      	ldr	r2, [pc, #272]	; (80017f4 <HAL_GPIO_Init+0x520>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d101      	bne.n	80016ea <HAL_GPIO_Init+0x416>
 80016e6:	2304      	movs	r3, #4
 80016e8:	e008      	b.n	80016fc <HAL_GPIO_Init+0x428>
 80016ea:	2307      	movs	r3, #7
 80016ec:	e006      	b.n	80016fc <HAL_GPIO_Init+0x428>
 80016ee:	2303      	movs	r3, #3
 80016f0:	e004      	b.n	80016fc <HAL_GPIO_Init+0x428>
 80016f2:	2302      	movs	r3, #2
 80016f4:	e002      	b.n	80016fc <HAL_GPIO_Init+0x428>
 80016f6:	2301      	movs	r3, #1
 80016f8:	e000      	b.n	80016fc <HAL_GPIO_Init+0x428>
 80016fa:	2300      	movs	r3, #0
 80016fc:	69fa      	ldr	r2, [r7, #28]
 80016fe:	f002 0203 	and.w	r2, r2, #3
 8001702:	0092      	lsls	r2, r2, #2
 8001704:	4093      	lsls	r3, r2
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4313      	orrs	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800170c:	4934      	ldr	r1, [pc, #208]	; (80017e0 <HAL_GPIO_Init+0x50c>)
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	089b      	lsrs	r3, r3, #2
 8001712:	3302      	adds	r3, #2
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800171a:	4b37      	ldr	r3, [pc, #220]	; (80017f8 <HAL_GPIO_Init+0x524>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	43db      	mvns	r3, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4013      	ands	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_GPIO_Init+0x46a>
        {
          temp |= iocurrent;
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800173e:	4a2e      	ldr	r2, [pc, #184]	; (80017f8 <HAL_GPIO_Init+0x524>)
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001744:	4b2c      	ldr	r3, [pc, #176]	; (80017f8 <HAL_GPIO_Init+0x524>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	43db      	mvns	r3, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_GPIO_Init+0x494>
        {
          temp |= iocurrent;
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	4313      	orrs	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001768:	4a23      	ldr	r2, [pc, #140]	; (80017f8 <HAL_GPIO_Init+0x524>)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800176e:	4b22      	ldr	r3, [pc, #136]	; (80017f8 <HAL_GPIO_Init+0x524>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	43db      	mvns	r3, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4013      	ands	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_Init+0x4be>
        {
          temp |= iocurrent;
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001792:	4a19      	ldr	r2, [pc, #100]	; (80017f8 <HAL_GPIO_Init+0x524>)
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001798:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <HAL_GPIO_Init+0x524>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d003      	beq.n	80017bc <HAL_GPIO_Init+0x4e8>
        {
          temp |= iocurrent;
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017bc:	4a0e      	ldr	r2, [pc, #56]	; (80017f8 <HAL_GPIO_Init+0x524>)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3301      	adds	r3, #1
 80017c6:	61fb      	str	r3, [r7, #28]
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	2b0f      	cmp	r3, #15
 80017cc:	f67f ae04 	bls.w	80013d8 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 80017d0:	bf00      	nop
 80017d2:	bf00      	nop
 80017d4:	3720      	adds	r7, #32
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40013800 	.word	0x40013800
 80017e4:	40020000 	.word	0x40020000
 80017e8:	40020400 	.word	0x40020400
 80017ec:	40020800 	.word	0x40020800
 80017f0:	40020c00 	.word	0x40020c00
 80017f4:	40021000 	.word	0x40021000
 80017f8:	40013c00 	.word	0x40013c00

080017fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	807b      	strh	r3, [r7, #2]
 8001808:	4613      	mov	r3, r2
 800180a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800180c:	887b      	ldrh	r3, [r7, #2]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d004      	beq.n	800181c <HAL_GPIO_WritePin+0x20>
 8001812:	887b      	ldrh	r3, [r7, #2]
 8001814:	0c1b      	lsrs	r3, r3, #16
 8001816:	041b      	lsls	r3, r3, #16
 8001818:	2b00      	cmp	r3, #0
 800181a:	d004      	beq.n	8001826 <HAL_GPIO_WritePin+0x2a>
 800181c:	f240 119d 	movw	r1, #413	; 0x19d
 8001820:	480e      	ldr	r0, [pc, #56]	; (800185c <HAL_GPIO_WritePin+0x60>)
 8001822:	f7ff f8f4 	bl	8000a0e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001826:	787b      	ldrb	r3, [r7, #1]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d007      	beq.n	800183c <HAL_GPIO_WritePin+0x40>
 800182c:	787b      	ldrb	r3, [r7, #1]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d004      	beq.n	800183c <HAL_GPIO_WritePin+0x40>
 8001832:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8001836:	4809      	ldr	r0, [pc, #36]	; (800185c <HAL_GPIO_WritePin+0x60>)
 8001838:	f7ff f8e9 	bl	8000a0e <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 800183c:	787b      	ldrb	r3, [r7, #1]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001842:	887a      	ldrh	r2, [r7, #2]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001848:	e003      	b.n	8001852 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800184a:	887b      	ldrh	r3, [r7, #2]
 800184c:	041a      	lsls	r2, r3, #16
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	619a      	str	r2, [r3, #24]
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	0800ebc0 	.word	0x0800ebc0

08001860 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e1bd      	b.n	8001bee <HAL_I2C_Init+0x38e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a93      	ldr	r2, [pc, #588]	; (8001ac4 <HAL_I2C_Init+0x264>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d00e      	beq.n	800189a <HAL_I2C_Init+0x3a>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a91      	ldr	r2, [pc, #580]	; (8001ac8 <HAL_I2C_Init+0x268>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d009      	beq.n	800189a <HAL_I2C_Init+0x3a>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a90      	ldr	r2, [pc, #576]	; (8001acc <HAL_I2C_Init+0x26c>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d004      	beq.n	800189a <HAL_I2C_Init+0x3a>
 8001890:	f240 11bf 	movw	r1, #447	; 0x1bf
 8001894:	488e      	ldr	r0, [pc, #568]	; (8001ad0 <HAL_I2C_Init+0x270>)
 8001896:	f7ff f8ba 	bl	8000a0e <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d004      	beq.n	80018ac <HAL_I2C_Init+0x4c>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	4a8b      	ldr	r2, [pc, #556]	; (8001ad4 <HAL_I2C_Init+0x274>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d904      	bls.n	80018b6 <HAL_I2C_Init+0x56>
 80018ac:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80018b0:	4887      	ldr	r0, [pc, #540]	; (8001ad0 <HAL_I2C_Init+0x270>)
 80018b2:	f7ff f8ac 	bl	8000a0e <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d009      	beq.n	80018d2 <HAL_I2C_Init+0x72>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018c6:	d004      	beq.n	80018d2 <HAL_I2C_Init+0x72>
 80018c8:	f240 11c1 	movw	r1, #449	; 0x1c1
 80018cc:	4880      	ldr	r0, [pc, #512]	; (8001ad0 <HAL_I2C_Init+0x270>)
 80018ce:	f7ff f89e 	bl	8000a0e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018da:	f023 0303 	bic.w	r3, r3, #3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d004      	beq.n	80018ec <HAL_I2C_Init+0x8c>
 80018e2:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80018e6:	487a      	ldr	r0, [pc, #488]	; (8001ad0 <HAL_I2C_Init+0x270>)
 80018e8:	f7ff f891 	bl	8000a0e <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018f4:	d009      	beq.n	800190a <HAL_I2C_Init+0xaa>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80018fe:	d004      	beq.n	800190a <HAL_I2C_Init+0xaa>
 8001900:	f240 11c3 	movw	r1, #451	; 0x1c3
 8001904:	4872      	ldr	r0, [pc, #456]	; (8001ad0 <HAL_I2C_Init+0x270>)
 8001906:	f7ff f882 	bl	8000a0e <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d008      	beq.n	8001924 <HAL_I2C_Init+0xc4>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d004      	beq.n	8001924 <HAL_I2C_Init+0xc4>
 800191a:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 800191e:	486c      	ldr	r0, [pc, #432]	; (8001ad0 <HAL_I2C_Init+0x270>)
 8001920:	f7ff f875 	bl	8000a0e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800192c:	2b00      	cmp	r3, #0
 800192e:	d004      	beq.n	800193a <HAL_I2C_Init+0xda>
 8001930:	f240 11c5 	movw	r1, #453	; 0x1c5
 8001934:	4866      	ldr	r0, [pc, #408]	; (8001ad0 <HAL_I2C_Init+0x270>)
 8001936:	f7ff f86a 	bl	8000a0e <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d008      	beq.n	8001954 <HAL_I2C_Init+0xf4>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	2b40      	cmp	r3, #64	; 0x40
 8001948:	d004      	beq.n	8001954 <HAL_I2C_Init+0xf4>
 800194a:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 800194e:	4860      	ldr	r0, [pc, #384]	; (8001ad0 <HAL_I2C_Init+0x270>)
 8001950:	f7ff f85d 	bl	8000a0e <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d008      	beq.n	800196e <HAL_I2C_Init+0x10e>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	2b80      	cmp	r3, #128	; 0x80
 8001962:	d004      	beq.n	800196e <HAL_I2C_Init+0x10e>
 8001964:	f240 11c7 	movw	r1, #455	; 0x1c7
 8001968:	4859      	ldr	r0, [pc, #356]	; (8001ad0 <HAL_I2C_Init+0x270>)
 800196a:	f7ff f850 	bl	8000a0e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d106      	bne.n	8001988 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7fe ff30 	bl	80007e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2224      	movs	r2, #36	; 0x24
 800198c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 0201 	bic.w	r2, r2, #1
 800199e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019c0:	f002 f9aa 	bl	8003d18 <HAL_RCC_GetPCLK1Freq>
 80019c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	4a43      	ldr	r2, [pc, #268]	; (8001ad8 <HAL_I2C_Init+0x278>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d807      	bhi.n	80019e0 <HAL_I2C_Init+0x180>
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4a42      	ldr	r2, [pc, #264]	; (8001adc <HAL_I2C_Init+0x27c>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	bf94      	ite	ls
 80019d8:	2301      	movls	r3, #1
 80019da:	2300      	movhi	r3, #0
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	e006      	b.n	80019ee <HAL_I2C_Init+0x18e>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4a3f      	ldr	r2, [pc, #252]	; (8001ae0 <HAL_I2C_Init+0x280>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	bf94      	ite	ls
 80019e8:	2301      	movls	r3, #1
 80019ea:	2300      	movhi	r3, #0
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e0fb      	b.n	8001bee <HAL_I2C_Init+0x38e>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	4a3a      	ldr	r2, [pc, #232]	; (8001ae4 <HAL_I2C_Init+0x284>)
 80019fa:	fba2 2303 	umull	r2, r3, r2, r3
 80019fe:	0c9b      	lsrs	r3, r3, #18
 8001a00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	68ba      	ldr	r2, [r7, #8]
 8001a12:	430a      	orrs	r2, r1
 8001a14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	4a2c      	ldr	r2, [pc, #176]	; (8001ad8 <HAL_I2C_Init+0x278>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d802      	bhi.n	8001a30 <HAL_I2C_Init+0x1d0>
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	e009      	b.n	8001a44 <HAL_I2C_Init+0x1e4>
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a36:	fb02 f303 	mul.w	r3, r2, r3
 8001a3a:	4a2b      	ldr	r2, [pc, #172]	; (8001ae8 <HAL_I2C_Init+0x288>)
 8001a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a40:	099b      	lsrs	r3, r3, #6
 8001a42:	3301      	adds	r3, #1
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	6812      	ldr	r2, [r2, #0]
 8001a48:	430b      	orrs	r3, r1
 8001a4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a56:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	491e      	ldr	r1, [pc, #120]	; (8001ad8 <HAL_I2C_Init+0x278>)
 8001a60:	428b      	cmp	r3, r1
 8001a62:	d819      	bhi.n	8001a98 <HAL_I2C_Init+0x238>
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	1e59      	subs	r1, r3, #1
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a72:	1c59      	adds	r1, r3, #1
 8001a74:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001a78:	400b      	ands	r3, r1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d00a      	beq.n	8001a94 <HAL_I2C_Init+0x234>
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	1e59      	subs	r1, r3, #1
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a92:	e065      	b.n	8001b60 <HAL_I2C_Init+0x300>
 8001a94:	2304      	movs	r3, #4
 8001a96:	e063      	b.n	8001b60 <HAL_I2C_Init+0x300>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d125      	bne.n	8001aec <HAL_I2C_Init+0x28c>
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	1e58      	subs	r0, r3, #1
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6859      	ldr	r1, [r3, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	440b      	add	r3, r1
 8001aae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	bf0c      	ite	eq
 8001abc:	2301      	moveq	r3, #1
 8001abe:	2300      	movne	r3, #0
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	e026      	b.n	8001b12 <HAL_I2C_Init+0x2b2>
 8001ac4:	40005400 	.word	0x40005400
 8001ac8:	40005800 	.word	0x40005800
 8001acc:	40005c00 	.word	0x40005c00
 8001ad0:	0800ebfc 	.word	0x0800ebfc
 8001ad4:	00061a80 	.word	0x00061a80
 8001ad8:	000186a0 	.word	0x000186a0
 8001adc:	001e847f 	.word	0x001e847f
 8001ae0:	003d08ff 	.word	0x003d08ff
 8001ae4:	431bde83 	.word	0x431bde83
 8001ae8:	10624dd3 	.word	0x10624dd3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	1e58      	subs	r0, r3, #1
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6859      	ldr	r1, [r3, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	440b      	add	r3, r1
 8001afa:	0099      	lsls	r1, r3, #2
 8001afc:	440b      	add	r3, r1
 8001afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b02:	3301      	adds	r3, #1
 8001b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	bf0c      	ite	eq
 8001b0c:	2301      	moveq	r3, #1
 8001b0e:	2300      	movne	r3, #0
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_I2C_Init+0x2ba>
 8001b16:	2301      	movs	r3, #1
 8001b18:	e022      	b.n	8001b60 <HAL_I2C_Init+0x300>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d10e      	bne.n	8001b40 <HAL_I2C_Init+0x2e0>
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	1e58      	subs	r0, r3, #1
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6859      	ldr	r1, [r3, #4]
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	440b      	add	r3, r1
 8001b30:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b34:	3301      	adds	r3, #1
 8001b36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b3e:	e00f      	b.n	8001b60 <HAL_I2C_Init+0x300>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	1e58      	subs	r0, r3, #1
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6859      	ldr	r1, [r3, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	440b      	add	r3, r1
 8001b4e:	0099      	lsls	r1, r3, #2
 8001b50:	440b      	add	r3, r1
 8001b52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b56:	3301      	adds	r3, #1
 8001b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b60:	6879      	ldr	r1, [r7, #4]
 8001b62:	6809      	ldr	r1, [r1, #0]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69da      	ldr	r2, [r3, #28]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	430a      	orrs	r2, r1
 8001b82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	6911      	ldr	r1, [r2, #16]
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	68d2      	ldr	r2, [r2, #12]
 8001b9a:	4311      	orrs	r1, r2
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6812      	ldr	r2, [r2, #0]
 8001ba0:	430b      	orrs	r3, r1
 8001ba2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	695a      	ldr	r2, [r3, #20]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0201 	orr.w	r2, r2, #1
 8001bce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2220      	movs	r2, #32
 8001bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop

08001bf8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08a      	sub	sp, #40	; 0x28
 8001bfc:	af02      	add	r7, sp, #8
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	607a      	str	r2, [r7, #4]
 8001c02:	603b      	str	r3, [r7, #0]
 8001c04:	460b      	mov	r3, r1
 8001c06:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001c08:	f7ff f9f4 	bl	8000ff4 <HAL_GetTick>
 8001c0c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b20      	cmp	r3, #32
 8001c1c:	f040 8111 	bne.w	8001e42 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	2319      	movs	r3, #25
 8001c26:	2201      	movs	r2, #1
 8001c28:	4988      	ldr	r1, [pc, #544]	; (8001e4c <HAL_I2C_IsDeviceReady+0x254>)
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f000 f912 	bl	8001e54 <I2C_WaitOnFlagUntilTimeout>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001c36:	2302      	movs	r3, #2
 8001c38:	e104      	b.n	8001e44 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d101      	bne.n	8001c48 <HAL_I2C_IsDeviceReady+0x50>
 8001c44:	2302      	movs	r3, #2
 8001c46:	e0fd      	b.n	8001e44 <HAL_I2C_IsDeviceReady+0x24c>
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d007      	beq.n	8001c6e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f042 0201 	orr.w	r2, r2, #1
 8001c6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2224      	movs	r2, #36	; 0x24
 8001c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4a70      	ldr	r2, [pc, #448]	; (8001e50 <HAL_I2C_IsDeviceReady+0x258>)
 8001c90:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ca0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f000 f8d0 	bl	8001e54 <I2C_WaitOnFlagUntilTimeout>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00d      	beq.n	8001cd6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cc8:	d103      	bne.n	8001cd2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cd0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e0b6      	b.n	8001e44 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001cd6:	897b      	ldrh	r3, [r7, #10]
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	461a      	mov	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ce4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001ce6:	f7ff f985 	bl	8000ff4 <HAL_GetTick>
 8001cea:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	bf0c      	ite	eq
 8001cfa:	2301      	moveq	r3, #1
 8001cfc:	2300      	movne	r3, #0
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d10:	bf0c      	ite	eq
 8001d12:	2301      	moveq	r3, #1
 8001d14:	2300      	movne	r3, #0
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001d1a:	e025      	b.n	8001d68 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d1c:	f7ff f96a 	bl	8000ff4 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d302      	bcc.n	8001d32 <HAL_I2C_IsDeviceReady+0x13a>
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d103      	bne.n	8001d3a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	22a0      	movs	r2, #160	; 0xa0
 8001d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	bf0c      	ite	eq
 8001d48:	2301      	moveq	r3, #1
 8001d4a:	2300      	movne	r3, #0
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d5e:	bf0c      	ite	eq
 8001d60:	2301      	moveq	r3, #1
 8001d62:	2300      	movne	r3, #0
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2ba0      	cmp	r3, #160	; 0xa0
 8001d72:	d005      	beq.n	8001d80 <HAL_I2C_IsDeviceReady+0x188>
 8001d74:	7dfb      	ldrb	r3, [r7, #23]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d102      	bne.n	8001d80 <HAL_I2C_IsDeviceReady+0x188>
 8001d7a:	7dbb      	ldrb	r3, [r7, #22]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0cd      	beq.n	8001d1c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2220      	movs	r2, #32
 8001d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d129      	bne.n	8001dea <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001da4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001da6:	2300      	movs	r3, #0
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	695b      	ldr	r3, [r3, #20]
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	2319      	movs	r3, #25
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	4921      	ldr	r1, [pc, #132]	; (8001e4c <HAL_I2C_IsDeviceReady+0x254>)
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f000 f844 	bl	8001e54 <I2C_WaitOnFlagUntilTimeout>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e036      	b.n	8001e44 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2220      	movs	r2, #32
 8001dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	e02c      	b.n	8001e44 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001df8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e02:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	2319      	movs	r3, #25
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	490f      	ldr	r1, [pc, #60]	; (8001e4c <HAL_I2C_IsDeviceReady+0x254>)
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f000 f820 	bl	8001e54 <I2C_WaitOnFlagUntilTimeout>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e012      	b.n	8001e44 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	3301      	adds	r3, #1
 8001e22:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	f4ff af32 	bcc.w	8001c92 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2220      	movs	r2, #32
 8001e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e000      	b.n	8001e44 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001e42:	2302      	movs	r3, #2
  }
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3720      	adds	r7, #32
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	00100002 	.word	0x00100002
 8001e50:	ffff0000 	.word	0xffff0000

08001e54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	603b      	str	r3, [r7, #0]
 8001e60:	4613      	mov	r3, r2
 8001e62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e64:	e025      	b.n	8001eb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e6c:	d021      	beq.n	8001eb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e6e:	f7ff f8c1 	bl	8000ff4 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d302      	bcc.n	8001e84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d116      	bne.n	8001eb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2220      	movs	r2, #32
 8001e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f043 0220 	orr.w	r2, r3, #32
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e023      	b.n	8001efa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	0c1b      	lsrs	r3, r3, #16
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d10d      	bne.n	8001ed8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	43da      	mvns	r2, r3
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	bf0c      	ite	eq
 8001ece:	2301      	moveq	r3, #1
 8001ed0:	2300      	movne	r3, #0
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	e00c      	b.n	8001ef2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	43da      	mvns	r2, r3
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	bf0c      	ite	eq
 8001eea:	2301      	moveq	r3, #1
 8001eec:	2300      	movne	r3, #0
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d0b6      	beq.n	8001e66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f06:	b08f      	sub	sp, #60	; 0x3c
 8001f08:	af0a      	add	r7, sp, #40	; 0x28
 8001f0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e118      	b.n	8002148 <HAL_PCD_Init+0x244>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f1e:	d003      	beq.n	8001f28 <HAL_PCD_Init+0x24>
 8001f20:	2187      	movs	r1, #135	; 0x87
 8001f22:	488b      	ldr	r0, [pc, #556]	; (8002150 <HAL_PCD_Init+0x24c>)
 8001f24:	f7fe fd73 	bl	8000a0e <assert_failed>

  USBx = hpcd->Instance;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d106      	bne.n	8001f48 <HAL_PCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f005 fe9c 	bl	8007c80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d102      	bne.n	8001f62 <HAL_PCD_Init+0x5e>
  {
    hpcd->Init.dma_enable = 0U;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f002 fed5 	bl	8004d16 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	603b      	str	r3, [r7, #0]
 8001f72:	687e      	ldr	r6, [r7, #4]
 8001f74:	466d      	mov	r5, sp
 8001f76:	f106 0410 	add.w	r4, r6, #16
 8001f7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f86:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f8a:	1d33      	adds	r3, r6, #4
 8001f8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f8e:	6838      	ldr	r0, [r7, #0]
 8001f90:	f002 fdac 	bl	8004aec <USB_CoreInit>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d005      	beq.n	8001fa6 <HAL_PCD_Init+0xa2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e0d0      	b.n	8002148 <HAL_PCD_Init+0x244>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2100      	movs	r1, #0
 8001fac:	4618      	mov	r0, r3
 8001fae:	f002 fec3 	bl	8004d38 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	73fb      	strb	r3, [r7, #15]
 8001fb6:	e04a      	b.n	800204e <HAL_PCD_Init+0x14a>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fb8:	7bfa      	ldrb	r2, [r7, #15]
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	1a9b      	subs	r3, r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	333d      	adds	r3, #61	; 0x3d
 8001fc8:	2201      	movs	r2, #1
 8001fca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fcc:	7bfa      	ldrb	r2, [r7, #15]
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	1a9b      	subs	r3, r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	333c      	adds	r3, #60	; 0x3c
 8001fdc:	7bfa      	ldrb	r2, [r7, #15]
 8001fde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fe0:	7bfa      	ldrb	r2, [r7, #15]
 8001fe2:	7bfb      	ldrb	r3, [r7, #15]
 8001fe4:	b298      	uxth	r0, r3
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	1a9b      	subs	r3, r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	3342      	adds	r3, #66	; 0x42
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ff8:	7bfa      	ldrb	r2, [r7, #15]
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	1a9b      	subs	r3, r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	440b      	add	r3, r1
 8002006:	333f      	adds	r3, #63	; 0x3f
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800200c:	7bfa      	ldrb	r2, [r7, #15]
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	1a9b      	subs	r3, r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	3344      	adds	r3, #68	; 0x44
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002020:	7bfa      	ldrb	r2, [r7, #15]
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	4613      	mov	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	1a9b      	subs	r3, r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	3348      	adds	r3, #72	; 0x48
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002034:	7bfa      	ldrb	r2, [r7, #15]
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	1a9b      	subs	r3, r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	3350      	adds	r3, #80	; 0x50
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002048:	7bfb      	ldrb	r3, [r7, #15]
 800204a:	3301      	adds	r3, #1
 800204c:	73fb      	strb	r3, [r7, #15]
 800204e:	7bfa      	ldrb	r2, [r7, #15]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	429a      	cmp	r2, r3
 8002056:	d3af      	bcc.n	8001fb8 <HAL_PCD_Init+0xb4>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002058:	2300      	movs	r3, #0
 800205a:	73fb      	strb	r3, [r7, #15]
 800205c:	e044      	b.n	80020e8 <HAL_PCD_Init+0x1e4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800205e:	7bfa      	ldrb	r2, [r7, #15]
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	4613      	mov	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	1a9b      	subs	r3, r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	440b      	add	r3, r1
 800206c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002070:	2200      	movs	r2, #0
 8002072:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002074:	7bfa      	ldrb	r2, [r7, #15]
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	4613      	mov	r3, r2
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	1a9b      	subs	r3, r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002086:	7bfa      	ldrb	r2, [r7, #15]
 8002088:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800208a:	7bfa      	ldrb	r2, [r7, #15]
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	1a9b      	subs	r3, r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	440b      	add	r3, r1
 8002098:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800209c:	2200      	movs	r2, #0
 800209e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020a0:	7bfa      	ldrb	r2, [r7, #15]
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	1a9b      	subs	r3, r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020b6:	7bfa      	ldrb	r2, [r7, #15]
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	1a9b      	subs	r3, r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	440b      	add	r3, r1
 80020c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020cc:	7bfa      	ldrb	r2, [r7, #15]
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	4613      	mov	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	1a9b      	subs	r3, r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
 80020e4:	3301      	adds	r3, #1
 80020e6:	73fb      	strb	r3, [r7, #15]
 80020e8:	7bfa      	ldrb	r2, [r7, #15]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d3b5      	bcc.n	800205e <HAL_PCD_Init+0x15a>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	687e      	ldr	r6, [r7, #4]
 80020fa:	466d      	mov	r5, sp
 80020fc:	f106 0410 	add.w	r4, r6, #16
 8002100:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002102:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002104:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002106:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002108:	e894 0003 	ldmia.w	r4, {r0, r1}
 800210c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002110:	1d33      	adds	r3, r6, #4
 8002112:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002114:	6838      	ldr	r0, [r7, #0]
 8002116:	f002 fe5b 	bl	8004dd0 <USB_DevInit>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d005      	beq.n	800212c <HAL_PCD_Init+0x228>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2202      	movs	r2, #2
 8002124:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e00d      	b.n	8002148 <HAL_PCD_Init+0x244>
  }

  hpcd->USB_Address = 0U;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f003 fed7 	bl	8005ef4 <USB_DevDisconnect>

  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002150:	0800ec34 	.word	0x0800ec34

08002154 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002168:	2b01      	cmp	r3, #1
 800216a:	d101      	bne.n	8002170 <HAL_PCD_Start+0x1c>
 800216c:	2302      	movs	r3, #2
 800216e:	e020      	b.n	80021b2 <HAL_PCD_Start+0x5e>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217c:	2b01      	cmp	r3, #1
 800217e:	d109      	bne.n	8002194 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002184:	2b01      	cmp	r3, #1
 8002186:	d005      	beq.n	8002194 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f002 fdab 	bl	8004cf4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f003 fe85 	bl	8005eb2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80021ba:	b590      	push	{r4, r7, lr}
 80021bc:	b08d      	sub	sp, #52	; 0x34
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021c8:	6a3b      	ldr	r3, [r7, #32]
 80021ca:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f003 ff43 	bl	800605c <USB_GetMode>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f040 839d 	bne.w	8002918 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f003 fea7 	bl	8005f36 <USB_ReadInterrupts>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 8393 	beq.w	8002916 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f003 fe9e 	bl	8005f36 <USB_ReadInterrupts>
 80021fa:	4603      	mov	r3, r0
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b02      	cmp	r3, #2
 8002202:	d107      	bne.n	8002214 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	695a      	ldr	r2, [r3, #20]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f002 0202 	and.w	r2, r2, #2
 8002212:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f003 fe8c 	bl	8005f36 <USB_ReadInterrupts>
 800221e:	4603      	mov	r3, r0
 8002220:	f003 0310 	and.w	r3, r3, #16
 8002224:	2b10      	cmp	r3, #16
 8002226:	d161      	bne.n	80022ec <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	699a      	ldr	r2, [r3, #24]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0210 	bic.w	r2, r2, #16
 8002236:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002238:	6a3b      	ldr	r3, [r7, #32]
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	f003 020f 	and.w	r2, r3, #15
 8002244:	4613      	mov	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	1a9b      	subs	r3, r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	4413      	add	r3, r2
 8002254:	3304      	adds	r3, #4
 8002256:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	0c5b      	lsrs	r3, r3, #17
 800225c:	f003 030f 	and.w	r3, r3, #15
 8002260:	2b02      	cmp	r3, #2
 8002262:	d124      	bne.n	80022ae <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800226a:	4013      	ands	r3, r2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d035      	beq.n	80022dc <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	091b      	lsrs	r3, r3, #4
 8002278:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800227a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800227e:	b29b      	uxth	r3, r3
 8002280:	461a      	mov	r2, r3
 8002282:	6a38      	ldr	r0, [r7, #32]
 8002284:	f003 fcc3 	bl	8005c0e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	68da      	ldr	r2, [r3, #12]
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	091b      	lsrs	r3, r3, #4
 8002290:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002294:	441a      	add	r2, r3
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	699a      	ldr	r2, [r3, #24]
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022a6:	441a      	add	r2, r3
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	619a      	str	r2, [r3, #24]
 80022ac:	e016      	b.n	80022dc <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	0c5b      	lsrs	r3, r3, #17
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	2b06      	cmp	r3, #6
 80022b8:	d110      	bne.n	80022dc <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80022c0:	2208      	movs	r2, #8
 80022c2:	4619      	mov	r1, r3
 80022c4:	6a38      	ldr	r0, [r7, #32]
 80022c6:	f003 fca2 	bl	8005c0e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	699a      	ldr	r2, [r3, #24]
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	091b      	lsrs	r3, r3, #4
 80022d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022d6:	441a      	add	r2, r3
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	699a      	ldr	r2, [r3, #24]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 0210 	orr.w	r2, r2, #16
 80022ea:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f003 fe20 	bl	8005f36 <USB_ReadInterrupts>
 80022f6:	4603      	mov	r3, r0
 80022f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002300:	d16e      	bne.n	80023e0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002302:	2300      	movs	r3, #0
 8002304:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f003 fe26 	bl	8005f5c <USB_ReadDevAllOutEpInterrupt>
 8002310:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002312:	e062      	b.n	80023da <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d057      	beq.n	80023ce <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	4611      	mov	r1, r2
 8002328:	4618      	mov	r0, r3
 800232a:	f003 fe4b 	bl	8005fc4 <USB_ReadDevOutEPInterrupt>
 800232e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00c      	beq.n	8002354 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	015a      	lsls	r2, r3, #5
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	4413      	add	r3, r2
 8002342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002346:	461a      	mov	r2, r3
 8002348:	2301      	movs	r3, #1
 800234a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800234c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 fd98 	bl	8002e84 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00c      	beq.n	8002378 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	015a      	lsls	r2, r3, #5
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	4413      	add	r3, r2
 8002366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800236a:	461a      	mov	r2, r3
 800236c:	2308      	movs	r3, #8
 800236e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002370:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 fe92 	bl	800309c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	f003 0310 	and.w	r3, r3, #16
 800237e:	2b00      	cmp	r3, #0
 8002380:	d008      	beq.n	8002394 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	015a      	lsls	r2, r3, #5
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	4413      	add	r3, r2
 800238a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800238e:	461a      	mov	r2, r3
 8002390:	2310      	movs	r3, #16
 8002392:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	f003 0320 	and.w	r3, r3, #32
 800239a:	2b00      	cmp	r3, #0
 800239c:	d008      	beq.n	80023b0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	015a      	lsls	r2, r3, #5
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	4413      	add	r3, r2
 80023a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023aa:	461a      	mov	r2, r3
 80023ac:	2320      	movs	r3, #32
 80023ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d009      	beq.n	80023ce <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	015a      	lsls	r2, r3, #5
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	4413      	add	r3, r2
 80023c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023c6:	461a      	mov	r2, r3
 80023c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023cc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	3301      	adds	r3, #1
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d6:	085b      	lsrs	r3, r3, #1
 80023d8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d199      	bne.n	8002314 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f003 fda6 	bl	8005f36 <USB_ReadInterrupts>
 80023ea:	4603      	mov	r3, r0
 80023ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023f4:	f040 80c0 	bne.w	8002578 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f003 fdc7 	bl	8005f90 <USB_ReadDevAllInEpInterrupt>
 8002402:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002408:	e0b2      	b.n	8002570 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800240a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 80a7 	beq.w	8002564 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	4611      	mov	r1, r2
 8002420:	4618      	mov	r0, r3
 8002422:	f003 fded 	bl	8006000 <USB_ReadDevInEPInterrupt>
 8002426:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d057      	beq.n	80024e2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	f003 030f 	and.w	r3, r3, #15
 8002438:	2201      	movs	r2, #1
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002446:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	43db      	mvns	r3, r3
 800244c:	69f9      	ldr	r1, [r7, #28]
 800244e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002452:	4013      	ands	r3, r2
 8002454:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	015a      	lsls	r2, r3, #5
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	4413      	add	r3, r2
 800245e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002462:	461a      	mov	r2, r3
 8002464:	2301      	movs	r3, #1
 8002466:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d132      	bne.n	80024d6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002474:	4613      	mov	r3, r2
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	1a9b      	subs	r3, r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	3348      	adds	r3, #72	; 0x48
 8002480:	6819      	ldr	r1, [r3, #0]
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002486:	4613      	mov	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	1a9b      	subs	r3, r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4403      	add	r3, r0
 8002490:	3344      	adds	r3, #68	; 0x44
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4419      	add	r1, r3
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800249a:	4613      	mov	r3, r2
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	1a9b      	subs	r3, r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4403      	add	r3, r0
 80024a4:	3348      	adds	r3, #72	; 0x48
 80024a6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d113      	bne.n	80024d6 <HAL_PCD_IRQHandler+0x31c>
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b2:	4613      	mov	r3, r2
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	1a9b      	subs	r3, r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	440b      	add	r3, r1
 80024bc:	3350      	adds	r3, #80	; 0x50
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d108      	bne.n	80024d6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6818      	ldr	r0, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80024ce:	461a      	mov	r2, r3
 80024d0:	2101      	movs	r1, #1
 80024d2:	f003 fdf5 	bl	80060c0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	4619      	mov	r1, r3
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f005 fc50 	bl	8007d82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	f003 0308 	and.w	r3, r3, #8
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	015a      	lsls	r2, r3, #5
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	4413      	add	r3, r2
 80024f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024f8:	461a      	mov	r2, r3
 80024fa:	2308      	movs	r3, #8
 80024fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	f003 0310 	and.w	r3, r3, #16
 8002504:	2b00      	cmp	r3, #0
 8002506:	d008      	beq.n	800251a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	015a      	lsls	r2, r3, #5
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	4413      	add	r3, r2
 8002510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002514:	461a      	mov	r2, r3
 8002516:	2310      	movs	r3, #16
 8002518:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002520:	2b00      	cmp	r3, #0
 8002522:	d008      	beq.n	8002536 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002526:	015a      	lsls	r2, r3, #5
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	4413      	add	r3, r2
 800252c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002530:	461a      	mov	r2, r3
 8002532:	2340      	movs	r3, #64	; 0x40
 8002534:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d008      	beq.n	8002552 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	015a      	lsls	r2, r3, #5
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	4413      	add	r3, r2
 8002548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800254c:	461a      	mov	r2, r3
 800254e:	2302      	movs	r3, #2
 8002550:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800255c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 fc03 	bl	8002d6a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	3301      	adds	r3, #1
 8002568:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800256a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800256c:	085b      	lsrs	r3, r3, #1
 800256e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002572:	2b00      	cmp	r3, #0
 8002574:	f47f af49 	bne.w	800240a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f003 fcda 	bl	8005f36 <USB_ReadInterrupts>
 8002582:	4603      	mov	r3, r0
 8002584:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002588:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800258c:	d122      	bne.n	80025d4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	69fa      	ldr	r2, [r7, #28]
 8002598:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800259c:	f023 0301 	bic.w	r3, r3, #1
 80025a0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d108      	bne.n	80025be <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80025b4:	2100      	movs	r1, #0
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 fe0e 	bl	80031d8 <HAL_PCDEx_LPM_Callback>
 80025bc:	e002      	b.n	80025c4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f005 fc4c 	bl	8007e5c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	695a      	ldr	r2, [r3, #20]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80025d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f003 fcac 	bl	8005f36 <USB_ReadInterrupts>
 80025de:	4603      	mov	r3, r0
 80025e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025e8:	d112      	bne.n	8002610 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d102      	bne.n	8002600 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f005 fc08 	bl	8007e10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	695a      	ldr	r2, [r3, #20]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800260e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4618      	mov	r0, r3
 8002616:	f003 fc8e 	bl	8005f36 <USB_ReadInterrupts>
 800261a:	4603      	mov	r3, r0
 800261c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002624:	f040 80c7 	bne.w	80027b6 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	69fa      	ldr	r2, [r7, #28]
 8002632:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002636:	f023 0301 	bic.w	r3, r3, #1
 800263a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2110      	movs	r1, #16
 8002642:	4618      	mov	r0, r3
 8002644:	f002 fd28 	bl	8005098 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002648:	2300      	movs	r3, #0
 800264a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800264c:	e056      	b.n	80026fc <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800264e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002650:	015a      	lsls	r2, r3, #5
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	4413      	add	r3, r2
 8002656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800265a:	461a      	mov	r2, r3
 800265c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002660:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002664:	015a      	lsls	r2, r3, #5
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	4413      	add	r3, r2
 800266a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002672:	0151      	lsls	r1, r2, #5
 8002674:	69fa      	ldr	r2, [r7, #28]
 8002676:	440a      	add	r2, r1
 8002678:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800267c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002680:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002684:	015a      	lsls	r2, r3, #5
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	4413      	add	r3, r2
 800268a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002692:	0151      	lsls	r1, r2, #5
 8002694:	69fa      	ldr	r2, [r7, #28]
 8002696:	440a      	add	r2, r1
 8002698:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800269c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80026a0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80026a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a4:	015a      	lsls	r2, r3, #5
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	4413      	add	r3, r2
 80026aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026ae:	461a      	mov	r2, r3
 80026b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80026b4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80026b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b8:	015a      	lsls	r2, r3, #5
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	4413      	add	r3, r2
 80026be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026c6:	0151      	lsls	r1, r2, #5
 80026c8:	69fa      	ldr	r2, [r7, #28]
 80026ca:	440a      	add	r2, r1
 80026cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80026d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80026d4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80026d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d8:	015a      	lsls	r2, r3, #5
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	4413      	add	r3, r2
 80026de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026e6:	0151      	lsls	r1, r2, #5
 80026e8:	69fa      	ldr	r2, [r7, #28]
 80026ea:	440a      	add	r2, r1
 80026ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80026f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80026f4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f8:	3301      	adds	r3, #1
 80026fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002702:	429a      	cmp	r2, r3
 8002704:	d3a3      	bcc.n	800264e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	69fa      	ldr	r2, [r7, #28]
 8002710:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002714:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002718:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	2b00      	cmp	r3, #0
 8002720:	d016      	beq.n	8002750 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002728:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800272c:	69fa      	ldr	r2, [r7, #28]
 800272e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002732:	f043 030b 	orr.w	r3, r3, #11
 8002736:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002742:	69fa      	ldr	r2, [r7, #28]
 8002744:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002748:	f043 030b 	orr.w	r3, r3, #11
 800274c:	6453      	str	r3, [r2, #68]	; 0x44
 800274e:	e015      	b.n	800277c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	69fa      	ldr	r2, [r7, #28]
 800275a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800275e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002762:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002766:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	69fa      	ldr	r2, [r7, #28]
 8002772:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002776:	f043 030b 	orr.w	r3, r3, #11
 800277a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	69fa      	ldr	r2, [r7, #28]
 8002786:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800278a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800278e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6818      	ldr	r0, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027a0:	461a      	mov	r2, r3
 80027a2:	f003 fc8d 	bl	80060c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695a      	ldr	r2, [r3, #20]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80027b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f003 fbbb 	bl	8005f36 <USB_ReadInterrupts>
 80027c0:	4603      	mov	r3, r0
 80027c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ca:	d124      	bne.n	8002816 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f003 fc51 	bl	8006078 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f002 fcb9 	bl	8005152 <USB_GetDevSpeed>
 80027e0:	4603      	mov	r3, r0
 80027e2:	461a      	mov	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681c      	ldr	r4, [r3, #0]
 80027ec:	f001 fa88 	bl	8003d00 <HAL_RCC_GetHCLKFreq>
 80027f0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	461a      	mov	r2, r3
 80027fa:	4620      	mov	r0, r4
 80027fc:	f002 f9d8 	bl	8004bb0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f005 fae6 	bl	8007dd2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	695a      	ldr	r2, [r3, #20]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002814:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f003 fb8b 	bl	8005f36 <USB_ReadInterrupts>
 8002820:	4603      	mov	r3, r0
 8002822:	f003 0308 	and.w	r3, r3, #8
 8002826:	2b08      	cmp	r3, #8
 8002828:	d10a      	bne.n	8002840 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f005 fac3 	bl	8007db6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	695a      	ldr	r2, [r3, #20]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f002 0208 	and.w	r2, r2, #8
 800283e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f003 fb76 	bl	8005f36 <USB_ReadInterrupts>
 800284a:	4603      	mov	r3, r0
 800284c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002850:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002854:	d10f      	bne.n	8002876 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002856:	2300      	movs	r3, #0
 8002858:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	b2db      	uxtb	r3, r3
 800285e:	4619      	mov	r1, r3
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f005 fb1b 	bl	8007e9c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695a      	ldr	r2, [r3, #20]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002874:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f003 fb5b 	bl	8005f36 <USB_ReadInterrupts>
 8002880:	4603      	mov	r3, r0
 8002882:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002886:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800288a:	d10f      	bne.n	80028ac <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800288c:	2300      	movs	r3, #0
 800288e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	b2db      	uxtb	r3, r3
 8002894:	4619      	mov	r1, r3
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f005 faee 	bl	8007e78 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	695a      	ldr	r2, [r3, #20]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80028aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f003 fb40 	bl	8005f36 <USB_ReadInterrupts>
 80028b6:	4603      	mov	r3, r0
 80028b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80028bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c0:	d10a      	bne.n	80028d8 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f005 fafc 	bl	8007ec0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	695a      	ldr	r2, [r3, #20]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80028d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4618      	mov	r0, r3
 80028de:	f003 fb2a 	bl	8005f36 <USB_ReadInterrupts>
 80028e2:	4603      	mov	r3, r0
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b04      	cmp	r3, #4
 80028ea:	d115      	bne.n	8002918 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	f003 0304 	and.w	r3, r3, #4
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d002      	beq.n	8002904 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f005 faec 	bl	8007edc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6859      	ldr	r1, [r3, #4]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	430a      	orrs	r2, r1
 8002912:	605a      	str	r2, [r3, #4]
 8002914:	e000      	b.n	8002918 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002916:	bf00      	nop
    }
  }
}
 8002918:	3734      	adds	r7, #52	; 0x34
 800291a:	46bd      	mov	sp, r7
 800291c:	bd90      	pop	{r4, r7, pc}

0800291e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b082      	sub	sp, #8
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
 8002926:	460b      	mov	r3, r1
 8002928:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002930:	2b01      	cmp	r3, #1
 8002932:	d101      	bne.n	8002938 <HAL_PCD_SetAddress+0x1a>
 8002934:	2302      	movs	r3, #2
 8002936:	e013      	b.n	8002960 <HAL_PCD_SetAddress+0x42>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	78fa      	ldrb	r2, [r7, #3]
 8002944:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	78fa      	ldrb	r2, [r7, #3]
 800294e:	4611      	mov	r1, r2
 8002950:	4618      	mov	r0, r3
 8002952:	f003 fa88 	bl	8005e66 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	4608      	mov	r0, r1
 8002972:	4611      	mov	r1, r2
 8002974:	461a      	mov	r2, r3
 8002976:	4603      	mov	r3, r0
 8002978:	70fb      	strb	r3, [r7, #3]
 800297a:	460b      	mov	r3, r1
 800297c:	803b      	strh	r3, [r7, #0]
 800297e:	4613      	mov	r3, r2
 8002980:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002982:	2300      	movs	r3, #0
 8002984:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002986:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800298a:	2b00      	cmp	r3, #0
 800298c:	da0f      	bge.n	80029ae <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800298e:	78fb      	ldrb	r3, [r7, #3]
 8002990:	f003 020f 	and.w	r2, r3, #15
 8002994:	4613      	mov	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	1a9b      	subs	r3, r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	3338      	adds	r3, #56	; 0x38
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	4413      	add	r3, r2
 80029a2:	3304      	adds	r3, #4
 80029a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2201      	movs	r2, #1
 80029aa:	705a      	strb	r2, [r3, #1]
 80029ac:	e00f      	b.n	80029ce <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029ae:	78fb      	ldrb	r3, [r7, #3]
 80029b0:	f003 020f 	and.w	r2, r3, #15
 80029b4:	4613      	mov	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	1a9b      	subs	r3, r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	4413      	add	r3, r2
 80029c4:	3304      	adds	r3, #4
 80029c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80029ce:	78fb      	ldrb	r3, [r7, #3]
 80029d0:	f003 030f 	and.w	r3, r3, #15
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80029da:	883a      	ldrh	r2, [r7, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	78ba      	ldrb	r2, [r7, #2]
 80029e4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	785b      	ldrb	r3, [r3, #1]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d004      	beq.n	80029f8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80029f8:	78bb      	ldrb	r3, [r7, #2]
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d102      	bne.n	8002a04 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d101      	bne.n	8002a12 <HAL_PCD_EP_Open+0xaa>
 8002a0e:	2302      	movs	r3, #2
 8002a10:	e00e      	b.n	8002a30 <HAL_PCD_EP_Open+0xc8>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68f9      	ldr	r1, [r7, #12]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f002 fbbb 	bl	800519c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002a2e:	7afb      	ldrb	r3, [r7, #11]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	460b      	mov	r3, r1
 8002a42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	da0f      	bge.n	8002a6c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a4c:	78fb      	ldrb	r3, [r7, #3]
 8002a4e:	f003 020f 	and.w	r2, r3, #15
 8002a52:	4613      	mov	r3, r2
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	1a9b      	subs	r3, r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	3338      	adds	r3, #56	; 0x38
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	4413      	add	r3, r2
 8002a60:	3304      	adds	r3, #4
 8002a62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2201      	movs	r2, #1
 8002a68:	705a      	strb	r2, [r3, #1]
 8002a6a:	e00f      	b.n	8002a8c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a6c:	78fb      	ldrb	r3, [r7, #3]
 8002a6e:	f003 020f 	and.w	r2, r3, #15
 8002a72:	4613      	mov	r3, r2
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	1a9b      	subs	r3, r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	4413      	add	r3, r2
 8002a82:	3304      	adds	r3, #4
 8002a84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002a8c:	78fb      	ldrb	r3, [r7, #3]
 8002a8e:	f003 030f 	and.w	r3, r3, #15
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d101      	bne.n	8002aa6 <HAL_PCD_EP_Close+0x6e>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e00e      	b.n	8002ac4 <HAL_PCD_EP_Close+0x8c>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68f9      	ldr	r1, [r7, #12]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f002 fbf9 	bl	80052ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	607a      	str	r2, [r7, #4]
 8002ad6:	603b      	str	r3, [r7, #0]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002adc:	7afb      	ldrb	r3, [r7, #11]
 8002ade:	f003 020f 	and.w	r2, r3, #15
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	1a9b      	subs	r3, r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	4413      	add	r3, r2
 8002af2:	3304      	adds	r3, #4
 8002af4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	2200      	movs	r2, #0
 8002b06:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b0e:	7afb      	ldrb	r3, [r7, #11]
 8002b10:	f003 030f 	and.w	r3, r3, #15
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d102      	bne.n	8002b28 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b28:	7afb      	ldrb	r3, [r7, #11]
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d109      	bne.n	8002b46 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6818      	ldr	r0, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	6979      	ldr	r1, [r7, #20]
 8002b40:	f002 fed4 	bl	80058ec <USB_EP0StartXfer>
 8002b44:	e008      	b.n	8002b58 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6818      	ldr	r0, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	461a      	mov	r2, r3
 8002b52:	6979      	ldr	r1, [r7, #20]
 8002b54:	f002 fc86 	bl	8005464 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3718      	adds	r7, #24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b086      	sub	sp, #24
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	60f8      	str	r0, [r7, #12]
 8002b6a:	607a      	str	r2, [r7, #4]
 8002b6c:	603b      	str	r3, [r7, #0]
 8002b6e:	460b      	mov	r3, r1
 8002b70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b72:	7afb      	ldrb	r3, [r7, #11]
 8002b74:	f003 020f 	and.w	r2, r3, #15
 8002b78:	4613      	mov	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	1a9b      	subs	r3, r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	3338      	adds	r3, #56	; 0x38
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	4413      	add	r3, r2
 8002b86:	3304      	adds	r3, #4
 8002b88:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ba2:	7afb      	ldrb	r3, [r7, #11]
 8002ba4:	f003 030f 	and.w	r3, r3, #15
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d102      	bne.n	8002bbc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bbc:	7afb      	ldrb	r3, [r7, #11]
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d109      	bne.n	8002bda <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6818      	ldr	r0, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	6979      	ldr	r1, [r7, #20]
 8002bd4:	f002 fe8a 	bl	80058ec <USB_EP0StartXfer>
 8002bd8:	e008      	b.n	8002bec <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6818      	ldr	r0, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	461a      	mov	r2, r3
 8002be6:	6979      	ldr	r1, [r7, #20]
 8002be8:	f002 fc3c 	bl	8005464 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3718      	adds	r7, #24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b084      	sub	sp, #16
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
 8002bfe:	460b      	mov	r3, r1
 8002c00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c02:	78fb      	ldrb	r3, [r7, #3]
 8002c04:	f003 020f 	and.w	r2, r3, #15
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d901      	bls.n	8002c14 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e050      	b.n	8002cb6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	da0f      	bge.n	8002c3c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c1c:	78fb      	ldrb	r3, [r7, #3]
 8002c1e:	f003 020f 	and.w	r2, r3, #15
 8002c22:	4613      	mov	r3, r2
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	1a9b      	subs	r3, r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	3338      	adds	r3, #56	; 0x38
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	4413      	add	r3, r2
 8002c30:	3304      	adds	r3, #4
 8002c32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2201      	movs	r2, #1
 8002c38:	705a      	strb	r2, [r3, #1]
 8002c3a:	e00d      	b.n	8002c58 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c3c:	78fa      	ldrb	r2, [r7, #3]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	1a9b      	subs	r3, r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	3304      	adds	r3, #4
 8002c50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c5e:	78fb      	ldrb	r3, [r7, #3]
 8002c60:	f003 030f 	and.w	r3, r3, #15
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d101      	bne.n	8002c78 <HAL_PCD_EP_SetStall+0x82>
 8002c74:	2302      	movs	r3, #2
 8002c76:	e01e      	b.n	8002cb6 <HAL_PCD_EP_SetStall+0xc0>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68f9      	ldr	r1, [r7, #12]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f003 f819 	bl	8005cbe <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c8c:	78fb      	ldrb	r3, [r7, #3]
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10a      	bne.n	8002cac <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6818      	ldr	r0, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	b2d9      	uxtb	r1, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	f003 fa0a 	bl	80060c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b084      	sub	sp, #16
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002cca:	78fb      	ldrb	r3, [r7, #3]
 8002ccc:	f003 020f 	and.w	r2, r3, #15
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d901      	bls.n	8002cdc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e042      	b.n	8002d62 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002cdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	da0f      	bge.n	8002d04 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ce4:	78fb      	ldrb	r3, [r7, #3]
 8002ce6:	f003 020f 	and.w	r2, r3, #15
 8002cea:	4613      	mov	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	1a9b      	subs	r3, r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	3338      	adds	r3, #56	; 0x38
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	705a      	strb	r2, [r3, #1]
 8002d02:	e00f      	b.n	8002d24 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d04:	78fb      	ldrb	r3, [r7, #3]
 8002d06:	f003 020f 	and.w	r2, r3, #15
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	1a9b      	subs	r3, r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	4413      	add	r3, r2
 8002d1a:	3304      	adds	r3, #4
 8002d1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d2a:	78fb      	ldrb	r3, [r7, #3]
 8002d2c:	f003 030f 	and.w	r3, r3, #15
 8002d30:	b2da      	uxtb	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d101      	bne.n	8002d44 <HAL_PCD_EP_ClrStall+0x86>
 8002d40:	2302      	movs	r3, #2
 8002d42:	e00e      	b.n	8002d62 <HAL_PCD_EP_ClrStall+0xa4>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68f9      	ldr	r1, [r7, #12]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f003 f821 	bl	8005d9a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b08a      	sub	sp, #40	; 0x28
 8002d6e:	af02      	add	r7, sp, #8
 8002d70:	6078      	str	r0, [r7, #4]
 8002d72:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	4613      	mov	r3, r2
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	1a9b      	subs	r3, r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	3338      	adds	r3, #56	; 0x38
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3304      	adds	r3, #4
 8002d90:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	699a      	ldr	r2, [r3, #24]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d901      	bls.n	8002da2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e06c      	b.n	8002e7c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	695a      	ldr	r2, [r3, #20]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	69fa      	ldr	r2, [r7, #28]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d902      	bls.n	8002dbe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	3303      	adds	r3, #3
 8002dc2:	089b      	lsrs	r3, r3, #2
 8002dc4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002dc6:	e02b      	b.n	8002e20 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	695a      	ldr	r2, [r3, #20]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	69fa      	ldr	r2, [r7, #28]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d902      	bls.n	8002de4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	3303      	adds	r3, #3
 8002de8:	089b      	lsrs	r3, r3, #2
 8002dea:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	68d9      	ldr	r1, [r3, #12]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	9300      	str	r3, [sp, #0]
 8002e00:	4603      	mov	r3, r0
 8002e02:	6978      	ldr	r0, [r7, #20]
 8002e04:	f002 fec5 	bl	8005b92 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	68da      	ldr	r2, [r3, #12]
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	441a      	add	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	699a      	ldr	r2, [r3, #24]
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	441a      	add	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	015a      	lsls	r2, r3, #5
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	4413      	add	r3, r2
 8002e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d809      	bhi.n	8002e4a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	699a      	ldr	r2, [r3, #24]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d203      	bcs.n	8002e4a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1be      	bne.n	8002dc8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	695a      	ldr	r2, [r3, #20]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d811      	bhi.n	8002e7a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	f003 030f 	and.w	r3, r3, #15
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	6939      	ldr	r1, [r7, #16]
 8002e72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e76:	4013      	ands	r3, r2
 8002e78:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3720      	adds	r7, #32
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	333c      	adds	r3, #60	; 0x3c
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	015a      	lsls	r2, r3, #5
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	f040 80a0 	bne.w	8002ffc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	f003 0308 	and.w	r3, r3, #8
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d015      	beq.n	8002ef2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	4a72      	ldr	r2, [pc, #456]	; (8003094 <PCD_EP_OutXfrComplete_int+0x210>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	f240 80dd 	bls.w	800308a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 80d7 	beq.w	800308a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	015a      	lsls	r2, r3, #5
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ee8:	461a      	mov	r2, r3
 8002eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002eee:	6093      	str	r3, [r2, #8]
 8002ef0:	e0cb      	b.n	800308a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	f003 0320 	and.w	r3, r3, #32
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d009      	beq.n	8002f10 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	015a      	lsls	r2, r3, #5
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	4413      	add	r3, r2
 8002f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f08:	461a      	mov	r2, r3
 8002f0a:	2320      	movs	r3, #32
 8002f0c:	6093      	str	r3, [r2, #8]
 8002f0e:	e0bc      	b.n	800308a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f040 80b7 	bne.w	800308a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4a5d      	ldr	r2, [pc, #372]	; (8003094 <PCD_EP_OutXfrComplete_int+0x210>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d90f      	bls.n	8002f44 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00a      	beq.n	8002f44 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	015a      	lsls	r2, r3, #5
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	4413      	add	r3, r2
 8002f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f40:	6093      	str	r3, [r2, #8]
 8002f42:	e0a2      	b.n	800308a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	1a9b      	subs	r3, r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002f56:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	0159      	lsls	r1, r3, #5
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	440b      	add	r3, r1
 8002f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002f6a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	4613      	mov	r3, r2
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	1a9b      	subs	r3, r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4403      	add	r3, r0
 8002f7a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002f7e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	4613      	mov	r3, r2
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	1a9b      	subs	r3, r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002f92:	6819      	ldr	r1, [r3, #0]
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	1a9b      	subs	r3, r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4403      	add	r3, r0
 8002fa2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4419      	add	r1, r3
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	1a9b      	subs	r3, r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4403      	add	r3, r0
 8002fb8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002fbc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d114      	bne.n	8002fee <PCD_EP_OutXfrComplete_int+0x16a>
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	1a9b      	subs	r3, r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d108      	bne.n	8002fee <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6818      	ldr	r0, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	2101      	movs	r1, #1
 8002fea:	f003 f869 	bl	80060c0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f004 fea9 	bl	8007d4c <HAL_PCD_DataOutStageCallback>
 8002ffa:	e046      	b.n	800308a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4a26      	ldr	r2, [pc, #152]	; (8003098 <PCD_EP_OutXfrComplete_int+0x214>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d124      	bne.n	800304e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00a      	beq.n	8003024 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	015a      	lsls	r2, r3, #5
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	4413      	add	r3, r2
 8003016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800301a:	461a      	mov	r2, r3
 800301c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003020:	6093      	str	r3, [r2, #8]
 8003022:	e032      	b.n	800308a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f003 0320 	and.w	r3, r3, #32
 800302a:	2b00      	cmp	r3, #0
 800302c:	d008      	beq.n	8003040 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	015a      	lsls	r2, r3, #5
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	4413      	add	r3, r2
 8003036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800303a:	461a      	mov	r2, r3
 800303c:	2320      	movs	r3, #32
 800303e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	b2db      	uxtb	r3, r3
 8003044:	4619      	mov	r1, r3
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f004 fe80 	bl	8007d4c <HAL_PCD_DataOutStageCallback>
 800304c:	e01d      	b.n	800308a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d114      	bne.n	800307e <PCD_EP_OutXfrComplete_int+0x1fa>
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	4613      	mov	r3, r2
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	1a9b      	subs	r3, r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d108      	bne.n	800307e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6818      	ldr	r0, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003076:	461a      	mov	r2, r3
 8003078:	2100      	movs	r1, #0
 800307a:	f003 f821 	bl	80060c0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	b2db      	uxtb	r3, r3
 8003082:	4619      	mov	r1, r3
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f004 fe61 	bl	8007d4c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3718      	adds	r7, #24
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	4f54300a 	.word	0x4f54300a
 8003098:	4f54310a 	.word	0x4f54310a

0800309c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	333c      	adds	r3, #60	; 0x3c
 80030b4:	3304      	adds	r3, #4
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	015a      	lsls	r2, r3, #5
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	4413      	add	r3, r2
 80030c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	4a15      	ldr	r2, [pc, #84]	; (8003124 <PCD_EP_OutSetupPacket_int+0x88>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d90e      	bls.n	80030f0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d009      	beq.n	80030f0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	015a      	lsls	r2, r3, #5
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	4413      	add	r3, r2
 80030e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030e8:	461a      	mov	r2, r3
 80030ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f004 fe19 	bl	8007d28 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	4a0a      	ldr	r2, [pc, #40]	; (8003124 <PCD_EP_OutSetupPacket_int+0x88>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d90c      	bls.n	8003118 <PCD_EP_OutSetupPacket_int+0x7c>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d108      	bne.n	8003118 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6818      	ldr	r0, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003110:	461a      	mov	r2, r3
 8003112:	2101      	movs	r1, #1
 8003114:	f002 ffd4 	bl	80060c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3718      	adds	r7, #24
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	4f54300a 	.word	0x4f54300a

08003128 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	70fb      	strb	r3, [r7, #3]
 8003134:	4613      	mov	r3, r2
 8003136:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003140:	78fb      	ldrb	r3, [r7, #3]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d107      	bne.n	8003156 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003146:	883b      	ldrh	r3, [r7, #0]
 8003148:	0419      	lsls	r1, r3, #16
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	430a      	orrs	r2, r1
 8003152:	629a      	str	r2, [r3, #40]	; 0x28
 8003154:	e028      	b.n	80031a8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315c:	0c1b      	lsrs	r3, r3, #16
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	4413      	add	r3, r2
 8003162:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003164:	2300      	movs	r3, #0
 8003166:	73fb      	strb	r3, [r7, #15]
 8003168:	e00d      	b.n	8003186 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	7bfb      	ldrb	r3, [r7, #15]
 8003170:	3340      	adds	r3, #64	; 0x40
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	0c1b      	lsrs	r3, r3, #16
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	4413      	add	r3, r2
 800317e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003180:	7bfb      	ldrb	r3, [r7, #15]
 8003182:	3301      	adds	r3, #1
 8003184:	73fb      	strb	r3, [r7, #15]
 8003186:	7bfa      	ldrb	r2, [r7, #15]
 8003188:	78fb      	ldrb	r3, [r7, #3]
 800318a:	3b01      	subs	r3, #1
 800318c:	429a      	cmp	r2, r3
 800318e:	d3ec      	bcc.n	800316a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003190:	883b      	ldrh	r3, [r7, #0]
 8003192:	0418      	lsls	r0, r3, #16
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6819      	ldr	r1, [r3, #0]
 8003198:	78fb      	ldrb	r3, [r7, #3]
 800319a:	3b01      	subs	r3, #1
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	4302      	orrs	r2, r0
 80031a0:	3340      	adds	r3, #64	; 0x40
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	440b      	add	r3, r1
 80031a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	460b      	mov	r3, r1
 80031c0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	887a      	ldrh	r2, [r7, #2]
 80031c8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	460b      	mov	r3, r1
 80031e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e314      	b.n	800382c <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2b0f      	cmp	r3, #15
 8003208:	d903      	bls.n	8003212 <HAL_RCC_OscConfig+0x22>
 800320a:	21e8      	movs	r1, #232	; 0xe8
 800320c:	4897      	ldr	r0, [pc, #604]	; (800346c <HAL_RCC_OscConfig+0x27c>)
 800320e:	f7fd fbfe 	bl	8000a0e <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 8088 	beq.w	8003330 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00d      	beq.n	8003244 <HAL_RCC_OscConfig+0x54>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003230:	d008      	beq.n	8003244 <HAL_RCC_OscConfig+0x54>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800323a:	d003      	beq.n	8003244 <HAL_RCC_OscConfig+0x54>
 800323c:	21ed      	movs	r1, #237	; 0xed
 800323e:	488b      	ldr	r0, [pc, #556]	; (800346c <HAL_RCC_OscConfig+0x27c>)
 8003240:	f7fd fbe5 	bl	8000a0e <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003244:	4b8a      	ldr	r3, [pc, #552]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 030c 	and.w	r3, r3, #12
 800324c:	2b04      	cmp	r3, #4
 800324e:	d00c      	beq.n	800326a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003250:	4b87      	ldr	r3, [pc, #540]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003258:	2b08      	cmp	r3, #8
 800325a:	d112      	bne.n	8003282 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800325c:	4b84      	ldr	r3, [pc, #528]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003264:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003268:	d10b      	bne.n	8003282 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800326a:	4b81      	ldr	r3, [pc, #516]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d05b      	beq.n	800332e <HAL_RCC_OscConfig+0x13e>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d157      	bne.n	800332e <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e2d4      	b.n	800382c <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800328a:	d106      	bne.n	800329a <HAL_RCC_OscConfig+0xaa>
 800328c:	4b78      	ldr	r3, [pc, #480]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a77      	ldr	r2, [pc, #476]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 8003292:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003296:	6013      	str	r3, [r2, #0]
 8003298:	e01d      	b.n	80032d6 <HAL_RCC_OscConfig+0xe6>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032a2:	d10c      	bne.n	80032be <HAL_RCC_OscConfig+0xce>
 80032a4:	4b72      	ldr	r3, [pc, #456]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a71      	ldr	r2, [pc, #452]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 80032aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032ae:	6013      	str	r3, [r2, #0]
 80032b0:	4b6f      	ldr	r3, [pc, #444]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a6e      	ldr	r2, [pc, #440]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 80032b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ba:	6013      	str	r3, [r2, #0]
 80032bc:	e00b      	b.n	80032d6 <HAL_RCC_OscConfig+0xe6>
 80032be:	4b6c      	ldr	r3, [pc, #432]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a6b      	ldr	r2, [pc, #428]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 80032c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	4b69      	ldr	r3, [pc, #420]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a68      	ldr	r2, [pc, #416]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 80032d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032d4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d013      	beq.n	8003306 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032de:	f7fd fe89 	bl	8000ff4 <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e4:	e008      	b.n	80032f8 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032e6:	f7fd fe85 	bl	8000ff4 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b64      	cmp	r3, #100	; 0x64
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e299      	b.n	800382c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f8:	4b5d      	ldr	r3, [pc, #372]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0f0      	beq.n	80032e6 <HAL_RCC_OscConfig+0xf6>
 8003304:	e014      	b.n	8003330 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003306:	f7fd fe75 	bl	8000ff4 <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800330c:	e008      	b.n	8003320 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800330e:	f7fd fe71 	bl	8000ff4 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b64      	cmp	r3, #100	; 0x64
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e285      	b.n	800382c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003320:	4b53      	ldr	r3, [pc, #332]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1f0      	bne.n	800330e <HAL_RCC_OscConfig+0x11e>
 800332c:	e000      	b.n	8003330 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800332e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d079      	beq.n	8003430 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d008      	beq.n	8003356 <HAL_RCC_OscConfig+0x166>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d004      	beq.n	8003356 <HAL_RCC_OscConfig+0x166>
 800334c:	f240 111f 	movw	r1, #287	; 0x11f
 8003350:	4846      	ldr	r0, [pc, #280]	; (800346c <HAL_RCC_OscConfig+0x27c>)
 8003352:	f7fd fb5c 	bl	8000a0e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	2b1f      	cmp	r3, #31
 800335c:	d904      	bls.n	8003368 <HAL_RCC_OscConfig+0x178>
 800335e:	f44f 7190 	mov.w	r1, #288	; 0x120
 8003362:	4842      	ldr	r0, [pc, #264]	; (800346c <HAL_RCC_OscConfig+0x27c>)
 8003364:	f7fd fb53 	bl	8000a0e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003368:	4b41      	ldr	r3, [pc, #260]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f003 030c 	and.w	r3, r3, #12
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00b      	beq.n	800338c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003374:	4b3e      	ldr	r3, [pc, #248]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800337c:	2b08      	cmp	r3, #8
 800337e:	d11c      	bne.n	80033ba <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003380:	4b3b      	ldr	r3, [pc, #236]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d116      	bne.n	80033ba <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800338c:	4b38      	ldr	r3, [pc, #224]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d005      	beq.n	80033a4 <HAL_RCC_OscConfig+0x1b4>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d001      	beq.n	80033a4 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e243      	b.n	800382c <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a4:	4b32      	ldr	r3, [pc, #200]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	492f      	ldr	r1, [pc, #188]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033b8:	e03a      	b.n	8003430 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d020      	beq.n	8003404 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033c2:	4b2c      	ldr	r3, [pc, #176]	; (8003474 <HAL_RCC_OscConfig+0x284>)
 80033c4:	2201      	movs	r2, #1
 80033c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c8:	f7fd fe14 	bl	8000ff4 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033d0:	f7fd fe10 	bl	8000ff4 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e224      	b.n	800382c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e2:	4b23      	ldr	r3, [pc, #140]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0f0      	beq.n	80033d0 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ee:	4b20      	ldr	r3, [pc, #128]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	491c      	ldr	r1, [pc, #112]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	600b      	str	r3, [r1, #0]
 8003402:	e015      	b.n	8003430 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003404:	4b1b      	ldr	r3, [pc, #108]	; (8003474 <HAL_RCC_OscConfig+0x284>)
 8003406:	2200      	movs	r2, #0
 8003408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340a:	f7fd fdf3 	bl	8000ff4 <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003412:	f7fd fdef 	bl	8000ff4 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e203      	b.n	800382c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003424:	4b12      	ldr	r3, [pc, #72]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1f0      	bne.n	8003412 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0308 	and.w	r3, r3, #8
 8003438:	2b00      	cmp	r3, #0
 800343a:	d045      	beq.n	80034c8 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d008      	beq.n	8003456 <HAL_RCC_OscConfig+0x266>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d004      	beq.n	8003456 <HAL_RCC_OscConfig+0x266>
 800344c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8003450:	4806      	ldr	r0, [pc, #24]	; (800346c <HAL_RCC_OscConfig+0x27c>)
 8003452:	f7fd fadc 	bl	8000a0e <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d01e      	beq.n	800349c <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800345e:	4b06      	ldr	r3, [pc, #24]	; (8003478 <HAL_RCC_OscConfig+0x288>)
 8003460:	2201      	movs	r2, #1
 8003462:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003464:	f7fd fdc6 	bl	8000ff4 <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800346a:	e010      	b.n	800348e <HAL_RCC_OscConfig+0x29e>
 800346c:	0800ec6c 	.word	0x0800ec6c
 8003470:	40023800 	.word	0x40023800
 8003474:	42470000 	.word	0x42470000
 8003478:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800347c:	f7fd fdba 	bl	8000ff4 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e1ce      	b.n	800382c <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800348e:	4b5e      	ldr	r3, [pc, #376]	; (8003608 <HAL_RCC_OscConfig+0x418>)
 8003490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0f0      	beq.n	800347c <HAL_RCC_OscConfig+0x28c>
 800349a:	e015      	b.n	80034c8 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800349c:	4b5b      	ldr	r3, [pc, #364]	; (800360c <HAL_RCC_OscConfig+0x41c>)
 800349e:	2200      	movs	r2, #0
 80034a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a2:	f7fd fda7 	bl	8000ff4 <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a8:	e008      	b.n	80034bc <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034aa:	f7fd fda3 	bl	8000ff4 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e1b7      	b.n	800382c <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034bc:	4b52      	ldr	r3, [pc, #328]	; (8003608 <HAL_RCC_OscConfig+0x418>)
 80034be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1f0      	bne.n	80034aa <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 80b0 	beq.w	8003636 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034d6:	2300      	movs	r3, #0
 80034d8:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00c      	beq.n	80034fc <HAL_RCC_OscConfig+0x30c>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d008      	beq.n	80034fc <HAL_RCC_OscConfig+0x30c>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	2b05      	cmp	r3, #5
 80034f0:	d004      	beq.n	80034fc <HAL_RCC_OscConfig+0x30c>
 80034f2:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80034f6:	4846      	ldr	r0, [pc, #280]	; (8003610 <HAL_RCC_OscConfig+0x420>)
 80034f8:	f7fd fa89 	bl	8000a0e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034fc:	4b42      	ldr	r3, [pc, #264]	; (8003608 <HAL_RCC_OscConfig+0x418>)
 80034fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10f      	bne.n	8003528 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003508:	2300      	movs	r3, #0
 800350a:	60bb      	str	r3, [r7, #8]
 800350c:	4b3e      	ldr	r3, [pc, #248]	; (8003608 <HAL_RCC_OscConfig+0x418>)
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	4a3d      	ldr	r2, [pc, #244]	; (8003608 <HAL_RCC_OscConfig+0x418>)
 8003512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003516:	6413      	str	r3, [r2, #64]	; 0x40
 8003518:	4b3b      	ldr	r3, [pc, #236]	; (8003608 <HAL_RCC_OscConfig+0x418>)
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003520:	60bb      	str	r3, [r7, #8]
 8003522:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003524:	2301      	movs	r3, #1
 8003526:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003528:	4b3a      	ldr	r3, [pc, #232]	; (8003614 <HAL_RCC_OscConfig+0x424>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003530:	2b00      	cmp	r3, #0
 8003532:	d118      	bne.n	8003566 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003534:	4b37      	ldr	r3, [pc, #220]	; (8003614 <HAL_RCC_OscConfig+0x424>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a36      	ldr	r2, [pc, #216]	; (8003614 <HAL_RCC_OscConfig+0x424>)
 800353a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800353e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003540:	f7fd fd58 	bl	8000ff4 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003548:	f7fd fd54 	bl	8000ff4 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e168      	b.n	800382c <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800355a:	4b2e      	ldr	r3, [pc, #184]	; (8003614 <HAL_RCC_OscConfig+0x424>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0f0      	beq.n	8003548 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d106      	bne.n	800357c <HAL_RCC_OscConfig+0x38c>
 800356e:	4b26      	ldr	r3, [pc, #152]	; (8003608 <HAL_RCC_OscConfig+0x418>)
 8003570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003572:	4a25      	ldr	r2, [pc, #148]	; (8003608 <HAL_RCC_OscConfig+0x418>)
 8003574:	f043 0301 	orr.w	r3, r3, #1
 8003578:	6713      	str	r3, [r2, #112]	; 0x70
 800357a:	e01c      	b.n	80035b6 <HAL_RCC_OscConfig+0x3c6>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	2b05      	cmp	r3, #5
 8003582:	d10c      	bne.n	800359e <HAL_RCC_OscConfig+0x3ae>
 8003584:	4b20      	ldr	r3, [pc, #128]	; (8003608 <HAL_RCC_OscConfig+0x418>)
 8003586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003588:	4a1f      	ldr	r2, [pc, #124]	; (8003608 <HAL_RCC_OscConfig+0x418>)
 800358a:	f043 0304 	orr.w	r3, r3, #4
 800358e:	6713      	str	r3, [r2, #112]	; 0x70
 8003590:	4b1d      	ldr	r3, [pc, #116]	; (8003608 <HAL_RCC_OscConfig+0x418>)
 8003592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003594:	4a1c      	ldr	r2, [pc, #112]	; (8003608 <HAL_RCC_OscConfig+0x418>)
 8003596:	f043 0301 	orr.w	r3, r3, #1
 800359a:	6713      	str	r3, [r2, #112]	; 0x70
 800359c:	e00b      	b.n	80035b6 <HAL_RCC_OscConfig+0x3c6>
 800359e:	4b1a      	ldr	r3, [pc, #104]	; (8003608 <HAL_RCC_OscConfig+0x418>)
 80035a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a2:	4a19      	ldr	r2, [pc, #100]	; (8003608 <HAL_RCC_OscConfig+0x418>)
 80035a4:	f023 0301 	bic.w	r3, r3, #1
 80035a8:	6713      	str	r3, [r2, #112]	; 0x70
 80035aa:	4b17      	ldr	r3, [pc, #92]	; (8003608 <HAL_RCC_OscConfig+0x418>)
 80035ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ae:	4a16      	ldr	r2, [pc, #88]	; (8003608 <HAL_RCC_OscConfig+0x418>)
 80035b0:	f023 0304 	bic.w	r3, r3, #4
 80035b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d015      	beq.n	80035ea <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035be:	f7fd fd19 	bl	8000ff4 <HAL_GetTick>
 80035c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c4:	e00a      	b.n	80035dc <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035c6:	f7fd fd15 	bl	8000ff4 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e127      	b.n	800382c <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035dc:	4b0a      	ldr	r3, [pc, #40]	; (8003608 <HAL_RCC_OscConfig+0x418>)
 80035de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0ee      	beq.n	80035c6 <HAL_RCC_OscConfig+0x3d6>
 80035e8:	e01c      	b.n	8003624 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ea:	f7fd fd03 	bl	8000ff4 <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035f0:	e012      	b.n	8003618 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035f2:	f7fd fcff 	bl	8000ff4 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003600:	4293      	cmp	r3, r2
 8003602:	d909      	bls.n	8003618 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e111      	b.n	800382c <HAL_RCC_OscConfig+0x63c>
 8003608:	40023800 	.word	0x40023800
 800360c:	42470e80 	.word	0x42470e80
 8003610:	0800ec6c 	.word	0x0800ec6c
 8003614:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003618:	4b86      	ldr	r3, [pc, #536]	; (8003834 <HAL_RCC_OscConfig+0x644>)
 800361a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1e6      	bne.n	80035f2 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003624:	7dfb      	ldrb	r3, [r7, #23]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d105      	bne.n	8003636 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800362a:	4b82      	ldr	r3, [pc, #520]	; (8003834 <HAL_RCC_OscConfig+0x644>)
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	4a81      	ldr	r2, [pc, #516]	; (8003834 <HAL_RCC_OscConfig+0x644>)
 8003630:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003634:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00c      	beq.n	8003658 <HAL_RCC_OscConfig+0x468>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d008      	beq.n	8003658 <HAL_RCC_OscConfig+0x468>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	2b02      	cmp	r3, #2
 800364c:	d004      	beq.n	8003658 <HAL_RCC_OscConfig+0x468>
 800364e:	f240 11cf 	movw	r1, #463	; 0x1cf
 8003652:	4879      	ldr	r0, [pc, #484]	; (8003838 <HAL_RCC_OscConfig+0x648>)
 8003654:	f7fd f9db 	bl	8000a0e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 80e4 	beq.w	800382a <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003662:	4b74      	ldr	r3, [pc, #464]	; (8003834 <HAL_RCC_OscConfig+0x644>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 030c 	and.w	r3, r3, #12
 800366a:	2b08      	cmp	r3, #8
 800366c:	f000 80a5 	beq.w	80037ba <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	2b02      	cmp	r3, #2
 8003676:	f040 8089 	bne.w	800378c <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d009      	beq.n	8003696 <HAL_RCC_OscConfig+0x4a6>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800368a:	d004      	beq.n	8003696 <HAL_RCC_OscConfig+0x4a6>
 800368c:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8003690:	4869      	ldr	r0, [pc, #420]	; (8003838 <HAL_RCC_OscConfig+0x648>)
 8003692:	f7fd f9bc 	bl	8000a0e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	2b3f      	cmp	r3, #63	; 0x3f
 800369c:	d904      	bls.n	80036a8 <HAL_RCC_OscConfig+0x4b8>
 800369e:	f240 11d9 	movw	r1, #473	; 0x1d9
 80036a2:	4865      	ldr	r0, [pc, #404]	; (8003838 <HAL_RCC_OscConfig+0x648>)
 80036a4:	f7fd f9b3 	bl	8000a0e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	2b31      	cmp	r3, #49	; 0x31
 80036ae:	d904      	bls.n	80036ba <HAL_RCC_OscConfig+0x4ca>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80036b8:	d904      	bls.n	80036c4 <HAL_RCC_OscConfig+0x4d4>
 80036ba:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80036be:	485e      	ldr	r0, [pc, #376]	; (8003838 <HAL_RCC_OscConfig+0x648>)
 80036c0:	f7fd f9a5 	bl	8000a0e <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d010      	beq.n	80036ee <HAL_RCC_OscConfig+0x4fe>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d00c      	beq.n	80036ee <HAL_RCC_OscConfig+0x4fe>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d8:	2b06      	cmp	r3, #6
 80036da:	d008      	beq.n	80036ee <HAL_RCC_OscConfig+0x4fe>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e0:	2b08      	cmp	r3, #8
 80036e2:	d004      	beq.n	80036ee <HAL_RCC_OscConfig+0x4fe>
 80036e4:	f240 11db 	movw	r1, #475	; 0x1db
 80036e8:	4853      	ldr	r0, [pc, #332]	; (8003838 <HAL_RCC_OscConfig+0x648>)
 80036ea:	f7fd f990 	bl	8000a0e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d903      	bls.n	80036fe <HAL_RCC_OscConfig+0x50e>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fa:	2b0f      	cmp	r3, #15
 80036fc:	d904      	bls.n	8003708 <HAL_RCC_OscConfig+0x518>
 80036fe:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8003702:	484d      	ldr	r0, [pc, #308]	; (8003838 <HAL_RCC_OscConfig+0x648>)
 8003704:	f7fd f983 	bl	8000a0e <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003708:	4b4c      	ldr	r3, [pc, #304]	; (800383c <HAL_RCC_OscConfig+0x64c>)
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370e:	f7fd fc71 	bl	8000ff4 <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003714:	e008      	b.n	8003728 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003716:	f7fd fc6d 	bl	8000ff4 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e081      	b.n	800382c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003728:	4b42      	ldr	r3, [pc, #264]	; (8003834 <HAL_RCC_OscConfig+0x644>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1f0      	bne.n	8003716 <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	69da      	ldr	r2, [r3, #28]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	431a      	orrs	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	019b      	lsls	r3, r3, #6
 8003744:	431a      	orrs	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374a:	085b      	lsrs	r3, r3, #1
 800374c:	3b01      	subs	r3, #1
 800374e:	041b      	lsls	r3, r3, #16
 8003750:	431a      	orrs	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003756:	061b      	lsls	r3, r3, #24
 8003758:	4936      	ldr	r1, [pc, #216]	; (8003834 <HAL_RCC_OscConfig+0x644>)
 800375a:	4313      	orrs	r3, r2
 800375c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800375e:	4b37      	ldr	r3, [pc, #220]	; (800383c <HAL_RCC_OscConfig+0x64c>)
 8003760:	2201      	movs	r2, #1
 8003762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003764:	f7fd fc46 	bl	8000ff4 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800376c:	f7fd fc42 	bl	8000ff4 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e056      	b.n	800382c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800377e:	4b2d      	ldr	r3, [pc, #180]	; (8003834 <HAL_RCC_OscConfig+0x644>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0f0      	beq.n	800376c <HAL_RCC_OscConfig+0x57c>
 800378a:	e04e      	b.n	800382a <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800378c:	4b2b      	ldr	r3, [pc, #172]	; (800383c <HAL_RCC_OscConfig+0x64c>)
 800378e:	2200      	movs	r2, #0
 8003790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003792:	f7fd fc2f 	bl	8000ff4 <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003798:	e008      	b.n	80037ac <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800379a:	f7fd fc2b 	bl	8000ff4 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e03f      	b.n	800382c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ac:	4b21      	ldr	r3, [pc, #132]	; (8003834 <HAL_RCC_OscConfig+0x644>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1f0      	bne.n	800379a <HAL_RCC_OscConfig+0x5aa>
 80037b8:	e037      	b.n	800382a <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d101      	bne.n	80037c6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e032      	b.n	800382c <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037c6:	4b1b      	ldr	r3, [pc, #108]	; (8003834 <HAL_RCC_OscConfig+0x644>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d028      	beq.n	8003826 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037de:	429a      	cmp	r2, r3
 80037e0:	d121      	bne.n	8003826 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d11a      	bne.n	8003826 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037f6:	4013      	ands	r3, r2
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037fc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037fe:	4293      	cmp	r3, r2
 8003800:	d111      	bne.n	8003826 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380c:	085b      	lsrs	r3, r3, #1
 800380e:	3b01      	subs	r3, #1
 8003810:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003812:	429a      	cmp	r2, r3
 8003814:	d107      	bne.n	8003826 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003820:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003822:	429a      	cmp	r2, r3
 8003824:	d001      	beq.n	800382a <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e000      	b.n	800382c <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3718      	adds	r7, #24
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40023800 	.word	0x40023800
 8003838:	0800ec6c 	.word	0x0800ec6c
 800383c:	42470060 	.word	0x42470060

08003840 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d101      	bne.n	8003854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e174      	b.n	8003b3e <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <HAL_RCC_ClockConfig+0x24>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2b0f      	cmp	r3, #15
 8003862:	d904      	bls.n	800386e <HAL_RCC_ClockConfig+0x2e>
 8003864:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8003868:	487b      	ldr	r0, [pc, #492]	; (8003a58 <HAL_RCC_ClockConfig+0x218>)
 800386a:	f7fd f8d0 	bl	8000a0e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d019      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x68>
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d016      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x68>
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2b02      	cmp	r3, #2
 800387e:	d013      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x68>
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	2b03      	cmp	r3, #3
 8003884:	d010      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x68>
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2b04      	cmp	r3, #4
 800388a:	d00d      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x68>
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	2b05      	cmp	r3, #5
 8003890:	d00a      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x68>
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2b06      	cmp	r3, #6
 8003896:	d007      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x68>
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	2b07      	cmp	r3, #7
 800389c:	d004      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x68>
 800389e:	f240 215d 	movw	r1, #605	; 0x25d
 80038a2:	486d      	ldr	r0, [pc, #436]	; (8003a58 <HAL_RCC_ClockConfig+0x218>)
 80038a4:	f7fd f8b3 	bl	8000a0e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038a8:	4b6c      	ldr	r3, [pc, #432]	; (8003a5c <HAL_RCC_ClockConfig+0x21c>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d90c      	bls.n	80038d0 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038b6:	4b69      	ldr	r3, [pc, #420]	; (8003a5c <HAL_RCC_ClockConfig+0x21c>)
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	b2d2      	uxtb	r2, r2
 80038bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038be:	4b67      	ldr	r3, [pc, #412]	; (8003a5c <HAL_RCC_ClockConfig+0x21c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d001      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e136      	b.n	8003b3e <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d049      	beq.n	8003970 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038e8:	4b5d      	ldr	r3, [pc, #372]	; (8003a60 <HAL_RCC_ClockConfig+0x220>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	4a5c      	ldr	r2, [pc, #368]	; (8003a60 <HAL_RCC_ClockConfig+0x220>)
 80038ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0308 	and.w	r3, r3, #8
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d005      	beq.n	800390c <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003900:	4b57      	ldr	r3, [pc, #348]	; (8003a60 <HAL_RCC_ClockConfig+0x220>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	4a56      	ldr	r2, [pc, #344]	; (8003a60 <HAL_RCC_ClockConfig+0x220>)
 8003906:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800390a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d024      	beq.n	800395e <HAL_RCC_ClockConfig+0x11e>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	2b80      	cmp	r3, #128	; 0x80
 800391a:	d020      	beq.n	800395e <HAL_RCC_ClockConfig+0x11e>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	2b90      	cmp	r3, #144	; 0x90
 8003922:	d01c      	beq.n	800395e <HAL_RCC_ClockConfig+0x11e>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	2ba0      	cmp	r3, #160	; 0xa0
 800392a:	d018      	beq.n	800395e <HAL_RCC_ClockConfig+0x11e>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	2bb0      	cmp	r3, #176	; 0xb0
 8003932:	d014      	beq.n	800395e <HAL_RCC_ClockConfig+0x11e>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	2bc0      	cmp	r3, #192	; 0xc0
 800393a:	d010      	beq.n	800395e <HAL_RCC_ClockConfig+0x11e>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	2bd0      	cmp	r3, #208	; 0xd0
 8003942:	d00c      	beq.n	800395e <HAL_RCC_ClockConfig+0x11e>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	2be0      	cmp	r3, #224	; 0xe0
 800394a:	d008      	beq.n	800395e <HAL_RCC_ClockConfig+0x11e>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	2bf0      	cmp	r3, #240	; 0xf0
 8003952:	d004      	beq.n	800395e <HAL_RCC_ClockConfig+0x11e>
 8003954:	f44f 7120 	mov.w	r1, #640	; 0x280
 8003958:	483f      	ldr	r0, [pc, #252]	; (8003a58 <HAL_RCC_ClockConfig+0x218>)
 800395a:	f7fd f858 	bl	8000a0e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800395e:	4b40      	ldr	r3, [pc, #256]	; (8003a60 <HAL_RCC_ClockConfig+0x220>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	493d      	ldr	r1, [pc, #244]	; (8003a60 <HAL_RCC_ClockConfig+0x220>)
 800396c:	4313      	orrs	r3, r2
 800396e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b00      	cmp	r3, #0
 800397a:	d059      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d010      	beq.n	80039a6 <HAL_RCC_ClockConfig+0x166>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d00c      	beq.n	80039a6 <HAL_RCC_ClockConfig+0x166>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	2b02      	cmp	r3, #2
 8003992:	d008      	beq.n	80039a6 <HAL_RCC_ClockConfig+0x166>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	2b03      	cmp	r3, #3
 800399a:	d004      	beq.n	80039a6 <HAL_RCC_ClockConfig+0x166>
 800399c:	f240 2187 	movw	r1, #647	; 0x287
 80039a0:	482d      	ldr	r0, [pc, #180]	; (8003a58 <HAL_RCC_ClockConfig+0x218>)
 80039a2:	f7fd f834 	bl	8000a0e <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d107      	bne.n	80039be <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ae:	4b2c      	ldr	r3, [pc, #176]	; (8003a60 <HAL_RCC_ClockConfig+0x220>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d119      	bne.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e0bf      	b.n	8003b3e <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d003      	beq.n	80039ce <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ca:	2b03      	cmp	r3, #3
 80039cc:	d107      	bne.n	80039de <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ce:	4b24      	ldr	r3, [pc, #144]	; (8003a60 <HAL_RCC_ClockConfig+0x220>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d109      	bne.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e0af      	b.n	8003b3e <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039de:	4b20      	ldr	r3, [pc, #128]	; (8003a60 <HAL_RCC_ClockConfig+0x220>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e0a7      	b.n	8003b3e <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ee:	4b1c      	ldr	r3, [pc, #112]	; (8003a60 <HAL_RCC_ClockConfig+0x220>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f023 0203 	bic.w	r2, r3, #3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	4919      	ldr	r1, [pc, #100]	; (8003a60 <HAL_RCC_ClockConfig+0x220>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a00:	f7fd faf8 	bl	8000ff4 <HAL_GetTick>
 8003a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a06:	e00a      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a08:	f7fd faf4 	bl	8000ff4 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e08f      	b.n	8003b3e <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a1e:	4b10      	ldr	r3, [pc, #64]	; (8003a60 <HAL_RCC_ClockConfig+0x220>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 020c 	and.w	r2, r3, #12
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d1eb      	bne.n	8003a08 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a30:	4b0a      	ldr	r3, [pc, #40]	; (8003a5c <HAL_RCC_ClockConfig+0x21c>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d212      	bcs.n	8003a64 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3e:	4b07      	ldr	r3, [pc, #28]	; (8003a5c <HAL_RCC_ClockConfig+0x21c>)
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a46:	4b05      	ldr	r3, [pc, #20]	; (8003a5c <HAL_RCC_ClockConfig+0x21c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d007      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e072      	b.n	8003b3e <HAL_RCC_ClockConfig+0x2fe>
 8003a58:	0800ec6c 	.word	0x0800ec6c
 8003a5c:	40023c00 	.word	0x40023c00
 8003a60:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d025      	beq.n	8003abc <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d018      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x26a>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a80:	d013      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x26a>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003a8a:	d00e      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x26a>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003a94:	d009      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x26a>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8003a9e:	d004      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x26a>
 8003aa0:	f240 21c5 	movw	r1, #709	; 0x2c5
 8003aa4:	4828      	ldr	r0, [pc, #160]	; (8003b48 <HAL_RCC_ClockConfig+0x308>)
 8003aa6:	f7fc ffb2 	bl	8000a0e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003aaa:	4b28      	ldr	r3, [pc, #160]	; (8003b4c <HAL_RCC_ClockConfig+0x30c>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	4925      	ldr	r1, [pc, #148]	; (8003b4c <HAL_RCC_ClockConfig+0x30c>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0308 	and.w	r3, r3, #8
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d026      	beq.n	8003b16 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d018      	beq.n	8003b02 <HAL_RCC_ClockConfig+0x2c2>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ad8:	d013      	beq.n	8003b02 <HAL_RCC_ClockConfig+0x2c2>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ae2:	d00e      	beq.n	8003b02 <HAL_RCC_ClockConfig+0x2c2>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003aec:	d009      	beq.n	8003b02 <HAL_RCC_ClockConfig+0x2c2>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8003af6:	d004      	beq.n	8003b02 <HAL_RCC_ClockConfig+0x2c2>
 8003af8:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8003afc:	4812      	ldr	r0, [pc, #72]	; (8003b48 <HAL_RCC_ClockConfig+0x308>)
 8003afe:	f7fc ff86 	bl	8000a0e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b02:	4b12      	ldr	r3, [pc, #72]	; (8003b4c <HAL_RCC_ClockConfig+0x30c>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	490e      	ldr	r1, [pc, #56]	; (8003b4c <HAL_RCC_ClockConfig+0x30c>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b16:	f000 f82d 	bl	8003b74 <HAL_RCC_GetSysClockFreq>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	4b0b      	ldr	r3, [pc, #44]	; (8003b4c <HAL_RCC_ClockConfig+0x30c>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	091b      	lsrs	r3, r3, #4
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	490a      	ldr	r1, [pc, #40]	; (8003b50 <HAL_RCC_ClockConfig+0x310>)
 8003b28:	5ccb      	ldrb	r3, [r1, r3]
 8003b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b2e:	4a09      	ldr	r2, [pc, #36]	; (8003b54 <HAL_RCC_ClockConfig+0x314>)
 8003b30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b32:	4b09      	ldr	r3, [pc, #36]	; (8003b58 <HAL_RCC_ClockConfig+0x318>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7fd fa18 	bl	8000f6c <HAL_InitTick>

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	0800ec6c 	.word	0x0800ec6c
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	0800fbb8 	.word	0x0800fbb8
 8003b54:	20000000 	.word	0x20000000
 8003b58:	20000004 	.word	0x20000004

08003b5c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003b60:	4b03      	ldr	r3, [pc, #12]	; (8003b70 <HAL_RCC_EnableCSS+0x14>)
 8003b62:	2201      	movs	r2, #1
 8003b64:	601a      	str	r2, [r3, #0]
}
 8003b66:	bf00      	nop
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	4247004c 	.word	0x4247004c

08003b74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b78:	b090      	sub	sp, #64	; 0x40
 8003b7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	637b      	str	r3, [r7, #52]	; 0x34
 8003b80:	2300      	movs	r3, #0
 8003b82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b84:	2300      	movs	r3, #0
 8003b86:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b8c:	4b59      	ldr	r3, [pc, #356]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f003 030c 	and.w	r3, r3, #12
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	d00d      	beq.n	8003bb4 <HAL_RCC_GetSysClockFreq+0x40>
 8003b98:	2b08      	cmp	r3, #8
 8003b9a:	f200 80a1 	bhi.w	8003ce0 <HAL_RCC_GetSysClockFreq+0x16c>
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d002      	beq.n	8003ba8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d003      	beq.n	8003bae <HAL_RCC_GetSysClockFreq+0x3a>
 8003ba6:	e09b      	b.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ba8:	4b53      	ldr	r3, [pc, #332]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003baa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003bac:	e09b      	b.n	8003ce6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bae:	4b53      	ldr	r3, [pc, #332]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x188>)
 8003bb0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bb2:	e098      	b.n	8003ce6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bb4:	4b4f      	ldr	r3, [pc, #316]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bbc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bbe:	4b4d      	ldr	r3, [pc, #308]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d028      	beq.n	8003c1c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bca:	4b4a      	ldr	r3, [pc, #296]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	099b      	lsrs	r3, r3, #6
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	623b      	str	r3, [r7, #32]
 8003bd4:	627a      	str	r2, [r7, #36]	; 0x24
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003bdc:	2100      	movs	r1, #0
 8003bde:	4b47      	ldr	r3, [pc, #284]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x188>)
 8003be0:	fb03 f201 	mul.w	r2, r3, r1
 8003be4:	2300      	movs	r3, #0
 8003be6:	fb00 f303 	mul.w	r3, r0, r3
 8003bea:	4413      	add	r3, r2
 8003bec:	4a43      	ldr	r2, [pc, #268]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x188>)
 8003bee:	fba0 1202 	umull	r1, r2, r0, r2
 8003bf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bf4:	460a      	mov	r2, r1
 8003bf6:	62ba      	str	r2, [r7, #40]	; 0x28
 8003bf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bfa:	4413      	add	r3, r2
 8003bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c00:	2200      	movs	r2, #0
 8003c02:	61bb      	str	r3, [r7, #24]
 8003c04:	61fa      	str	r2, [r7, #28]
 8003c06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c0a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c0e:	f7fc fb37 	bl	8000280 <__aeabi_uldivmod>
 8003c12:	4602      	mov	r2, r0
 8003c14:	460b      	mov	r3, r1
 8003c16:	4613      	mov	r3, r2
 8003c18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c1a:	e053      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c1c:	4b35      	ldr	r3, [pc, #212]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	099b      	lsrs	r3, r3, #6
 8003c22:	2200      	movs	r2, #0
 8003c24:	613b      	str	r3, [r7, #16]
 8003c26:	617a      	str	r2, [r7, #20]
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c2e:	f04f 0b00 	mov.w	fp, #0
 8003c32:	4652      	mov	r2, sl
 8003c34:	465b      	mov	r3, fp
 8003c36:	f04f 0000 	mov.w	r0, #0
 8003c3a:	f04f 0100 	mov.w	r1, #0
 8003c3e:	0159      	lsls	r1, r3, #5
 8003c40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c44:	0150      	lsls	r0, r2, #5
 8003c46:	4602      	mov	r2, r0
 8003c48:	460b      	mov	r3, r1
 8003c4a:	ebb2 080a 	subs.w	r8, r2, sl
 8003c4e:	eb63 090b 	sbc.w	r9, r3, fp
 8003c52:	f04f 0200 	mov.w	r2, #0
 8003c56:	f04f 0300 	mov.w	r3, #0
 8003c5a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c5e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003c62:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003c66:	ebb2 0408 	subs.w	r4, r2, r8
 8003c6a:	eb63 0509 	sbc.w	r5, r3, r9
 8003c6e:	f04f 0200 	mov.w	r2, #0
 8003c72:	f04f 0300 	mov.w	r3, #0
 8003c76:	00eb      	lsls	r3, r5, #3
 8003c78:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c7c:	00e2      	lsls	r2, r4, #3
 8003c7e:	4614      	mov	r4, r2
 8003c80:	461d      	mov	r5, r3
 8003c82:	eb14 030a 	adds.w	r3, r4, sl
 8003c86:	603b      	str	r3, [r7, #0]
 8003c88:	eb45 030b 	adc.w	r3, r5, fp
 8003c8c:	607b      	str	r3, [r7, #4]
 8003c8e:	f04f 0200 	mov.w	r2, #0
 8003c92:	f04f 0300 	mov.w	r3, #0
 8003c96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c9a:	4629      	mov	r1, r5
 8003c9c:	028b      	lsls	r3, r1, #10
 8003c9e:	4621      	mov	r1, r4
 8003ca0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ca4:	4621      	mov	r1, r4
 8003ca6:	028a      	lsls	r2, r1, #10
 8003ca8:	4610      	mov	r0, r2
 8003caa:	4619      	mov	r1, r3
 8003cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cae:	2200      	movs	r2, #0
 8003cb0:	60bb      	str	r3, [r7, #8]
 8003cb2:	60fa      	str	r2, [r7, #12]
 8003cb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cb8:	f7fc fae2 	bl	8000280 <__aeabi_uldivmod>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003cc4:	4b0b      	ldr	r3, [pc, #44]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	0c1b      	lsrs	r3, r3, #16
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	3301      	adds	r3, #1
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003cd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cdc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003cde:	e002      	b.n	8003ce6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ce0:	4b05      	ldr	r3, [pc, #20]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ce2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ce4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3740      	adds	r7, #64	; 0x40
 8003cec:	46bd      	mov	sp, r7
 8003cee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cf2:	bf00      	nop
 8003cf4:	40023800 	.word	0x40023800
 8003cf8:	00f42400 	.word	0x00f42400
 8003cfc:	00b71b00 	.word	0x00b71b00

08003d00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d04:	4b03      	ldr	r3, [pc, #12]	; (8003d14 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d06:	681b      	ldr	r3, [r3, #0]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	20000000 	.word	0x20000000

08003d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d1c:	f7ff fff0 	bl	8003d00 <HAL_RCC_GetHCLKFreq>
 8003d20:	4602      	mov	r2, r0
 8003d22:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	0a9b      	lsrs	r3, r3, #10
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	4903      	ldr	r1, [pc, #12]	; (8003d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d2e:	5ccb      	ldrb	r3, [r1, r3]
 8003d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	0800fbc8 	.word	0x0800fbc8

08003d40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d44:	f7ff ffdc 	bl	8003d00 <HAL_RCC_GetHCLKFreq>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	0b5b      	lsrs	r3, r3, #13
 8003d50:	f003 0307 	and.w	r3, r3, #7
 8003d54:	4903      	ldr	r1, [pc, #12]	; (8003d64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d56:	5ccb      	ldrb	r3, [r1, r3]
 8003d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	40023800 	.word	0x40023800
 8003d64:	0800fbc8 	.word	0x0800fbc8

08003d68 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003d6c:	4b06      	ldr	r3, [pc, #24]	; (8003d88 <HAL_RCC_NMI_IRQHandler+0x20>)
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d74:	2b80      	cmp	r3, #128	; 0x80
 8003d76:	d104      	bne.n	8003d82 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003d78:	f000 f80a 	bl	8003d90 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003d7c:	4b03      	ldr	r3, [pc, #12]	; (8003d8c <HAL_RCC_NMI_IRQHandler+0x24>)
 8003d7e:	2280      	movs	r2, #128	; 0x80
 8003d80:	701a      	strb	r2, [r3, #0]
  }
}
 8003d82:	bf00      	nop
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40023800 	.word	0x40023800
 8003d8c:	4002380e 	.word	0x4002380e

08003d90 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8003d94:	bf00      	nop
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
	...

08003da0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e184      	b.n	80040bc <HAL_SPI_Init+0x31c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a72      	ldr	r2, [pc, #456]	; (8003f80 <HAL_SPI_Init+0x1e0>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d013      	beq.n	8003de4 <HAL_SPI_Init+0x44>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a70      	ldr	r2, [pc, #448]	; (8003f84 <HAL_SPI_Init+0x1e4>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d00e      	beq.n	8003de4 <HAL_SPI_Init+0x44>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a6f      	ldr	r2, [pc, #444]	; (8003f88 <HAL_SPI_Init+0x1e8>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d009      	beq.n	8003de4 <HAL_SPI_Init+0x44>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a6d      	ldr	r2, [pc, #436]	; (8003f8c <HAL_SPI_Init+0x1ec>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d004      	beq.n	8003de4 <HAL_SPI_Init+0x44>
 8003dda:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8003dde:	486c      	ldr	r0, [pc, #432]	; (8003f90 <HAL_SPI_Init+0x1f0>)
 8003de0:	f7fc fe15 	bl	8000a0e <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d009      	beq.n	8003e00 <HAL_SPI_Init+0x60>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003df4:	d004      	beq.n	8003e00 <HAL_SPI_Init+0x60>
 8003df6:	f240 1143 	movw	r1, #323	; 0x143
 8003dfa:	4865      	ldr	r0, [pc, #404]	; (8003f90 <HAL_SPI_Init+0x1f0>)
 8003dfc:	f7fc fe07 	bl	8000a0e <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00e      	beq.n	8003e26 <HAL_SPI_Init+0x86>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e10:	d009      	beq.n	8003e26 <HAL_SPI_Init+0x86>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e1a:	d004      	beq.n	8003e26 <HAL_SPI_Init+0x86>
 8003e1c:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8003e20:	485b      	ldr	r0, [pc, #364]	; (8003f90 <HAL_SPI_Init+0x1f0>)
 8003e22:	f7fc fdf4 	bl	8000a0e <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e2e:	d008      	beq.n	8003e42 <HAL_SPI_Init+0xa2>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d004      	beq.n	8003e42 <HAL_SPI_Init+0xa2>
 8003e38:	f240 1145 	movw	r1, #325	; 0x145
 8003e3c:	4854      	ldr	r0, [pc, #336]	; (8003f90 <HAL_SPI_Init+0x1f0>)
 8003e3e:	f7fc fde6 	bl	8000a0e <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e4a:	d00d      	beq.n	8003e68 <HAL_SPI_Init+0xc8>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d009      	beq.n	8003e68 <HAL_SPI_Init+0xc8>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e5c:	d004      	beq.n	8003e68 <HAL_SPI_Init+0xc8>
 8003e5e:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8003e62:	484b      	ldr	r0, [pc, #300]	; (8003f90 <HAL_SPI_Init+0x1f0>)
 8003e64:	f7fc fdd3 	bl	8000a0e <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	69db      	ldr	r3, [r3, #28]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d020      	beq.n	8003eb2 <HAL_SPI_Init+0x112>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	69db      	ldr	r3, [r3, #28]
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d01c      	beq.n	8003eb2 <HAL_SPI_Init+0x112>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	2b10      	cmp	r3, #16
 8003e7e:	d018      	beq.n	8003eb2 <HAL_SPI_Init+0x112>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	69db      	ldr	r3, [r3, #28]
 8003e84:	2b18      	cmp	r3, #24
 8003e86:	d014      	beq.n	8003eb2 <HAL_SPI_Init+0x112>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	69db      	ldr	r3, [r3, #28]
 8003e8c:	2b20      	cmp	r3, #32
 8003e8e:	d010      	beq.n	8003eb2 <HAL_SPI_Init+0x112>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	69db      	ldr	r3, [r3, #28]
 8003e94:	2b28      	cmp	r3, #40	; 0x28
 8003e96:	d00c      	beq.n	8003eb2 <HAL_SPI_Init+0x112>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	69db      	ldr	r3, [r3, #28]
 8003e9c:	2b30      	cmp	r3, #48	; 0x30
 8003e9e:	d008      	beq.n	8003eb2 <HAL_SPI_Init+0x112>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	69db      	ldr	r3, [r3, #28]
 8003ea4:	2b38      	cmp	r3, #56	; 0x38
 8003ea6:	d004      	beq.n	8003eb2 <HAL_SPI_Init+0x112>
 8003ea8:	f240 1147 	movw	r1, #327	; 0x147
 8003eac:	4838      	ldr	r0, [pc, #224]	; (8003f90 <HAL_SPI_Init+0x1f0>)
 8003eae:	f7fc fdae 	bl	8000a0e <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d008      	beq.n	8003ecc <HAL_SPI_Init+0x12c>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	2b80      	cmp	r3, #128	; 0x80
 8003ec0:	d004      	beq.n	8003ecc <HAL_SPI_Init+0x12c>
 8003ec2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003ec6:	4832      	ldr	r0, [pc, #200]	; (8003f90 <HAL_SPI_Init+0x1f0>)
 8003ec8:	f7fc fda1 	bl	8000a0e <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d008      	beq.n	8003ee6 <HAL_SPI_Init+0x146>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed8:	2b10      	cmp	r3, #16
 8003eda:	d004      	beq.n	8003ee6 <HAL_SPI_Init+0x146>
 8003edc:	f240 1149 	movw	r1, #329	; 0x149
 8003ee0:	482b      	ldr	r0, [pc, #172]	; (8003f90 <HAL_SPI_Init+0x1f0>)
 8003ee2:	f7fc fd94 	bl	8000a0e <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d152      	bne.n	8003f94 <HAL_SPI_Init+0x1f4>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d008      	beq.n	8003f08 <HAL_SPI_Init+0x168>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d004      	beq.n	8003f08 <HAL_SPI_Init+0x168>
 8003efe:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8003f02:	4823      	ldr	r0, [pc, #140]	; (8003f90 <HAL_SPI_Init+0x1f0>)
 8003f04:	f7fc fd83 	bl	8000a0e <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d008      	beq.n	8003f22 <HAL_SPI_Init+0x182>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d004      	beq.n	8003f22 <HAL_SPI_Init+0x182>
 8003f18:	f240 114d 	movw	r1, #333	; 0x14d
 8003f1c:	481c      	ldr	r0, [pc, #112]	; (8003f90 <HAL_SPI_Init+0x1f0>)
 8003f1e:	f7fc fd76 	bl	8000a0e <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f2a:	d125      	bne.n	8003f78 <HAL_SPI_Init+0x1d8>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d05a      	beq.n	8003fea <HAL_SPI_Init+0x24a>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	69db      	ldr	r3, [r3, #28]
 8003f38:	2b08      	cmp	r3, #8
 8003f3a:	d056      	beq.n	8003fea <HAL_SPI_Init+0x24a>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	2b10      	cmp	r3, #16
 8003f42:	d052      	beq.n	8003fea <HAL_SPI_Init+0x24a>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	2b18      	cmp	r3, #24
 8003f4a:	d04e      	beq.n	8003fea <HAL_SPI_Init+0x24a>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	2b20      	cmp	r3, #32
 8003f52:	d04a      	beq.n	8003fea <HAL_SPI_Init+0x24a>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	2b28      	cmp	r3, #40	; 0x28
 8003f5a:	d046      	beq.n	8003fea <HAL_SPI_Init+0x24a>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	69db      	ldr	r3, [r3, #28]
 8003f60:	2b30      	cmp	r3, #48	; 0x30
 8003f62:	d042      	beq.n	8003fea <HAL_SPI_Init+0x24a>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	69db      	ldr	r3, [r3, #28]
 8003f68:	2b38      	cmp	r3, #56	; 0x38
 8003f6a:	d03e      	beq.n	8003fea <HAL_SPI_Init+0x24a>
 8003f6c:	f240 1151 	movw	r1, #337	; 0x151
 8003f70:	4807      	ldr	r0, [pc, #28]	; (8003f90 <HAL_SPI_Init+0x1f0>)
 8003f72:	f7fc fd4c 	bl	8000a0e <assert_failed>
 8003f76:	e038      	b.n	8003fea <HAL_SPI_Init+0x24a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	61da      	str	r2, [r3, #28]
 8003f7e:	e034      	b.n	8003fea <HAL_SPI_Init+0x24a>
 8003f80:	40013000 	.word	0x40013000
 8003f84:	40003800 	.word	0x40003800
 8003f88:	40003c00 	.word	0x40003c00
 8003f8c:	40013400 	.word	0x40013400
 8003f90:	0800eca4 	.word	0x0800eca4
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	69db      	ldr	r3, [r3, #28]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d020      	beq.n	8003fde <HAL_SPI_Init+0x23e>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	2b08      	cmp	r3, #8
 8003fa2:	d01c      	beq.n	8003fde <HAL_SPI_Init+0x23e>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	2b10      	cmp	r3, #16
 8003faa:	d018      	beq.n	8003fde <HAL_SPI_Init+0x23e>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	2b18      	cmp	r3, #24
 8003fb2:	d014      	beq.n	8003fde <HAL_SPI_Init+0x23e>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	69db      	ldr	r3, [r3, #28]
 8003fb8:	2b20      	cmp	r3, #32
 8003fba:	d010      	beq.n	8003fde <HAL_SPI_Init+0x23e>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	2b28      	cmp	r3, #40	; 0x28
 8003fc2:	d00c      	beq.n	8003fde <HAL_SPI_Init+0x23e>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	69db      	ldr	r3, [r3, #28]
 8003fc8:	2b30      	cmp	r3, #48	; 0x30
 8003fca:	d008      	beq.n	8003fde <HAL_SPI_Init+0x23e>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	69db      	ldr	r3, [r3, #28]
 8003fd0:	2b38      	cmp	r3, #56	; 0x38
 8003fd2:	d004      	beq.n	8003fde <HAL_SPI_Init+0x23e>
 8003fd4:	f240 115b 	movw	r1, #347	; 0x15b
 8003fd8:	483a      	ldr	r0, [pc, #232]	; (80040c4 <HAL_SPI_Init+0x324>)
 8003fda:	f7fc fd18 	bl	8000a0e <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d106      	bne.n	800400a <HAL_SPI_Init+0x26a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f7fc fd43 	bl	8000a90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2202      	movs	r2, #2
 800400e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004020:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800403c:	431a      	orrs	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	431a      	orrs	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	69db      	ldr	r3, [r3, #28]
 8004060:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004064:	431a      	orrs	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800406e:	ea42 0103 	orr.w	r1, r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004076:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	0c1b      	lsrs	r3, r3, #16
 8004088:	f003 0104 	and.w	r1, r3, #4
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	f003 0210 	and.w	r2, r3, #16
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	430a      	orrs	r2, r1
 800409a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	69da      	ldr	r2, [r3, #28]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040aa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3708      	adds	r7, #8
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	0800eca4 	.word	0x0800eca4

080040c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e0a0      	b.n	800421c <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d02c      	beq.n	800413c <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a4f      	ldr	r2, [pc, #316]	; (8004224 <HAL_UART_Init+0x15c>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d00e      	beq.n	800410a <HAL_UART_Init+0x42>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a4d      	ldr	r2, [pc, #308]	; (8004228 <HAL_UART_Init+0x160>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d009      	beq.n	800410a <HAL_UART_Init+0x42>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a4c      	ldr	r2, [pc, #304]	; (800422c <HAL_UART_Init+0x164>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d004      	beq.n	800410a <HAL_UART_Init+0x42>
 8004100:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8004104:	484a      	ldr	r0, [pc, #296]	; (8004230 <HAL_UART_Init+0x168>)
 8004106:	f7fc fc82 	bl	8000a0e <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d028      	beq.n	8004164 <HAL_UART_Init+0x9c>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800411a:	d023      	beq.n	8004164 <HAL_UART_Init+0x9c>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004124:	d01e      	beq.n	8004164 <HAL_UART_Init+0x9c>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800412e:	d019      	beq.n	8004164 <HAL_UART_Init+0x9c>
 8004130:	f240 1173 	movw	r1, #371	; 0x173
 8004134:	483e      	ldr	r0, [pc, #248]	; (8004230 <HAL_UART_Init+0x168>)
 8004136:	f7fc fc6a 	bl	8000a0e <assert_failed>
 800413a:	e013      	b.n	8004164 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a38      	ldr	r2, [pc, #224]	; (8004224 <HAL_UART_Init+0x15c>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d00e      	beq.n	8004164 <HAL_UART_Init+0x9c>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a37      	ldr	r2, [pc, #220]	; (8004228 <HAL_UART_Init+0x160>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d009      	beq.n	8004164 <HAL_UART_Init+0x9c>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a35      	ldr	r2, [pc, #212]	; (800422c <HAL_UART_Init+0x164>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d004      	beq.n	8004164 <HAL_UART_Init+0x9c>
 800415a:	f240 1177 	movw	r1, #375	; 0x177
 800415e:	4834      	ldr	r0, [pc, #208]	; (8004230 <HAL_UART_Init+0x168>)
 8004160:	f7fc fc55 	bl	8000a0e <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d009      	beq.n	8004180 <HAL_UART_Init+0xb8>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004174:	d004      	beq.n	8004180 <HAL_UART_Init+0xb8>
 8004176:	f240 1179 	movw	r1, #377	; 0x179
 800417a:	482d      	ldr	r0, [pc, #180]	; (8004230 <HAL_UART_Init+0x168>)
 800417c:	f7fc fc47 	bl	8000a0e <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d009      	beq.n	800419c <HAL_UART_Init+0xd4>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004190:	d004      	beq.n	800419c <HAL_UART_Init+0xd4>
 8004192:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8004196:	4826      	ldr	r0, [pc, #152]	; (8004230 <HAL_UART_Init+0x168>)
 8004198:	f7fc fc39 	bl	8000a0e <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d106      	bne.n	80041b6 <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7fc fe4b 	bl	8000e4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2224      	movs	r2, #36	; 0x24
 80041ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68da      	ldr	r2, [r3, #12]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041cc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f9d2 	bl	8004578 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	691a      	ldr	r2, [r3, #16]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041e2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	695a      	ldr	r2, [r3, #20]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041f2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68da      	ldr	r2, [r3, #12]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004202:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2220      	movs	r2, #32
 800420e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2220      	movs	r2, #32
 8004216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3708      	adds	r7, #8
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	40011000 	.word	0x40011000
 8004228:	40004400 	.word	0x40004400
 800422c:	40011400 	.word	0x40011400
 8004230:	0800ecdc 	.word	0x0800ecdc

08004234 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b08a      	sub	sp, #40	; 0x28
 8004238:	af02      	add	r7, sp, #8
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	603b      	str	r3, [r7, #0]
 8004240:	4613      	mov	r3, r2
 8004242:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004244:	2300      	movs	r3, #0
 8004246:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b20      	cmp	r3, #32
 8004252:	d17c      	bne.n	800434e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d002      	beq.n	8004260 <HAL_UART_Transmit+0x2c>
 800425a:	88fb      	ldrh	r3, [r7, #6]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e075      	b.n	8004350 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800426a:	2b01      	cmp	r3, #1
 800426c:	d101      	bne.n	8004272 <HAL_UART_Transmit+0x3e>
 800426e:	2302      	movs	r3, #2
 8004270:	e06e      	b.n	8004350 <HAL_UART_Transmit+0x11c>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2221      	movs	r2, #33	; 0x21
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004288:	f7fc feb4 	bl	8000ff4 <HAL_GetTick>
 800428c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	88fa      	ldrh	r2, [r7, #6]
 8004292:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	88fa      	ldrh	r2, [r7, #6]
 8004298:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042a2:	d108      	bne.n	80042b6 <HAL_UART_Transmit+0x82>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d104      	bne.n	80042b6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80042ac:	2300      	movs	r3, #0
 80042ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	61bb      	str	r3, [r7, #24]
 80042b4:	e003      	b.n	80042be <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042ba:	2300      	movs	r3, #0
 80042bc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80042c6:	e02a      	b.n	800431e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	2200      	movs	r2, #0
 80042d0:	2180      	movs	r1, #128	; 0x80
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f000 f8e2 	bl	800449c <UART_WaitOnFlagUntilTimeout>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e036      	b.n	8004350 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10b      	bne.n	8004300 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	881b      	ldrh	r3, [r3, #0]
 80042ec:	461a      	mov	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042f6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	3302      	adds	r3, #2
 80042fc:	61bb      	str	r3, [r7, #24]
 80042fe:	e007      	b.n	8004310 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	781a      	ldrb	r2, [r3, #0]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	3301      	adds	r3, #1
 800430e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004314:	b29b      	uxth	r3, r3
 8004316:	3b01      	subs	r3, #1
 8004318:	b29a      	uxth	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004322:	b29b      	uxth	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1cf      	bne.n	80042c8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	2200      	movs	r2, #0
 8004330:	2140      	movs	r1, #64	; 0x40
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 f8b2 	bl	800449c <UART_WaitOnFlagUntilTimeout>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e006      	b.n	8004350 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2220      	movs	r2, #32
 8004346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800434a:	2300      	movs	r3, #0
 800434c:	e000      	b.n	8004350 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800434e:	2302      	movs	r3, #2
  }
}
 8004350:	4618      	mov	r0, r3
 8004352:	3720      	adds	r7, #32
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b08a      	sub	sp, #40	; 0x28
 800435c:	af02      	add	r7, sp, #8
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	603b      	str	r3, [r7, #0]
 8004364:	4613      	mov	r3, r2
 8004366:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b20      	cmp	r3, #32
 8004376:	f040 808c 	bne.w	8004492 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d002      	beq.n	8004386 <HAL_UART_Receive+0x2e>
 8004380:	88fb      	ldrh	r3, [r7, #6]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e084      	b.n	8004494 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004390:	2b01      	cmp	r3, #1
 8004392:	d101      	bne.n	8004398 <HAL_UART_Receive+0x40>
 8004394:	2302      	movs	r3, #2
 8004396:	e07d      	b.n	8004494 <HAL_UART_Receive+0x13c>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2222      	movs	r2, #34	; 0x22
 80043aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043b4:	f7fc fe1e 	bl	8000ff4 <HAL_GetTick>
 80043b8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	88fa      	ldrh	r2, [r7, #6]
 80043be:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	88fa      	ldrh	r2, [r7, #6]
 80043c4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ce:	d108      	bne.n	80043e2 <HAL_UART_Receive+0x8a>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d104      	bne.n	80043e2 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80043d8:	2300      	movs	r3, #0
 80043da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	61bb      	str	r3, [r7, #24]
 80043e0:	e003      	b.n	80043ea <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043e6:	2300      	movs	r3, #0
 80043e8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80043f2:	e043      	b.n	800447c <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	2200      	movs	r2, #0
 80043fc:	2120      	movs	r1, #32
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f000 f84c 	bl	800449c <UART_WaitOnFlagUntilTimeout>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e042      	b.n	8004494 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d10c      	bne.n	800442e <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	b29b      	uxth	r3, r3
 800441c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004420:	b29a      	uxth	r2, r3
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	3302      	adds	r3, #2
 800442a:	61bb      	str	r3, [r7, #24]
 800442c:	e01f      	b.n	800446e <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004436:	d007      	beq.n	8004448 <HAL_UART_Receive+0xf0>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10a      	bne.n	8004456 <HAL_UART_Receive+0xfe>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d106      	bne.n	8004456 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	b2da      	uxtb	r2, r3
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	701a      	strb	r2, [r3, #0]
 8004454:	e008      	b.n	8004468 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	b2db      	uxtb	r3, r3
 800445e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004462:	b2da      	uxtb	r2, r3
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	3301      	adds	r3, #1
 800446c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004472:	b29b      	uxth	r3, r3
 8004474:	3b01      	subs	r3, #1
 8004476:	b29a      	uxth	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004480:	b29b      	uxth	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1b6      	bne.n	80043f4 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2220      	movs	r2, #32
 800448a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800448e:	2300      	movs	r3, #0
 8004490:	e000      	b.n	8004494 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004492:	2302      	movs	r3, #2
  }
}
 8004494:	4618      	mov	r0, r3
 8004496:	3720      	adds	r7, #32
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b090      	sub	sp, #64	; 0x40
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	603b      	str	r3, [r7, #0]
 80044a8:	4613      	mov	r3, r2
 80044aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044ac:	e050      	b.n	8004550 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b4:	d04c      	beq.n	8004550 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80044b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d007      	beq.n	80044cc <UART_WaitOnFlagUntilTimeout+0x30>
 80044bc:	f7fc fd9a 	bl	8000ff4 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d241      	bcs.n	8004550 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	330c      	adds	r3, #12
 80044d2:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d6:	e853 3f00 	ldrex	r3, [r3]
 80044da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	330c      	adds	r3, #12
 80044ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044ec:	637a      	str	r2, [r7, #52]	; 0x34
 80044ee:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044f4:	e841 2300 	strex	r3, r2, [r1]
 80044f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1e5      	bne.n	80044cc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	3314      	adds	r3, #20
 8004506:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	e853 3f00 	ldrex	r3, [r3]
 800450e:	613b      	str	r3, [r7, #16]
   return(result);
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	f023 0301 	bic.w	r3, r3, #1
 8004516:	63bb      	str	r3, [r7, #56]	; 0x38
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3314      	adds	r3, #20
 800451e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004520:	623a      	str	r2, [r7, #32]
 8004522:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004524:	69f9      	ldr	r1, [r7, #28]
 8004526:	6a3a      	ldr	r2, [r7, #32]
 8004528:	e841 2300 	strex	r3, r2, [r1]
 800452c:	61bb      	str	r3, [r7, #24]
   return(result);
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1e5      	bne.n	8004500 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2220      	movs	r2, #32
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2220      	movs	r2, #32
 8004540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e00f      	b.n	8004570 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	4013      	ands	r3, r2
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	429a      	cmp	r2, r3
 800455e:	bf0c      	ite	eq
 8004560:	2301      	moveq	r3, #1
 8004562:	2300      	movne	r3, #0
 8004564:	b2db      	uxtb	r3, r3
 8004566:	461a      	mov	r2, r3
 8004568:	79fb      	ldrb	r3, [r7, #7]
 800456a:	429a      	cmp	r2, r3
 800456c:	d09f      	beq.n	80044ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3740      	adds	r7, #64	; 0x40
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800457c:	b0c0      	sub	sp, #256	; 0x100
 800457e:	af00      	add	r7, sp, #0
 8004580:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8004584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	4bcf      	ldr	r3, [pc, #828]	; (80048c8 <UART_SetConfig+0x350>)
 800458c:	429a      	cmp	r2, r3
 800458e:	d904      	bls.n	800459a <UART_SetConfig+0x22>
 8004590:	f640 6156 	movw	r1, #3670	; 0xe56
 8004594:	48cd      	ldr	r0, [pc, #820]	; (80048cc <UART_SetConfig+0x354>)
 8004596:	f7fc fa3a 	bl	8000a0e <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800459a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00a      	beq.n	80045ba <UART_SetConfig+0x42>
 80045a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ae:	d004      	beq.n	80045ba <UART_SetConfig+0x42>
 80045b0:	f640 6157 	movw	r1, #3671	; 0xe57
 80045b4:	48c5      	ldr	r0, [pc, #788]	; (80048cc <UART_SetConfig+0x354>)
 80045b6:	f7fc fa2a 	bl	8000a0e <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80045ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d010      	beq.n	80045e6 <UART_SetConfig+0x6e>
 80045c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ce:	d00a      	beq.n	80045e6 <UART_SetConfig+0x6e>
 80045d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80045da:	d004      	beq.n	80045e6 <UART_SetConfig+0x6e>
 80045dc:	f640 6158 	movw	r1, #3672	; 0xe58
 80045e0:	48ba      	ldr	r0, [pc, #744]	; (80048cc <UART_SetConfig+0x354>)
 80045e2:	f7fc fa14 	bl	8000a0e <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80045e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ea:	695a      	ldr	r2, [r3, #20]
 80045ec:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80045f0:	4013      	ands	r3, r2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d104      	bne.n	8004600 <UART_SetConfig+0x88>
 80045f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d104      	bne.n	800460a <UART_SetConfig+0x92>
 8004600:	f640 6159 	movw	r1, #3673	; 0xe59
 8004604:	48b1      	ldr	r0, [pc, #708]	; (80048cc <UART_SetConfig+0x354>)
 8004606:	f7fc fa02 	bl	8000a0e <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800460a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800461a:	68d9      	ldr	r1, [r3, #12]
 800461c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	ea40 0301 	orr.w	r3, r0, r1
 8004626:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800462c:	689a      	ldr	r2, [r3, #8]
 800462e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	431a      	orrs	r2, r3
 8004636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	431a      	orrs	r2, r3
 800463e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004642:	69db      	ldr	r3, [r3, #28]
 8004644:	4313      	orrs	r3, r2
 8004646:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800464a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004656:	f021 010c 	bic.w	r1, r1, #12
 800465a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004664:	430b      	orrs	r3, r1
 8004666:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004678:	6999      	ldr	r1, [r3, #24]
 800467a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	ea40 0301 	orr.w	r3, r0, r1
 8004684:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	4b90      	ldr	r3, [pc, #576]	; (80048d0 <UART_SetConfig+0x358>)
 800468e:	429a      	cmp	r2, r3
 8004690:	d005      	beq.n	800469e <UART_SetConfig+0x126>
 8004692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	4b8e      	ldr	r3, [pc, #568]	; (80048d4 <UART_SetConfig+0x35c>)
 800469a:	429a      	cmp	r2, r3
 800469c:	d104      	bne.n	80046a8 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800469e:	f7ff fb4f 	bl	8003d40 <HAL_RCC_GetPCLK2Freq>
 80046a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80046a6:	e003      	b.n	80046b0 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046a8:	f7ff fb36 	bl	8003d18 <HAL_RCC_GetPCLK1Freq>
 80046ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046ba:	f040 810f 	bne.w	80048dc <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046c2:	2200      	movs	r2, #0
 80046c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80046c8:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80046cc:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80046d0:	4622      	mov	r2, r4
 80046d2:	462b      	mov	r3, r5
 80046d4:	1891      	adds	r1, r2, r2
 80046d6:	65b9      	str	r1, [r7, #88]	; 0x58
 80046d8:	415b      	adcs	r3, r3
 80046da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80046e0:	4621      	mov	r1, r4
 80046e2:	eb12 0801 	adds.w	r8, r2, r1
 80046e6:	4629      	mov	r1, r5
 80046e8:	eb43 0901 	adc.w	r9, r3, r1
 80046ec:	f04f 0200 	mov.w	r2, #0
 80046f0:	f04f 0300 	mov.w	r3, #0
 80046f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004700:	4690      	mov	r8, r2
 8004702:	4699      	mov	r9, r3
 8004704:	4623      	mov	r3, r4
 8004706:	eb18 0303 	adds.w	r3, r8, r3
 800470a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800470e:	462b      	mov	r3, r5
 8004710:	eb49 0303 	adc.w	r3, r9, r3
 8004714:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004724:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004728:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800472c:	460b      	mov	r3, r1
 800472e:	18db      	adds	r3, r3, r3
 8004730:	653b      	str	r3, [r7, #80]	; 0x50
 8004732:	4613      	mov	r3, r2
 8004734:	eb42 0303 	adc.w	r3, r2, r3
 8004738:	657b      	str	r3, [r7, #84]	; 0x54
 800473a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800473e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004742:	f7fb fd9d 	bl	8000280 <__aeabi_uldivmod>
 8004746:	4602      	mov	r2, r0
 8004748:	460b      	mov	r3, r1
 800474a:	4b63      	ldr	r3, [pc, #396]	; (80048d8 <UART_SetConfig+0x360>)
 800474c:	fba3 2302 	umull	r2, r3, r3, r2
 8004750:	095b      	lsrs	r3, r3, #5
 8004752:	011c      	lsls	r4, r3, #4
 8004754:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004758:	2200      	movs	r2, #0
 800475a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800475e:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004762:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004766:	4642      	mov	r2, r8
 8004768:	464b      	mov	r3, r9
 800476a:	1891      	adds	r1, r2, r2
 800476c:	64b9      	str	r1, [r7, #72]	; 0x48
 800476e:	415b      	adcs	r3, r3
 8004770:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004772:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004776:	4641      	mov	r1, r8
 8004778:	eb12 0a01 	adds.w	sl, r2, r1
 800477c:	4649      	mov	r1, r9
 800477e:	eb43 0b01 	adc.w	fp, r3, r1
 8004782:	f04f 0200 	mov.w	r2, #0
 8004786:	f04f 0300 	mov.w	r3, #0
 800478a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800478e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004792:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004796:	4692      	mov	sl, r2
 8004798:	469b      	mov	fp, r3
 800479a:	4643      	mov	r3, r8
 800479c:	eb1a 0303 	adds.w	r3, sl, r3
 80047a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047a4:	464b      	mov	r3, r9
 80047a6:	eb4b 0303 	adc.w	r3, fp, r3
 80047aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80047ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047ba:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80047be:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80047c2:	460b      	mov	r3, r1
 80047c4:	18db      	adds	r3, r3, r3
 80047c6:	643b      	str	r3, [r7, #64]	; 0x40
 80047c8:	4613      	mov	r3, r2
 80047ca:	eb42 0303 	adc.w	r3, r2, r3
 80047ce:	647b      	str	r3, [r7, #68]	; 0x44
 80047d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80047d4:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80047d8:	f7fb fd52 	bl	8000280 <__aeabi_uldivmod>
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	4611      	mov	r1, r2
 80047e2:	4b3d      	ldr	r3, [pc, #244]	; (80048d8 <UART_SetConfig+0x360>)
 80047e4:	fba3 2301 	umull	r2, r3, r3, r1
 80047e8:	095b      	lsrs	r3, r3, #5
 80047ea:	2264      	movs	r2, #100	; 0x64
 80047ec:	fb02 f303 	mul.w	r3, r2, r3
 80047f0:	1acb      	subs	r3, r1, r3
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80047f8:	4b37      	ldr	r3, [pc, #220]	; (80048d8 <UART_SetConfig+0x360>)
 80047fa:	fba3 2302 	umull	r2, r3, r3, r2
 80047fe:	095b      	lsrs	r3, r3, #5
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004806:	441c      	add	r4, r3
 8004808:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800480c:	2200      	movs	r2, #0
 800480e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004812:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004816:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800481a:	4642      	mov	r2, r8
 800481c:	464b      	mov	r3, r9
 800481e:	1891      	adds	r1, r2, r2
 8004820:	63b9      	str	r1, [r7, #56]	; 0x38
 8004822:	415b      	adcs	r3, r3
 8004824:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004826:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800482a:	4641      	mov	r1, r8
 800482c:	1851      	adds	r1, r2, r1
 800482e:	6339      	str	r1, [r7, #48]	; 0x30
 8004830:	4649      	mov	r1, r9
 8004832:	414b      	adcs	r3, r1
 8004834:	637b      	str	r3, [r7, #52]	; 0x34
 8004836:	f04f 0200 	mov.w	r2, #0
 800483a:	f04f 0300 	mov.w	r3, #0
 800483e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004842:	4659      	mov	r1, fp
 8004844:	00cb      	lsls	r3, r1, #3
 8004846:	4651      	mov	r1, sl
 8004848:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800484c:	4651      	mov	r1, sl
 800484e:	00ca      	lsls	r2, r1, #3
 8004850:	4610      	mov	r0, r2
 8004852:	4619      	mov	r1, r3
 8004854:	4603      	mov	r3, r0
 8004856:	4642      	mov	r2, r8
 8004858:	189b      	adds	r3, r3, r2
 800485a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800485e:	464b      	mov	r3, r9
 8004860:	460a      	mov	r2, r1
 8004862:	eb42 0303 	adc.w	r3, r2, r3
 8004866:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800486a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004876:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800487a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800487e:	460b      	mov	r3, r1
 8004880:	18db      	adds	r3, r3, r3
 8004882:	62bb      	str	r3, [r7, #40]	; 0x28
 8004884:	4613      	mov	r3, r2
 8004886:	eb42 0303 	adc.w	r3, r2, r3
 800488a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800488c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004890:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004894:	f7fb fcf4 	bl	8000280 <__aeabi_uldivmod>
 8004898:	4602      	mov	r2, r0
 800489a:	460b      	mov	r3, r1
 800489c:	4b0e      	ldr	r3, [pc, #56]	; (80048d8 <UART_SetConfig+0x360>)
 800489e:	fba3 1302 	umull	r1, r3, r3, r2
 80048a2:	095b      	lsrs	r3, r3, #5
 80048a4:	2164      	movs	r1, #100	; 0x64
 80048a6:	fb01 f303 	mul.w	r3, r1, r3
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	00db      	lsls	r3, r3, #3
 80048ae:	3332      	adds	r3, #50	; 0x32
 80048b0:	4a09      	ldr	r2, [pc, #36]	; (80048d8 <UART_SetConfig+0x360>)
 80048b2:	fba2 2303 	umull	r2, r3, r2, r3
 80048b6:	095b      	lsrs	r3, r3, #5
 80048b8:	f003 0207 	and.w	r2, r3, #7
 80048bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4422      	add	r2, r4
 80048c4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80048c6:	e108      	b.n	8004ada <UART_SetConfig+0x562>
 80048c8:	00a037a0 	.word	0x00a037a0
 80048cc:	0800ecdc 	.word	0x0800ecdc
 80048d0:	40011000 	.word	0x40011000
 80048d4:	40011400 	.word	0x40011400
 80048d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048e0:	2200      	movs	r2, #0
 80048e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80048e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80048ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80048ee:	4642      	mov	r2, r8
 80048f0:	464b      	mov	r3, r9
 80048f2:	1891      	adds	r1, r2, r2
 80048f4:	6239      	str	r1, [r7, #32]
 80048f6:	415b      	adcs	r3, r3
 80048f8:	627b      	str	r3, [r7, #36]	; 0x24
 80048fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048fe:	4641      	mov	r1, r8
 8004900:	1854      	adds	r4, r2, r1
 8004902:	4649      	mov	r1, r9
 8004904:	eb43 0501 	adc.w	r5, r3, r1
 8004908:	f04f 0200 	mov.w	r2, #0
 800490c:	f04f 0300 	mov.w	r3, #0
 8004910:	00eb      	lsls	r3, r5, #3
 8004912:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004916:	00e2      	lsls	r2, r4, #3
 8004918:	4614      	mov	r4, r2
 800491a:	461d      	mov	r5, r3
 800491c:	4643      	mov	r3, r8
 800491e:	18e3      	adds	r3, r4, r3
 8004920:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004924:	464b      	mov	r3, r9
 8004926:	eb45 0303 	adc.w	r3, r5, r3
 800492a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800492e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800493a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800493e:	f04f 0200 	mov.w	r2, #0
 8004942:	f04f 0300 	mov.w	r3, #0
 8004946:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800494a:	4629      	mov	r1, r5
 800494c:	008b      	lsls	r3, r1, #2
 800494e:	4621      	mov	r1, r4
 8004950:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004954:	4621      	mov	r1, r4
 8004956:	008a      	lsls	r2, r1, #2
 8004958:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800495c:	f7fb fc90 	bl	8000280 <__aeabi_uldivmod>
 8004960:	4602      	mov	r2, r0
 8004962:	460b      	mov	r3, r1
 8004964:	4b60      	ldr	r3, [pc, #384]	; (8004ae8 <UART_SetConfig+0x570>)
 8004966:	fba3 2302 	umull	r2, r3, r3, r2
 800496a:	095b      	lsrs	r3, r3, #5
 800496c:	011c      	lsls	r4, r3, #4
 800496e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004972:	2200      	movs	r2, #0
 8004974:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004978:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800497c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004980:	4642      	mov	r2, r8
 8004982:	464b      	mov	r3, r9
 8004984:	1891      	adds	r1, r2, r2
 8004986:	61b9      	str	r1, [r7, #24]
 8004988:	415b      	adcs	r3, r3
 800498a:	61fb      	str	r3, [r7, #28]
 800498c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004990:	4641      	mov	r1, r8
 8004992:	1851      	adds	r1, r2, r1
 8004994:	6139      	str	r1, [r7, #16]
 8004996:	4649      	mov	r1, r9
 8004998:	414b      	adcs	r3, r1
 800499a:	617b      	str	r3, [r7, #20]
 800499c:	f04f 0200 	mov.w	r2, #0
 80049a0:	f04f 0300 	mov.w	r3, #0
 80049a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049a8:	4659      	mov	r1, fp
 80049aa:	00cb      	lsls	r3, r1, #3
 80049ac:	4651      	mov	r1, sl
 80049ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049b2:	4651      	mov	r1, sl
 80049b4:	00ca      	lsls	r2, r1, #3
 80049b6:	4610      	mov	r0, r2
 80049b8:	4619      	mov	r1, r3
 80049ba:	4603      	mov	r3, r0
 80049bc:	4642      	mov	r2, r8
 80049be:	189b      	adds	r3, r3, r2
 80049c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80049c4:	464b      	mov	r3, r9
 80049c6:	460a      	mov	r2, r1
 80049c8:	eb42 0303 	adc.w	r3, r2, r3
 80049cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80049d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80049da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80049dc:	f04f 0200 	mov.w	r2, #0
 80049e0:	f04f 0300 	mov.w	r3, #0
 80049e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80049e8:	4649      	mov	r1, r9
 80049ea:	008b      	lsls	r3, r1, #2
 80049ec:	4641      	mov	r1, r8
 80049ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049f2:	4641      	mov	r1, r8
 80049f4:	008a      	lsls	r2, r1, #2
 80049f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80049fa:	f7fb fc41 	bl	8000280 <__aeabi_uldivmod>
 80049fe:	4602      	mov	r2, r0
 8004a00:	460b      	mov	r3, r1
 8004a02:	4b39      	ldr	r3, [pc, #228]	; (8004ae8 <UART_SetConfig+0x570>)
 8004a04:	fba3 1302 	umull	r1, r3, r3, r2
 8004a08:	095b      	lsrs	r3, r3, #5
 8004a0a:	2164      	movs	r1, #100	; 0x64
 8004a0c:	fb01 f303 	mul.w	r3, r1, r3
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	011b      	lsls	r3, r3, #4
 8004a14:	3332      	adds	r3, #50	; 0x32
 8004a16:	4a34      	ldr	r2, [pc, #208]	; (8004ae8 <UART_SetConfig+0x570>)
 8004a18:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1c:	095b      	lsrs	r3, r3, #5
 8004a1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a22:	441c      	add	r4, r3
 8004a24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a28:	2200      	movs	r2, #0
 8004a2a:	673b      	str	r3, [r7, #112]	; 0x70
 8004a2c:	677a      	str	r2, [r7, #116]	; 0x74
 8004a2e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004a32:	4642      	mov	r2, r8
 8004a34:	464b      	mov	r3, r9
 8004a36:	1891      	adds	r1, r2, r2
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	415b      	adcs	r3, r3
 8004a3c:	60fb      	str	r3, [r7, #12]
 8004a3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a42:	4641      	mov	r1, r8
 8004a44:	1851      	adds	r1, r2, r1
 8004a46:	6039      	str	r1, [r7, #0]
 8004a48:	4649      	mov	r1, r9
 8004a4a:	414b      	adcs	r3, r1
 8004a4c:	607b      	str	r3, [r7, #4]
 8004a4e:	f04f 0200 	mov.w	r2, #0
 8004a52:	f04f 0300 	mov.w	r3, #0
 8004a56:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a5a:	4659      	mov	r1, fp
 8004a5c:	00cb      	lsls	r3, r1, #3
 8004a5e:	4651      	mov	r1, sl
 8004a60:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a64:	4651      	mov	r1, sl
 8004a66:	00ca      	lsls	r2, r1, #3
 8004a68:	4610      	mov	r0, r2
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	4642      	mov	r2, r8
 8004a70:	189b      	adds	r3, r3, r2
 8004a72:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a74:	464b      	mov	r3, r9
 8004a76:	460a      	mov	r2, r1
 8004a78:	eb42 0303 	adc.w	r3, r2, r3
 8004a7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	663b      	str	r3, [r7, #96]	; 0x60
 8004a88:	667a      	str	r2, [r7, #100]	; 0x64
 8004a8a:	f04f 0200 	mov.w	r2, #0
 8004a8e:	f04f 0300 	mov.w	r3, #0
 8004a92:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004a96:	4649      	mov	r1, r9
 8004a98:	008b      	lsls	r3, r1, #2
 8004a9a:	4641      	mov	r1, r8
 8004a9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004aa0:	4641      	mov	r1, r8
 8004aa2:	008a      	lsls	r2, r1, #2
 8004aa4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004aa8:	f7fb fbea 	bl	8000280 <__aeabi_uldivmod>
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	4b0d      	ldr	r3, [pc, #52]	; (8004ae8 <UART_SetConfig+0x570>)
 8004ab2:	fba3 1302 	umull	r1, r3, r3, r2
 8004ab6:	095b      	lsrs	r3, r3, #5
 8004ab8:	2164      	movs	r1, #100	; 0x64
 8004aba:	fb01 f303 	mul.w	r3, r1, r3
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	011b      	lsls	r3, r3, #4
 8004ac2:	3332      	adds	r3, #50	; 0x32
 8004ac4:	4a08      	ldr	r2, [pc, #32]	; (8004ae8 <UART_SetConfig+0x570>)
 8004ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aca:	095b      	lsrs	r3, r3, #5
 8004acc:	f003 020f 	and.w	r2, r3, #15
 8004ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4422      	add	r2, r4
 8004ad8:	609a      	str	r2, [r3, #8]
}
 8004ada:	bf00      	nop
 8004adc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ae6:	bf00      	nop
 8004ae8:	51eb851f 	.word	0x51eb851f

08004aec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004aec:	b084      	sub	sp, #16
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b084      	sub	sp, #16
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
 8004af6:	f107 001c 	add.w	r0, r7, #28
 8004afa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d122      	bne.n	8004b4a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004b18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d105      	bne.n	8004b3e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f001 fb1c 	bl	800617c <USB_CoreReset>
 8004b44:	4603      	mov	r3, r0
 8004b46:	73fb      	strb	r3, [r7, #15]
 8004b48:	e01a      	b.n	8004b80 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f001 fb10 	bl	800617c <USB_CoreReset>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d106      	bne.n	8004b74 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	639a      	str	r2, [r3, #56]	; 0x38
 8004b72:	e005      	b.n	8004b80 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d10b      	bne.n	8004b9e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f043 0206 	orr.w	r2, r3, #6
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f043 0220 	orr.w	r2, r3, #32
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004baa:	b004      	add	sp, #16
 8004bac:	4770      	bx	lr
	...

08004bb0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b087      	sub	sp, #28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004bbe:	79fb      	ldrb	r3, [r7, #7]
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d165      	bne.n	8004c90 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	4a41      	ldr	r2, [pc, #260]	; (8004ccc <USB_SetTurnaroundTime+0x11c>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d906      	bls.n	8004bda <USB_SetTurnaroundTime+0x2a>
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	4a40      	ldr	r2, [pc, #256]	; (8004cd0 <USB_SetTurnaroundTime+0x120>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d202      	bcs.n	8004bda <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004bd4:	230f      	movs	r3, #15
 8004bd6:	617b      	str	r3, [r7, #20]
 8004bd8:	e062      	b.n	8004ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	4a3c      	ldr	r2, [pc, #240]	; (8004cd0 <USB_SetTurnaroundTime+0x120>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d306      	bcc.n	8004bf0 <USB_SetTurnaroundTime+0x40>
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	4a3b      	ldr	r2, [pc, #236]	; (8004cd4 <USB_SetTurnaroundTime+0x124>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d202      	bcs.n	8004bf0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004bea:	230e      	movs	r3, #14
 8004bec:	617b      	str	r3, [r7, #20]
 8004bee:	e057      	b.n	8004ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	4a38      	ldr	r2, [pc, #224]	; (8004cd4 <USB_SetTurnaroundTime+0x124>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d306      	bcc.n	8004c06 <USB_SetTurnaroundTime+0x56>
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	4a37      	ldr	r2, [pc, #220]	; (8004cd8 <USB_SetTurnaroundTime+0x128>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d202      	bcs.n	8004c06 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004c00:	230d      	movs	r3, #13
 8004c02:	617b      	str	r3, [r7, #20]
 8004c04:	e04c      	b.n	8004ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	4a33      	ldr	r2, [pc, #204]	; (8004cd8 <USB_SetTurnaroundTime+0x128>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d306      	bcc.n	8004c1c <USB_SetTurnaroundTime+0x6c>
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	4a32      	ldr	r2, [pc, #200]	; (8004cdc <USB_SetTurnaroundTime+0x12c>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d802      	bhi.n	8004c1c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004c16:	230c      	movs	r3, #12
 8004c18:	617b      	str	r3, [r7, #20]
 8004c1a:	e041      	b.n	8004ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	4a2f      	ldr	r2, [pc, #188]	; (8004cdc <USB_SetTurnaroundTime+0x12c>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d906      	bls.n	8004c32 <USB_SetTurnaroundTime+0x82>
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	4a2e      	ldr	r2, [pc, #184]	; (8004ce0 <USB_SetTurnaroundTime+0x130>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d802      	bhi.n	8004c32 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004c2c:	230b      	movs	r3, #11
 8004c2e:	617b      	str	r3, [r7, #20]
 8004c30:	e036      	b.n	8004ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	4a2a      	ldr	r2, [pc, #168]	; (8004ce0 <USB_SetTurnaroundTime+0x130>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d906      	bls.n	8004c48 <USB_SetTurnaroundTime+0x98>
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	4a29      	ldr	r2, [pc, #164]	; (8004ce4 <USB_SetTurnaroundTime+0x134>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d802      	bhi.n	8004c48 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004c42:	230a      	movs	r3, #10
 8004c44:	617b      	str	r3, [r7, #20]
 8004c46:	e02b      	b.n	8004ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	4a26      	ldr	r2, [pc, #152]	; (8004ce4 <USB_SetTurnaroundTime+0x134>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d906      	bls.n	8004c5e <USB_SetTurnaroundTime+0xae>
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	4a25      	ldr	r2, [pc, #148]	; (8004ce8 <USB_SetTurnaroundTime+0x138>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d202      	bcs.n	8004c5e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004c58:	2309      	movs	r3, #9
 8004c5a:	617b      	str	r3, [r7, #20]
 8004c5c:	e020      	b.n	8004ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	4a21      	ldr	r2, [pc, #132]	; (8004ce8 <USB_SetTurnaroundTime+0x138>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d306      	bcc.n	8004c74 <USB_SetTurnaroundTime+0xc4>
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	4a20      	ldr	r2, [pc, #128]	; (8004cec <USB_SetTurnaroundTime+0x13c>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d802      	bhi.n	8004c74 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004c6e:	2308      	movs	r3, #8
 8004c70:	617b      	str	r3, [r7, #20]
 8004c72:	e015      	b.n	8004ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	4a1d      	ldr	r2, [pc, #116]	; (8004cec <USB_SetTurnaroundTime+0x13c>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d906      	bls.n	8004c8a <USB_SetTurnaroundTime+0xda>
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	4a1c      	ldr	r2, [pc, #112]	; (8004cf0 <USB_SetTurnaroundTime+0x140>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d202      	bcs.n	8004c8a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004c84:	2307      	movs	r3, #7
 8004c86:	617b      	str	r3, [r7, #20]
 8004c88:	e00a      	b.n	8004ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004c8a:	2306      	movs	r3, #6
 8004c8c:	617b      	str	r3, [r7, #20]
 8004c8e:	e007      	b.n	8004ca0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004c90:	79fb      	ldrb	r3, [r7, #7]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d102      	bne.n	8004c9c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004c96:	2309      	movs	r3, #9
 8004c98:	617b      	str	r3, [r7, #20]
 8004c9a:	e001      	b.n	8004ca0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004c9c:	2309      	movs	r3, #9
 8004c9e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	68da      	ldr	r2, [r3, #12]
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	029b      	lsls	r3, r3, #10
 8004cb4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	371c      	adds	r7, #28
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	00d8acbf 	.word	0x00d8acbf
 8004cd0:	00e4e1c0 	.word	0x00e4e1c0
 8004cd4:	00f42400 	.word	0x00f42400
 8004cd8:	01067380 	.word	0x01067380
 8004cdc:	011a499f 	.word	0x011a499f
 8004ce0:	01312cff 	.word	0x01312cff
 8004ce4:	014ca43f 	.word	0x014ca43f
 8004ce8:	016e3600 	.word	0x016e3600
 8004cec:	01a6ab1f 	.word	0x01a6ab1f
 8004cf0:	01e84800 	.word	0x01e84800

08004cf4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f043 0201 	orr.w	r2, r3, #1
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b083      	sub	sp, #12
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f023 0201 	bic.w	r2, r3, #1
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	460b      	mov	r3, r1
 8004d42:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d54:	78fb      	ldrb	r3, [r7, #3]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d115      	bne.n	8004d86 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d66:	2001      	movs	r0, #1
 8004d68:	f7fc f950 	bl	800100c <HAL_Delay>
      ms++;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	3301      	adds	r3, #1
 8004d70:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f001 f972 	bl	800605c <USB_GetMode>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d01e      	beq.n	8004dbc <USB_SetCurrentMode+0x84>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2b31      	cmp	r3, #49	; 0x31
 8004d82:	d9f0      	bls.n	8004d66 <USB_SetCurrentMode+0x2e>
 8004d84:	e01a      	b.n	8004dbc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d86:	78fb      	ldrb	r3, [r7, #3]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d115      	bne.n	8004db8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d98:	2001      	movs	r0, #1
 8004d9a:	f7fc f937 	bl	800100c <HAL_Delay>
      ms++;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	3301      	adds	r3, #1
 8004da2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f001 f959 	bl	800605c <USB_GetMode>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d005      	beq.n	8004dbc <USB_SetCurrentMode+0x84>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2b31      	cmp	r3, #49	; 0x31
 8004db4:	d9f0      	bls.n	8004d98 <USB_SetCurrentMode+0x60>
 8004db6:	e001      	b.n	8004dbc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e005      	b.n	8004dc8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2b32      	cmp	r3, #50	; 0x32
 8004dc0:	d101      	bne.n	8004dc6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e000      	b.n	8004dc8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004dd0:	b084      	sub	sp, #16
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b086      	sub	sp, #24
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
 8004dda:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004dde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004de2:	2300      	movs	r3, #0
 8004de4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004dea:	2300      	movs	r3, #0
 8004dec:	613b      	str	r3, [r7, #16]
 8004dee:	e009      	b.n	8004e04 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	3340      	adds	r3, #64	; 0x40
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4413      	add	r3, r2
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	3301      	adds	r3, #1
 8004e02:	613b      	str	r3, [r7, #16]
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	2b0e      	cmp	r3, #14
 8004e08:	d9f2      	bls.n	8004df0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004e0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d11c      	bne.n	8004e4a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e1e:	f043 0302 	orr.w	r3, r3, #2
 8004e22:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e28:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e34:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e40:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	639a      	str	r2, [r3, #56]	; 0x38
 8004e48:	e00b      	b.n	8004e62 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e68:	461a      	mov	r2, r3
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e74:	4619      	mov	r1, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	680b      	ldr	r3, [r1, #0]
 8004e80:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d10c      	bne.n	8004ea2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d104      	bne.n	8004e98 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004e8e:	2100      	movs	r1, #0
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 f945 	bl	8005120 <USB_SetDevSpeed>
 8004e96:	e008      	b.n	8004eaa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004e98:	2101      	movs	r1, #1
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f940 	bl	8005120 <USB_SetDevSpeed>
 8004ea0:	e003      	b.n	8004eaa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004ea2:	2103      	movs	r1, #3
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 f93b 	bl	8005120 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004eaa:	2110      	movs	r1, #16
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f8f3 	bl	8005098 <USB_FlushTxFifo>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d001      	beq.n	8004ebc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 f90f 	bl	80050e0 <USB_FlushRxFifo>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d001      	beq.n	8004ecc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ede:	461a      	mov	r2, r3
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eea:	461a      	mov	r2, r3
 8004eec:	2300      	movs	r3, #0
 8004eee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	613b      	str	r3, [r7, #16]
 8004ef4:	e043      	b.n	8004f7e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	015a      	lsls	r2, r3, #5
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	4413      	add	r3, r2
 8004efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f0c:	d118      	bne.n	8004f40 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10a      	bne.n	8004f2a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	015a      	lsls	r2, r3, #5
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f20:	461a      	mov	r2, r3
 8004f22:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f26:	6013      	str	r3, [r2, #0]
 8004f28:	e013      	b.n	8004f52 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f36:	461a      	mov	r2, r3
 8004f38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f3c:	6013      	str	r3, [r2, #0]
 8004f3e:	e008      	b.n	8004f52 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	015a      	lsls	r2, r3, #5
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	2300      	movs	r3, #0
 8004f50:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	015a      	lsls	r2, r3, #5
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f5e:	461a      	mov	r2, r3
 8004f60:	2300      	movs	r3, #0
 8004f62:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	015a      	lsls	r2, r3, #5
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f70:	461a      	mov	r2, r3
 8004f72:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f76:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	613b      	str	r3, [r7, #16]
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d3b7      	bcc.n	8004ef6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f86:	2300      	movs	r3, #0
 8004f88:	613b      	str	r3, [r7, #16]
 8004f8a:	e043      	b.n	8005014 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fa2:	d118      	bne.n	8004fd6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10a      	bne.n	8004fc0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	015a      	lsls	r2, r3, #5
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004fbc:	6013      	str	r3, [r2, #0]
 8004fbe:	e013      	b.n	8004fe8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	015a      	lsls	r2, r3, #5
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fcc:	461a      	mov	r2, r3
 8004fce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004fd2:	6013      	str	r3, [r2, #0]
 8004fd4:	e008      	b.n	8004fe8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	015a      	lsls	r2, r3, #5
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	4413      	add	r3, r2
 8004fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	015a      	lsls	r2, r3, #5
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	4413      	add	r3, r2
 8005002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005006:	461a      	mov	r2, r3
 8005008:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800500c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	3301      	adds	r3, #1
 8005012:	613b      	str	r3, [r7, #16]
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	429a      	cmp	r2, r3
 800501a:	d3b7      	bcc.n	8004f8c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800502a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800502e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800503c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800503e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005040:	2b00      	cmp	r3, #0
 8005042:	d105      	bne.n	8005050 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	f043 0210 	orr.w	r2, r3, #16
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	699a      	ldr	r2, [r3, #24]
 8005054:	4b0f      	ldr	r3, [pc, #60]	; (8005094 <USB_DevInit+0x2c4>)
 8005056:	4313      	orrs	r3, r2
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800505c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800505e:	2b00      	cmp	r3, #0
 8005060:	d005      	beq.n	800506e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	f043 0208 	orr.w	r2, r3, #8
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800506e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005070:	2b01      	cmp	r3, #1
 8005072:	d107      	bne.n	8005084 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800507c:	f043 0304 	orr.w	r3, r3, #4
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005084:	7dfb      	ldrb	r3, [r7, #23]
}
 8005086:	4618      	mov	r0, r3
 8005088:	3718      	adds	r7, #24
 800508a:	46bd      	mov	sp, r7
 800508c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005090:	b004      	add	sp, #16
 8005092:	4770      	bx	lr
 8005094:	803c3800 	.word	0x803c3800

08005098 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80050a2:	2300      	movs	r3, #0
 80050a4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	019b      	lsls	r3, r3, #6
 80050aa:	f043 0220 	orr.w	r2, r3, #32
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	3301      	adds	r3, #1
 80050b6:	60fb      	str	r3, [r7, #12]
 80050b8:	4a08      	ldr	r2, [pc, #32]	; (80050dc <USB_FlushTxFifo+0x44>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d901      	bls.n	80050c2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e006      	b.n	80050d0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	f003 0320 	and.w	r3, r3, #32
 80050ca:	2b20      	cmp	r3, #32
 80050cc:	d0f1      	beq.n	80050b2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3714      	adds	r7, #20
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	00030d40 	.word	0x00030d40

080050e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050e8:	2300      	movs	r3, #0
 80050ea:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2210      	movs	r2, #16
 80050f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	3301      	adds	r3, #1
 80050f6:	60fb      	str	r3, [r7, #12]
 80050f8:	4a08      	ldr	r2, [pc, #32]	; (800511c <USB_FlushRxFifo+0x3c>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d901      	bls.n	8005102 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e006      	b.n	8005110 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	f003 0310 	and.w	r3, r3, #16
 800510a:	2b10      	cmp	r3, #16
 800510c:	d0f1      	beq.n	80050f2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3714      	adds	r7, #20
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	00030d40 	.word	0x00030d40

08005120 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	460b      	mov	r3, r1
 800512a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	78fb      	ldrb	r3, [r7, #3]
 800513a:	68f9      	ldr	r1, [r7, #12]
 800513c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005140:	4313      	orrs	r3, r2
 8005142:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005152:	b480      	push	{r7}
 8005154:	b087      	sub	sp, #28
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f003 0306 	and.w	r3, r3, #6
 800516a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d102      	bne.n	8005178 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005172:	2300      	movs	r3, #0
 8005174:	75fb      	strb	r3, [r7, #23]
 8005176:	e00a      	b.n	800518e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2b02      	cmp	r3, #2
 800517c:	d002      	beq.n	8005184 <USB_GetDevSpeed+0x32>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2b06      	cmp	r3, #6
 8005182:	d102      	bne.n	800518a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005184:	2302      	movs	r3, #2
 8005186:	75fb      	strb	r3, [r7, #23]
 8005188:	e001      	b.n	800518e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800518a:	230f      	movs	r3, #15
 800518c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800518e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005190:	4618      	mov	r0, r3
 8005192:	371c      	adds	r7, #28
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	785b      	ldrb	r3, [r3, #1]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d13a      	bne.n	800522e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051be:	69da      	ldr	r2, [r3, #28]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	f003 030f 	and.w	r3, r3, #15
 80051c8:	2101      	movs	r1, #1
 80051ca:	fa01 f303 	lsl.w	r3, r1, r3
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	68f9      	ldr	r1, [r7, #12]
 80051d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051d6:	4313      	orrs	r3, r2
 80051d8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	015a      	lsls	r2, r3, #5
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	4413      	add	r3, r2
 80051e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d155      	bne.n	800529c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	015a      	lsls	r2, r3, #5
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	78db      	ldrb	r3, [r3, #3]
 800520a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800520c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	059b      	lsls	r3, r3, #22
 8005212:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005214:	4313      	orrs	r3, r2
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	0151      	lsls	r1, r2, #5
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	440a      	add	r2, r1
 800521e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800522a:	6013      	str	r3, [r2, #0]
 800522c:	e036      	b.n	800529c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005234:	69da      	ldr	r2, [r3, #28]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	f003 030f 	and.w	r3, r3, #15
 800523e:	2101      	movs	r1, #1
 8005240:	fa01 f303 	lsl.w	r3, r1, r3
 8005244:	041b      	lsls	r3, r3, #16
 8005246:	68f9      	ldr	r1, [r7, #12]
 8005248:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800524c:	4313      	orrs	r3, r2
 800524e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	015a      	lsls	r2, r3, #5
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	4413      	add	r3, r2
 8005258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d11a      	bne.n	800529c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	015a      	lsls	r2, r3, #5
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	4413      	add	r3, r2
 800526e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	78db      	ldrb	r3, [r3, #3]
 8005280:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005282:	430b      	orrs	r3, r1
 8005284:	4313      	orrs	r3, r2
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	0151      	lsls	r1, r2, #5
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	440a      	add	r2, r1
 800528e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800529a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
	...

080052ac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	785b      	ldrb	r3, [r3, #1]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d161      	bne.n	800538c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052de:	d11f      	bne.n	8005320 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	0151      	lsls	r1, r2, #5
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	440a      	add	r2, r1
 80052f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052fe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4413      	add	r3, r2
 8005308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	0151      	lsls	r1, r2, #5
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	440a      	add	r2, r1
 8005316:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800531a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800531e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005326:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	f003 030f 	and.w	r3, r3, #15
 8005330:	2101      	movs	r1, #1
 8005332:	fa01 f303 	lsl.w	r3, r1, r3
 8005336:	b29b      	uxth	r3, r3
 8005338:	43db      	mvns	r3, r3
 800533a:	68f9      	ldr	r1, [r7, #12]
 800533c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005340:	4013      	ands	r3, r2
 8005342:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800534a:	69da      	ldr	r2, [r3, #28]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	f003 030f 	and.w	r3, r3, #15
 8005354:	2101      	movs	r1, #1
 8005356:	fa01 f303 	lsl.w	r3, r1, r3
 800535a:	b29b      	uxth	r3, r3
 800535c:	43db      	mvns	r3, r3
 800535e:	68f9      	ldr	r1, [r7, #12]
 8005360:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005364:	4013      	ands	r3, r2
 8005366:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	015a      	lsls	r2, r3, #5
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	4413      	add	r3, r2
 8005370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	0159      	lsls	r1, r3, #5
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	440b      	add	r3, r1
 800537e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005382:	4619      	mov	r1, r3
 8005384:	4b35      	ldr	r3, [pc, #212]	; (800545c <USB_DeactivateEndpoint+0x1b0>)
 8005386:	4013      	ands	r3, r2
 8005388:	600b      	str	r3, [r1, #0]
 800538a:	e060      	b.n	800544e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	4413      	add	r3, r2
 8005394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800539e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053a2:	d11f      	bne.n	80053e4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	015a      	lsls	r2, r3, #5
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	4413      	add	r3, r2
 80053ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	0151      	lsls	r1, r2, #5
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	440a      	add	r2, r1
 80053ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80053c2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68ba      	ldr	r2, [r7, #8]
 80053d4:	0151      	lsls	r1, r2, #5
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	440a      	add	r2, r1
 80053da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	f003 030f 	and.w	r3, r3, #15
 80053f4:	2101      	movs	r1, #1
 80053f6:	fa01 f303 	lsl.w	r3, r1, r3
 80053fa:	041b      	lsls	r3, r3, #16
 80053fc:	43db      	mvns	r3, r3
 80053fe:	68f9      	ldr	r1, [r7, #12]
 8005400:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005404:	4013      	ands	r3, r2
 8005406:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540e:	69da      	ldr	r2, [r3, #28]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	f003 030f 	and.w	r3, r3, #15
 8005418:	2101      	movs	r1, #1
 800541a:	fa01 f303 	lsl.w	r3, r1, r3
 800541e:	041b      	lsls	r3, r3, #16
 8005420:	43db      	mvns	r3, r3
 8005422:	68f9      	ldr	r1, [r7, #12]
 8005424:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005428:	4013      	ands	r3, r2
 800542a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4413      	add	r3, r2
 8005434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	0159      	lsls	r1, r3, #5
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	440b      	add	r3, r1
 8005442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005446:	4619      	mov	r1, r3
 8005448:	4b05      	ldr	r3, [pc, #20]	; (8005460 <USB_DeactivateEndpoint+0x1b4>)
 800544a:	4013      	ands	r3, r2
 800544c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	ec337800 	.word	0xec337800
 8005460:	eff37800 	.word	0xeff37800

08005464 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b08a      	sub	sp, #40	; 0x28
 8005468:	af02      	add	r7, sp, #8
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	4613      	mov	r3, r2
 8005470:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	785b      	ldrb	r3, [r3, #1]
 8005480:	2b01      	cmp	r3, #1
 8005482:	f040 815c 	bne.w	800573e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d132      	bne.n	80054f4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	015a      	lsls	r2, r3, #5
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	4413      	add	r3, r2
 8005496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	69ba      	ldr	r2, [r7, #24]
 800549e:	0151      	lsls	r1, r2, #5
 80054a0:	69fa      	ldr	r2, [r7, #28]
 80054a2:	440a      	add	r2, r1
 80054a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	015a      	lsls	r2, r3, #5
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	0151      	lsls	r1, r2, #5
 80054c4:	69fa      	ldr	r2, [r7, #28]
 80054c6:	440a      	add	r2, r1
 80054c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	015a      	lsls	r2, r3, #5
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	4413      	add	r3, r2
 80054da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	0151      	lsls	r1, r2, #5
 80054e4:	69fa      	ldr	r2, [r7, #28]
 80054e6:	440a      	add	r2, r1
 80054e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ec:	0cdb      	lsrs	r3, r3, #19
 80054ee:	04db      	lsls	r3, r3, #19
 80054f0:	6113      	str	r3, [r2, #16]
 80054f2:	e074      	b.n	80055de <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	0151      	lsls	r1, r2, #5
 8005506:	69fa      	ldr	r2, [r7, #28]
 8005508:	440a      	add	r2, r1
 800550a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800550e:	0cdb      	lsrs	r3, r3, #19
 8005510:	04db      	lsls	r3, r3, #19
 8005512:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	4413      	add	r3, r2
 800551c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	69ba      	ldr	r2, [r7, #24]
 8005524:	0151      	lsls	r1, r2, #5
 8005526:	69fa      	ldr	r2, [r7, #28]
 8005528:	440a      	add	r2, r1
 800552a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800552e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005532:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005536:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	015a      	lsls	r2, r3, #5
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	4413      	add	r3, r2
 8005540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005544:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	6959      	ldr	r1, [r3, #20]
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	440b      	add	r3, r1
 8005550:	1e59      	subs	r1, r3, #1
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	fbb1 f3f3 	udiv	r3, r1, r3
 800555a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800555c:	4b9d      	ldr	r3, [pc, #628]	; (80057d4 <USB_EPStartXfer+0x370>)
 800555e:	400b      	ands	r3, r1
 8005560:	69b9      	ldr	r1, [r7, #24]
 8005562:	0148      	lsls	r0, r1, #5
 8005564:	69f9      	ldr	r1, [r7, #28]
 8005566:	4401      	add	r1, r0
 8005568:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800556c:	4313      	orrs	r3, r2
 800556e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	015a      	lsls	r2, r3, #5
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	4413      	add	r3, r2
 8005578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557c:	691a      	ldr	r2, [r3, #16]
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005586:	69b9      	ldr	r1, [r7, #24]
 8005588:	0148      	lsls	r0, r1, #5
 800558a:	69f9      	ldr	r1, [r7, #28]
 800558c:	4401      	add	r1, r0
 800558e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005592:	4313      	orrs	r3, r2
 8005594:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	78db      	ldrb	r3, [r3, #3]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d11f      	bne.n	80055de <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	015a      	lsls	r2, r3, #5
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	4413      	add	r3, r2
 80055a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	69ba      	ldr	r2, [r7, #24]
 80055ae:	0151      	lsls	r1, r2, #5
 80055b0:	69fa      	ldr	r2, [r7, #28]
 80055b2:	440a      	add	r2, r1
 80055b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055b8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80055bc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	69ba      	ldr	r2, [r7, #24]
 80055ce:	0151      	lsls	r1, r2, #5
 80055d0:	69fa      	ldr	r2, [r7, #28]
 80055d2:	440a      	add	r2, r1
 80055d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055dc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80055de:	79fb      	ldrb	r3, [r7, #7]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d14b      	bne.n	800567c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d009      	beq.n	8005600 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	015a      	lsls	r2, r3, #5
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	4413      	add	r3, r2
 80055f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f8:	461a      	mov	r2, r3
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	78db      	ldrb	r3, [r3, #3]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d128      	bne.n	800565a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005614:	2b00      	cmp	r3, #0
 8005616:	d110      	bne.n	800563a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	4413      	add	r3, r2
 8005620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	69ba      	ldr	r2, [r7, #24]
 8005628:	0151      	lsls	r1, r2, #5
 800562a:	69fa      	ldr	r2, [r7, #28]
 800562c:	440a      	add	r2, r1
 800562e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005632:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005636:	6013      	str	r3, [r2, #0]
 8005638:	e00f      	b.n	800565a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	015a      	lsls	r2, r3, #5
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	4413      	add	r3, r2
 8005642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	69ba      	ldr	r2, [r7, #24]
 800564a:	0151      	lsls	r1, r2, #5
 800564c:	69fa      	ldr	r2, [r7, #28]
 800564e:	440a      	add	r2, r1
 8005650:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005658:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	015a      	lsls	r2, r3, #5
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	4413      	add	r3, r2
 8005662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	69ba      	ldr	r2, [r7, #24]
 800566a:	0151      	lsls	r1, r2, #5
 800566c:	69fa      	ldr	r2, [r7, #28]
 800566e:	440a      	add	r2, r1
 8005670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005674:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005678:	6013      	str	r3, [r2, #0]
 800567a:	e12f      	b.n	80058dc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	015a      	lsls	r2, r3, #5
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	4413      	add	r3, r2
 8005684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	0151      	lsls	r1, r2, #5
 800568e:	69fa      	ldr	r2, [r7, #28]
 8005690:	440a      	add	r2, r1
 8005692:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005696:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800569a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	78db      	ldrb	r3, [r3, #3]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d015      	beq.n	80056d0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f000 8117 	beq.w	80058dc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	f003 030f 	and.w	r3, r3, #15
 80056be:	2101      	movs	r1, #1
 80056c0:	fa01 f303 	lsl.w	r3, r1, r3
 80056c4:	69f9      	ldr	r1, [r7, #28]
 80056c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056ca:	4313      	orrs	r3, r2
 80056cc:	634b      	str	r3, [r1, #52]	; 0x34
 80056ce:	e105      	b.n	80058dc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d110      	bne.n	8005702 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	4413      	add	r3, r2
 80056e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	69ba      	ldr	r2, [r7, #24]
 80056f0:	0151      	lsls	r1, r2, #5
 80056f2:	69fa      	ldr	r2, [r7, #28]
 80056f4:	440a      	add	r2, r1
 80056f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056fe:	6013      	str	r3, [r2, #0]
 8005700:	e00f      	b.n	8005722 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	015a      	lsls	r2, r3, #5
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	4413      	add	r3, r2
 800570a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	0151      	lsls	r1, r2, #5
 8005714:	69fa      	ldr	r2, [r7, #28]
 8005716:	440a      	add	r2, r1
 8005718:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800571c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005720:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	68d9      	ldr	r1, [r3, #12]
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	781a      	ldrb	r2, [r3, #0]
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	b298      	uxth	r0, r3
 8005730:	79fb      	ldrb	r3, [r7, #7]
 8005732:	9300      	str	r3, [sp, #0]
 8005734:	4603      	mov	r3, r0
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f000 fa2b 	bl	8005b92 <USB_WritePacket>
 800573c:	e0ce      	b.n	80058dc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	015a      	lsls	r2, r3, #5
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	4413      	add	r3, r2
 8005746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	69ba      	ldr	r2, [r7, #24]
 800574e:	0151      	lsls	r1, r2, #5
 8005750:	69fa      	ldr	r2, [r7, #28]
 8005752:	440a      	add	r2, r1
 8005754:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005758:	0cdb      	lsrs	r3, r3, #19
 800575a:	04db      	lsls	r3, r3, #19
 800575c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	015a      	lsls	r2, r3, #5
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	4413      	add	r3, r2
 8005766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	0151      	lsls	r1, r2, #5
 8005770:	69fa      	ldr	r2, [r7, #28]
 8005772:	440a      	add	r2, r1
 8005774:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005778:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800577c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005780:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d126      	bne.n	80057d8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	015a      	lsls	r2, r3, #5
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	4413      	add	r3, r2
 8005792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005796:	691a      	ldr	r2, [r3, #16]
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057a0:	69b9      	ldr	r1, [r7, #24]
 80057a2:	0148      	lsls	r0, r1, #5
 80057a4:	69f9      	ldr	r1, [r7, #28]
 80057a6:	4401      	add	r1, r0
 80057a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80057ac:	4313      	orrs	r3, r2
 80057ae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	69ba      	ldr	r2, [r7, #24]
 80057c0:	0151      	lsls	r1, r2, #5
 80057c2:	69fa      	ldr	r2, [r7, #28]
 80057c4:	440a      	add	r2, r1
 80057c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057ce:	6113      	str	r3, [r2, #16]
 80057d0:	e036      	b.n	8005840 <USB_EPStartXfer+0x3dc>
 80057d2:	bf00      	nop
 80057d4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	695a      	ldr	r2, [r3, #20]
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	4413      	add	r3, r2
 80057e2:	1e5a      	subs	r2, r3, #1
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ec:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	015a      	lsls	r2, r3, #5
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	4413      	add	r3, r2
 80057f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057fa:	691a      	ldr	r2, [r3, #16]
 80057fc:	8afb      	ldrh	r3, [r7, #22]
 80057fe:	04d9      	lsls	r1, r3, #19
 8005800:	4b39      	ldr	r3, [pc, #228]	; (80058e8 <USB_EPStartXfer+0x484>)
 8005802:	400b      	ands	r3, r1
 8005804:	69b9      	ldr	r1, [r7, #24]
 8005806:	0148      	lsls	r0, r1, #5
 8005808:	69f9      	ldr	r1, [r7, #28]
 800580a:	4401      	add	r1, r0
 800580c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005810:	4313      	orrs	r3, r2
 8005812:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	4413      	add	r3, r2
 800581c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005820:	691a      	ldr	r2, [r3, #16]
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	8af9      	ldrh	r1, [r7, #22]
 8005828:	fb01 f303 	mul.w	r3, r1, r3
 800582c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005830:	69b9      	ldr	r1, [r7, #24]
 8005832:	0148      	lsls	r0, r1, #5
 8005834:	69f9      	ldr	r1, [r7, #28]
 8005836:	4401      	add	r1, r0
 8005838:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800583c:	4313      	orrs	r3, r2
 800583e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005840:	79fb      	ldrb	r3, [r7, #7]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d10d      	bne.n	8005862 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d009      	beq.n	8005862 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	68d9      	ldr	r1, [r3, #12]
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	015a      	lsls	r2, r3, #5
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	4413      	add	r3, r2
 800585a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800585e:	460a      	mov	r2, r1
 8005860:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	78db      	ldrb	r3, [r3, #3]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d128      	bne.n	80058bc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005876:	2b00      	cmp	r3, #0
 8005878:	d110      	bne.n	800589c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	015a      	lsls	r2, r3, #5
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	4413      	add	r3, r2
 8005882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	0151      	lsls	r1, r2, #5
 800588c:	69fa      	ldr	r2, [r7, #28]
 800588e:	440a      	add	r2, r1
 8005890:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005894:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005898:	6013      	str	r3, [r2, #0]
 800589a:	e00f      	b.n	80058bc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	015a      	lsls	r2, r3, #5
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	69ba      	ldr	r2, [r7, #24]
 80058ac:	0151      	lsls	r1, r2, #5
 80058ae:	69fa      	ldr	r2, [r7, #28]
 80058b0:	440a      	add	r2, r1
 80058b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058ba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	0151      	lsls	r1, r2, #5
 80058ce:	69fa      	ldr	r2, [r7, #28]
 80058d0:	440a      	add	r2, r1
 80058d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3720      	adds	r7, #32
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	1ff80000 	.word	0x1ff80000

080058ec <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b087      	sub	sp, #28
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	4613      	mov	r3, r2
 80058f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	785b      	ldrb	r3, [r3, #1]
 8005908:	2b01      	cmp	r3, #1
 800590a:	f040 80cd 	bne.w	8005aa8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d132      	bne.n	800597c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	4413      	add	r3, r2
 800591e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	0151      	lsls	r1, r2, #5
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	440a      	add	r2, r1
 800592c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005930:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005934:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005938:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	4413      	add	r3, r2
 8005942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	0151      	lsls	r1, r2, #5
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	440a      	add	r2, r1
 8005950:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005954:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005958:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	4413      	add	r3, r2
 8005962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	0151      	lsls	r1, r2, #5
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	440a      	add	r2, r1
 8005970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005974:	0cdb      	lsrs	r3, r3, #19
 8005976:	04db      	lsls	r3, r3, #19
 8005978:	6113      	str	r3, [r2, #16]
 800597a:	e04e      	b.n	8005a1a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	015a      	lsls	r2, r3, #5
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	4413      	add	r3, r2
 8005984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	0151      	lsls	r1, r2, #5
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	440a      	add	r2, r1
 8005992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005996:	0cdb      	lsrs	r3, r3, #19
 8005998:	04db      	lsls	r3, r3, #19
 800599a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	015a      	lsls	r2, r3, #5
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	4413      	add	r3, r2
 80059a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	0151      	lsls	r1, r2, #5
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	440a      	add	r2, r1
 80059b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059be:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	695a      	ldr	r2, [r3, #20]
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d903      	bls.n	80059d4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	689a      	ldr	r2, [r3, #8]
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	015a      	lsls	r2, r3, #5
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	4413      	add	r3, r2
 80059dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	0151      	lsls	r1, r2, #5
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	440a      	add	r2, r1
 80059ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	015a      	lsls	r2, r3, #5
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a00:	691a      	ldr	r2, [r3, #16]
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a0a:	6939      	ldr	r1, [r7, #16]
 8005a0c:	0148      	lsls	r0, r1, #5
 8005a0e:	6979      	ldr	r1, [r7, #20]
 8005a10:	4401      	add	r1, r0
 8005a12:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a16:	4313      	orrs	r3, r2
 8005a18:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005a1a:	79fb      	ldrb	r3, [r7, #7]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d11e      	bne.n	8005a5e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d009      	beq.n	8005a3c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a34:	461a      	mov	r2, r3
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	015a      	lsls	r2, r3, #5
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	4413      	add	r3, r2
 8005a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	0151      	lsls	r1, r2, #5
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	440a      	add	r2, r1
 8005a52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a5a:	6013      	str	r3, [r2, #0]
 8005a5c:	e092      	b.n	8005b84 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	015a      	lsls	r2, r3, #5
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	4413      	add	r3, r2
 8005a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	0151      	lsls	r1, r2, #5
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	440a      	add	r2, r1
 8005a74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a78:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a7c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d07e      	beq.n	8005b84 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	f003 030f 	and.w	r3, r3, #15
 8005a96:	2101      	movs	r1, #1
 8005a98:	fa01 f303 	lsl.w	r3, r1, r3
 8005a9c:	6979      	ldr	r1, [r7, #20]
 8005a9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	634b      	str	r3, [r1, #52]	; 0x34
 8005aa6:	e06d      	b.n	8005b84 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	015a      	lsls	r2, r3, #5
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	4413      	add	r3, r2
 8005ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	0151      	lsls	r1, r2, #5
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	440a      	add	r2, r1
 8005abe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ac2:	0cdb      	lsrs	r3, r3, #19
 8005ac4:	04db      	lsls	r3, r3, #19
 8005ac6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	015a      	lsls	r2, r3, #5
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	4413      	add	r3, r2
 8005ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	0151      	lsls	r1, r2, #5
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	440a      	add	r2, r1
 8005ade:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ae2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ae6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005aea:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	695b      	ldr	r3, [r3, #20]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d003      	beq.n	8005afc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	689a      	ldr	r2, [r3, #8]
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	015a      	lsls	r2, r3, #5
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	4413      	add	r3, r2
 8005b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	0151      	lsls	r1, r2, #5
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	440a      	add	r2, r1
 8005b12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b1a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	015a      	lsls	r2, r3, #5
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	4413      	add	r3, r2
 8005b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b28:	691a      	ldr	r2, [r3, #16]
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b32:	6939      	ldr	r1, [r7, #16]
 8005b34:	0148      	lsls	r0, r1, #5
 8005b36:	6979      	ldr	r1, [r7, #20]
 8005b38:	4401      	add	r1, r0
 8005b3a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005b42:	79fb      	ldrb	r3, [r7, #7]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d10d      	bne.n	8005b64 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d009      	beq.n	8005b64 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	68d9      	ldr	r1, [r3, #12]
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	015a      	lsls	r2, r3, #5
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b60:	460a      	mov	r2, r1
 8005b62:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	0151      	lsls	r1, r2, #5
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	440a      	add	r2, r1
 8005b7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	371c      	adds	r7, #28
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b089      	sub	sp, #36	; 0x24
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	60f8      	str	r0, [r7, #12]
 8005b9a:	60b9      	str	r1, [r7, #8]
 8005b9c:	4611      	mov	r1, r2
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	71fb      	strb	r3, [r7, #7]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005bb0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d123      	bne.n	8005c00 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005bb8:	88bb      	ldrh	r3, [r7, #4]
 8005bba:	3303      	adds	r3, #3
 8005bbc:	089b      	lsrs	r3, r3, #2
 8005bbe:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	61bb      	str	r3, [r7, #24]
 8005bc4:	e018      	b.n	8005bf8 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005bc6:	79fb      	ldrb	r3, [r7, #7]
 8005bc8:	031a      	lsls	r2, r3, #12
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	4413      	add	r3, r2
 8005bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	3301      	adds	r3, #1
 8005be4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	3301      	adds	r3, #1
 8005bea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	61bb      	str	r3, [r7, #24]
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d3e2      	bcc.n	8005bc6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3724      	adds	r7, #36	; 0x24
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005c0e:	b480      	push	{r7}
 8005c10:	b08b      	sub	sp, #44	; 0x2c
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	60f8      	str	r0, [r7, #12]
 8005c16:	60b9      	str	r1, [r7, #8]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005c24:	88fb      	ldrh	r3, [r7, #6]
 8005c26:	089b      	lsrs	r3, r3, #2
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005c2c:	88fb      	ldrh	r3, [r7, #6]
 8005c2e:	f003 0303 	and.w	r3, r3, #3
 8005c32:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005c34:	2300      	movs	r3, #0
 8005c36:	623b      	str	r3, [r7, #32]
 8005c38:	e014      	b.n	8005c64 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c44:	601a      	str	r2, [r3, #0]
    pDest++;
 8005c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c48:	3301      	adds	r3, #1
 8005c4a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4e:	3301      	adds	r3, #1
 8005c50:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c54:	3301      	adds	r3, #1
 8005c56:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005c5e:	6a3b      	ldr	r3, [r7, #32]
 8005c60:	3301      	adds	r3, #1
 8005c62:	623b      	str	r3, [r7, #32]
 8005c64:	6a3a      	ldr	r2, [r7, #32]
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d3e6      	bcc.n	8005c3a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005c6c:	8bfb      	ldrh	r3, [r7, #30]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d01e      	beq.n	8005cb0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005c72:	2300      	movs	r3, #0
 8005c74:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	f107 0310 	add.w	r3, r7, #16
 8005c82:	6812      	ldr	r2, [r2, #0]
 8005c84:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	6a3b      	ldr	r3, [r7, #32]
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	00db      	lsls	r3, r3, #3
 8005c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c92:	b2da      	uxtb	r2, r3
 8005c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c96:	701a      	strb	r2, [r3, #0]
      i++;
 8005c98:	6a3b      	ldr	r3, [r7, #32]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	623b      	str	r3, [r7, #32]
      pDest++;
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005ca4:	8bfb      	ldrh	r3, [r7, #30]
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005caa:	8bfb      	ldrh	r3, [r7, #30]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1ea      	bne.n	8005c86 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	372c      	adds	r7, #44	; 0x2c
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b085      	sub	sp, #20
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
 8005cc6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	785b      	ldrb	r3, [r3, #1]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d12c      	bne.n	8005d34 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	015a      	lsls	r2, r3, #5
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	db12      	blt.n	8005d12 <USB_EPSetStall+0x54>
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00f      	beq.n	8005d12 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	015a      	lsls	r2, r3, #5
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68ba      	ldr	r2, [r7, #8]
 8005d02:	0151      	lsls	r1, r2, #5
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	440a      	add	r2, r1
 8005d08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d10:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68ba      	ldr	r2, [r7, #8]
 8005d22:	0151      	lsls	r1, r2, #5
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	440a      	add	r2, r1
 8005d28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d30:	6013      	str	r3, [r2, #0]
 8005d32:	e02b      	b.n	8005d8c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	015a      	lsls	r2, r3, #5
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	db12      	blt.n	8005d6c <USB_EPSetStall+0xae>
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00f      	beq.n	8005d6c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	0151      	lsls	r1, r2, #5
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	440a      	add	r2, r1
 8005d62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d6a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	015a      	lsls	r2, r3, #5
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	4413      	add	r3, r2
 8005d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	0151      	lsls	r1, r2, #5
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	440a      	add	r2, r1
 8005d82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b085      	sub	sp, #20
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	785b      	ldrb	r3, [r3, #1]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d128      	bne.n	8005e08 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	015a      	lsls	r2, r3, #5
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68ba      	ldr	r2, [r7, #8]
 8005dc6:	0151      	lsls	r1, r2, #5
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	440a      	add	r2, r1
 8005dcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dd0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005dd4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	78db      	ldrb	r3, [r3, #3]
 8005dda:	2b03      	cmp	r3, #3
 8005ddc:	d003      	beq.n	8005de6 <USB_EPClearStall+0x4c>
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	78db      	ldrb	r3, [r3, #3]
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d138      	bne.n	8005e58 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	015a      	lsls	r2, r3, #5
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	4413      	add	r3, r2
 8005dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68ba      	ldr	r2, [r7, #8]
 8005df6:	0151      	lsls	r1, r2, #5
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	440a      	add	r2, r1
 8005dfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e04:	6013      	str	r3, [r2, #0]
 8005e06:	e027      	b.n	8005e58 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	015a      	lsls	r2, r3, #5
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	4413      	add	r3, r2
 8005e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	0151      	lsls	r1, r2, #5
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	440a      	add	r2, r1
 8005e1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e26:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	78db      	ldrb	r3, [r3, #3]
 8005e2c:	2b03      	cmp	r3, #3
 8005e2e:	d003      	beq.n	8005e38 <USB_EPClearStall+0x9e>
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	78db      	ldrb	r3, [r3, #3]
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d10f      	bne.n	8005e58 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	015a      	lsls	r2, r3, #5
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	4413      	add	r3, r2
 8005e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	0151      	lsls	r1, r2, #5
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	440a      	add	r2, r1
 8005e4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e56:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b085      	sub	sp, #20
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
 8005e6e:	460b      	mov	r3, r1
 8005e70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e84:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005e88:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	78fb      	ldrb	r3, [r7, #3]
 8005e94:	011b      	lsls	r3, r3, #4
 8005e96:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005e9a:	68f9      	ldr	r1, [r7, #12]
 8005e9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3714      	adds	r7, #20
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr

08005eb2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b085      	sub	sp, #20
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ecc:	f023 0303 	bic.w	r3, r3, #3
 8005ed0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ee0:	f023 0302 	bic.w	r3, r3, #2
 8005ee4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3714      	adds	r7, #20
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f0e:	f023 0303 	bic.w	r3, r3, #3
 8005f12:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f22:	f043 0302 	orr.w	r3, r3, #2
 8005f26:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b085      	sub	sp, #20
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	695b      	ldr	r3, [r3, #20]
 8005f42:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3714      	adds	r7, #20
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	0c1b      	lsrs	r3, r3, #16
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3714      	adds	r7, #20
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	b29b      	uxth	r3, r3
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3714      	adds	r7, #20
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	460b      	mov	r3, r1
 8005fce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005fd4:	78fb      	ldrb	r3, [r7, #3]
 8005fd6:	015a      	lsls	r2, r3, #5
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fea:	695b      	ldr	r3, [r3, #20]
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	4013      	ands	r3, r2
 8005ff0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ff2:	68bb      	ldr	r3, [r7, #8]
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3714      	adds	r7, #20
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006000:	b480      	push	{r7}
 8006002:	b087      	sub	sp, #28
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	460b      	mov	r3, r1
 800600a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006022:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006024:	78fb      	ldrb	r3, [r7, #3]
 8006026:	f003 030f 	and.w	r3, r3, #15
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	fa22 f303 	lsr.w	r3, r2, r3
 8006030:	01db      	lsls	r3, r3, #7
 8006032:	b2db      	uxtb	r3, r3
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	4313      	orrs	r3, r2
 8006038:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800603a:	78fb      	ldrb	r3, [r7, #3]
 800603c:	015a      	lsls	r2, r3, #5
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	4413      	add	r3, r2
 8006042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	4013      	ands	r3, r2
 800604c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800604e:	68bb      	ldr	r3, [r7, #8]
}
 8006050:	4618      	mov	r0, r3
 8006052:	371c      	adds	r7, #28
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	f003 0301 	and.w	r3, r3, #1
}
 800606c:	4618      	mov	r0, r3
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006092:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006096:	f023 0307 	bic.w	r3, r3, #7
 800609a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060ae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3714      	adds	r7, #20
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
	...

080060c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	460b      	mov	r3, r1
 80060ca:	607a      	str	r2, [r7, #4]
 80060cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	333c      	adds	r3, #60	; 0x3c
 80060d6:	3304      	adds	r3, #4
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	4a26      	ldr	r2, [pc, #152]	; (8006178 <USB_EP0_OutStart+0xb8>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d90a      	bls.n	80060fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060f4:	d101      	bne.n	80060fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80060f6:	2300      	movs	r3, #0
 80060f8:	e037      	b.n	800616a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006100:	461a      	mov	r2, r3
 8006102:	2300      	movs	r3, #0
 8006104:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006114:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006118:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006128:	f043 0318 	orr.w	r3, r3, #24
 800612c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800613c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006140:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006142:	7afb      	ldrb	r3, [r7, #11]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d10f      	bne.n	8006168 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800614e:	461a      	mov	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006162:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006166:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	371c      	adds	r7, #28
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	4f54300a 	.word	0x4f54300a

0800617c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006184:	2300      	movs	r3, #0
 8006186:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	3301      	adds	r3, #1
 800618c:	60fb      	str	r3, [r7, #12]
 800618e:	4a13      	ldr	r2, [pc, #76]	; (80061dc <USB_CoreReset+0x60>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d901      	bls.n	8006198 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	e01a      	b.n	80061ce <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	2b00      	cmp	r3, #0
 800619e:	daf3      	bge.n	8006188 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80061a0:	2300      	movs	r3, #0
 80061a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	f043 0201 	orr.w	r2, r3, #1
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	3301      	adds	r3, #1
 80061b4:	60fb      	str	r3, [r7, #12]
 80061b6:	4a09      	ldr	r2, [pc, #36]	; (80061dc <USB_CoreReset+0x60>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d901      	bls.n	80061c0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e006      	b.n	80061ce <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d0f1      	beq.n	80061b0 <USB_CoreReset+0x34>

  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3714      	adds	r7, #20
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	00030d40 	.word	0x00030d40

080061e0 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	460b      	mov	r3, r1
 80061ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80061ec:	2054      	movs	r0, #84	; 0x54
 80061ee:	f001 fffb 	bl	80081e8 <USBD_static_malloc>
 80061f2:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d105      	bne.n	8006206 <USBD_CUSTOM_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006202:	2302      	movs	r3, #2
 8006204:	e039      	b.n	800627a <USBD_CUSTOM_HID_Init+0x9a>
  }

  pdev->pClassData = (void *)hhid;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	7c1b      	ldrb	r3, [r3, #16]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d107      	bne.n	8006226 <USBD_CUSTOM_HID_Init+0x46>
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2205      	movs	r2, #5
 800621a:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2205      	movs	r2, #5
 8006220:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 8006224:	e006      	b.n	8006234 <USBD_CUSTOM_HID_Init+0x54>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2205      	movs	r2, #5
 800622a:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2205      	movs	r2, #5
 8006230:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8006234:	2302      	movs	r3, #2
 8006236:	2203      	movs	r2, #3
 8006238:	2181      	movs	r1, #129	; 0x81
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f001 fec3 	bl	8007fc6 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8006246:	2302      	movs	r3, #2
 8006248:	2203      	movs	r2, #3
 800624a:	2101      	movs	r1, #1
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f001 feba 	bl	8007fc6 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2201      	movs	r2, #1
 8006256:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  hhid->state = CUSTOM_HID_IDLE;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	2340      	movs	r3, #64	; 0x40
 8006270:	2101      	movs	r1, #1
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f001 ff96 	bl	80081a4 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b082      	sub	sp, #8
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
 800628a:	460b      	mov	r3, r1
 800628c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 800628e:	2181      	movs	r1, #129	; 0x81
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f001 febe 	bl	8008012 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 80062a2:	2101      	movs	r1, #1
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f001 feb4 	bl	8008012 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = 0U;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00e      	beq.n	80062e2 <USBD_CUSTOM_HID_DeInit+0x60>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062d4:	4618      	mov	r0, r3
 80062d6:	f001 ff95 	bl	8008204 <USBD_static_free>
    pdev->pClassData = NULL;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3708      	adds	r7, #8
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b088      	sub	sp, #32
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062fc:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80062fe:	2300      	movs	r3, #0
 8006300:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8006302:	2300      	movs	r3, #0
 8006304:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006306:	2300      	movs	r3, #0
 8006308:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800630a:	2300      	movs	r3, #0
 800630c:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d101      	bne.n	8006318 <USBD_CUSTOM_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8006314:	2303      	movs	r3, #3
 8006316:	e0ed      	b.n	80064f4 <USBD_CUSTOM_HID_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006320:	2b00      	cmp	r3, #0
 8006322:	d052      	beq.n	80063ca <USBD_CUSTOM_HID_Setup+0xde>
 8006324:	2b20      	cmp	r3, #32
 8006326:	f040 80dd 	bne.w	80064e4 <USBD_CUSTOM_HID_Setup+0x1f8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	785b      	ldrb	r3, [r3, #1]
 800632e:	3b02      	subs	r3, #2
 8006330:	2b09      	cmp	r3, #9
 8006332:	d842      	bhi.n	80063ba <USBD_CUSTOM_HID_Setup+0xce>
 8006334:	a201      	add	r2, pc, #4	; (adr r2, 800633c <USBD_CUSTOM_HID_Setup+0x50>)
 8006336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800633a:	bf00      	nop
 800633c:	08006395 	.word	0x08006395
 8006340:	08006373 	.word	0x08006373
 8006344:	080063bb 	.word	0x080063bb
 8006348:	080063bb 	.word	0x080063bb
 800634c:	080063bb 	.word	0x080063bb
 8006350:	080063bb 	.word	0x080063bb
 8006354:	080063bb 	.word	0x080063bb
 8006358:	080063a5 	.word	0x080063a5
 800635c:	08006383 	.word	0x08006383
 8006360:	08006365 	.word	0x08006365
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	885b      	ldrh	r3, [r3, #2]
 8006368:	b2db      	uxtb	r3, r3
 800636a:	461a      	mov	r2, r3
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8006370:	e02a      	b.n	80063c8 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	3340      	adds	r3, #64	; 0x40
 8006376:	2201      	movs	r2, #1
 8006378:	4619      	mov	r1, r3
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f001 fa9d 	bl	80078ba <USBD_CtlSendData>
          break;
 8006380:	e022      	b.n	80063c8 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	885b      	ldrh	r3, [r3, #2]
 8006386:	0a1b      	lsrs	r3, r3, #8
 8006388:	b29b      	uxth	r3, r3
 800638a:	b2db      	uxtb	r3, r3
 800638c:	461a      	mov	r2, r3
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 8006392:	e019      	b.n	80063c8 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	3344      	adds	r3, #68	; 0x44
 8006398:	2201      	movs	r2, #1
 800639a:	4619      	mov	r1, r3
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f001 fa8c 	bl	80078ba <USBD_CtlSendData>
          break;
 80063a2:	e011      	b.n	80063c8 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	2201      	movs	r2, #1
 80063a8:	64da      	str	r2, [r3, #76]	; 0x4c
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 80063aa:	6939      	ldr	r1, [r7, #16]
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	88db      	ldrh	r3, [r3, #6]
 80063b0:	461a      	mov	r2, r3
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f001 faad 	bl	8007912 <USBD_CtlPrepareRx>
          break;
 80063b8:	e006      	b.n	80063c8 <USBD_CUSTOM_HID_Setup+0xdc>

        default:
          USBD_CtlError(pdev, req);
 80063ba:	6839      	ldr	r1, [r7, #0]
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f001 fa0b 	bl	80077d8 <USBD_CtlError>
          ret = USBD_FAIL;
 80063c2:	2303      	movs	r3, #3
 80063c4:	75fb      	strb	r3, [r7, #23]
          break;
 80063c6:	bf00      	nop
      }
      break;
 80063c8:	e093      	b.n	80064f2 <USBD_CUSTOM_HID_Setup+0x206>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	785b      	ldrb	r3, [r3, #1]
 80063ce:	2b0b      	cmp	r3, #11
 80063d0:	d87f      	bhi.n	80064d2 <USBD_CUSTOM_HID_Setup+0x1e6>
 80063d2:	a201      	add	r2, pc, #4	; (adr r2, 80063d8 <USBD_CUSTOM_HID_Setup+0xec>)
 80063d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d8:	08006409 	.word	0x08006409
 80063dc:	080064e1 	.word	0x080064e1
 80063e0:	080064d3 	.word	0x080064d3
 80063e4:	080064d3 	.word	0x080064d3
 80063e8:	080064d3 	.word	0x080064d3
 80063ec:	080064d3 	.word	0x080064d3
 80063f0:	08006433 	.word	0x08006433
 80063f4:	080064d3 	.word	0x080064d3
 80063f8:	080064d3 	.word	0x080064d3
 80063fc:	080064d3 	.word	0x080064d3
 8006400:	08006481 	.word	0x08006481
 8006404:	080064ab 	.word	0x080064ab
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800640e:	b2db      	uxtb	r3, r3
 8006410:	2b03      	cmp	r3, #3
 8006412:	d107      	bne.n	8006424 <USBD_CUSTOM_HID_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006414:	f107 030e 	add.w	r3, r7, #14
 8006418:	2202      	movs	r2, #2
 800641a:	4619      	mov	r1, r3
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f001 fa4c 	bl	80078ba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006422:	e05e      	b.n	80064e2 <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 8006424:	6839      	ldr	r1, [r7, #0]
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f001 f9d6 	bl	80077d8 <USBD_CtlError>
            ret = USBD_FAIL;
 800642c:	2303      	movs	r3, #3
 800642e:	75fb      	strb	r3, [r7, #23]
          break;
 8006430:	e057      	b.n	80064e2 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	885b      	ldrh	r3, [r3, #2]
 8006436:	0a1b      	lsrs	r3, r3, #8
 8006438:	b29b      	uxth	r3, r3
 800643a:	2b22      	cmp	r3, #34	; 0x22
 800643c:	d10b      	bne.n	8006456 <USBD_CUSTOM_HID_Setup+0x16a>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	88db      	ldrh	r3, [r3, #6]
 8006442:	2b21      	cmp	r3, #33	; 0x21
 8006444:	bf28      	it	cs
 8006446:	2321      	movcs	r3, #33	; 0x21
 8006448:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	61bb      	str	r3, [r7, #24]
 8006454:	e00d      	b.n	8006472 <USBD_CUSTOM_HID_Setup+0x186>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	885b      	ldrh	r3, [r3, #2]
 800645a:	0a1b      	lsrs	r3, r3, #8
 800645c:	b29b      	uxth	r3, r3
 800645e:	2b21      	cmp	r3, #33	; 0x21
 8006460:	d107      	bne.n	8006472 <USBD_CUSTOM_HID_Setup+0x186>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8006462:	4b26      	ldr	r3, [pc, #152]	; (80064fc <USBD_CUSTOM_HID_Setup+0x210>)
 8006464:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	88db      	ldrh	r3, [r3, #6]
 800646a:	2b09      	cmp	r3, #9
 800646c:	bf28      	it	cs
 800646e:	2309      	movcs	r3, #9
 8006470:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006472:	8bfb      	ldrh	r3, [r7, #30]
 8006474:	461a      	mov	r2, r3
 8006476:	69b9      	ldr	r1, [r7, #24]
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f001 fa1e 	bl	80078ba <USBD_CtlSendData>
          break;
 800647e:	e030      	b.n	80064e2 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006486:	b2db      	uxtb	r3, r3
 8006488:	2b03      	cmp	r3, #3
 800648a:	d107      	bne.n	800649c <USBD_CUSTOM_HID_Setup+0x1b0>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	3348      	adds	r3, #72	; 0x48
 8006490:	2201      	movs	r2, #1
 8006492:	4619      	mov	r1, r3
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f001 fa10 	bl	80078ba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800649a:	e022      	b.n	80064e2 <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 800649c:	6839      	ldr	r1, [r7, #0]
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f001 f99a 	bl	80077d8 <USBD_CtlError>
            ret = USBD_FAIL;
 80064a4:	2303      	movs	r3, #3
 80064a6:	75fb      	strb	r3, [r7, #23]
          break;
 80064a8:	e01b      	b.n	80064e2 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	2b03      	cmp	r3, #3
 80064b4:	d106      	bne.n	80064c4 <USBD_CUSTOM_HID_Setup+0x1d8>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	885b      	ldrh	r3, [r3, #2]
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	461a      	mov	r2, r3
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80064c2:	e00e      	b.n	80064e2 <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 80064c4:	6839      	ldr	r1, [r7, #0]
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f001 f986 	bl	80077d8 <USBD_CtlError>
            ret = USBD_FAIL;
 80064cc:	2303      	movs	r3, #3
 80064ce:	75fb      	strb	r3, [r7, #23]
          break;
 80064d0:	e007      	b.n	80064e2 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80064d2:	6839      	ldr	r1, [r7, #0]
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f001 f97f 	bl	80077d8 <USBD_CtlError>
          ret = USBD_FAIL;
 80064da:	2303      	movs	r3, #3
 80064dc:	75fb      	strb	r3, [r7, #23]
          break;
 80064de:	e000      	b.n	80064e2 <USBD_CUSTOM_HID_Setup+0x1f6>
          break;
 80064e0:	bf00      	nop
      }
      break;
 80064e2:	e006      	b.n	80064f2 <USBD_CUSTOM_HID_Setup+0x206>

    default:
      USBD_CtlError(pdev, req);
 80064e4:	6839      	ldr	r1, [r7, #0]
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f001 f976 	bl	80077d8 <USBD_CtlError>
      ret = USBD_FAIL;
 80064ec:	2303      	movs	r3, #3
 80064ee:	75fb      	strb	r3, [r7, #23]
      break;
 80064f0:	bf00      	nop
  }
  return (uint8_t)ret;
 80064f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3720      	adds	r7, #32
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	200000c8 	.word	0x200000c8

08006500 <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b086      	sub	sp, #24
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	4613      	mov	r3, r2
 800650c:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006514:	2b00      	cmp	r3, #0
 8006516:	d101      	bne.n	800651c <USBD_CUSTOM_HID_SendReport+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006518:	2303      	movs	r3, #3
 800651a:	e01c      	b.n	8006556 <USBD_CUSTOM_HID_SendReport+0x56>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006522:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800652a:	b2db      	uxtb	r3, r3
 800652c:	2b03      	cmp	r3, #3
 800652e:	d111      	bne.n	8006554 <USBD_CUSTOM_HID_SendReport+0x54>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10a      	bne.n	8006550 <USBD_CUSTOM_HID_SendReport+0x50>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	2201      	movs	r2, #1
 800653e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8006542:	88fb      	ldrh	r3, [r7, #6]
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	2181      	movs	r1, #129	; 0x81
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f001 fe0a 	bl	8008162 <USBD_LL_Transmit>
 800654e:	e001      	b.n	8006554 <USBD_CUSTOM_HID_SendReport+0x54>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8006550:	2301      	movs	r3, #1
 8006552:	e000      	b.n	8006556 <USBD_CUSTOM_HID_SendReport+0x56>
    }
  }
  return (uint8_t)USBD_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3718      	adds	r7, #24
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
	...

08006560 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2229      	movs	r2, #41	; 0x29
 800656c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 800656e:	4b03      	ldr	r3, [pc, #12]	; (800657c <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8006570:	4618      	mov	r0, r3
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr
 800657c:	20000044 	.word	0x20000044

08006580 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2229      	movs	r2, #41	; 0x29
 800658c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 800658e:	4b03      	ldr	r3, [pc, #12]	; (800659c <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8006590:	4618      	mov	r0, r3
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr
 800659c:	20000070 	.word	0x20000070

080065a0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2229      	movs	r2, #41	; 0x29
 80065ac:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 80065ae:	4b03      	ldr	r3, [pc, #12]	; (80065bc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr
 80065bc:	2000009c 	.word	0x2000009c

080065c0 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	460b      	mov	r3, r1
 80065ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return (uint8_t)USBD_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	370c      	adds	r7, #12
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr

080065e6 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b084      	sub	sp, #16
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
 80065ee:	460b      	mov	r3, r1
 80065f0:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d101      	bne.n	8006600 <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80065fc:	2303      	movs	r3, #3
 80065fe:	e00e      	b.n	800661e <USBD_CUSTOM_HID_DataOut+0x38>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006606:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	7810      	ldrb	r0, [r2, #0]
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	7852      	ldrb	r2, [r2, #1]
 8006618:	4611      	mov	r1, r2
 800661a:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b084      	sub	sp, #16
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006634:	2b00      	cmp	r3, #0
 8006636:	d101      	bne.n	800663c <USBD_CUSTOM_HID_ReceivePacket+0x16>
  {
    return (uint8_t)USBD_FAIL;
 8006638:	2303      	movs	r3, #3
 800663a:	e00a      	b.n	8006652 <USBD_CUSTOM_HID_ReceivePacket+0x2c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006642:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	2340      	movs	r3, #64	; 0x40
 8006648:	2101      	movs	r1, #1
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f001 fdaa 	bl	80081a4 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b084      	sub	sp, #16
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006668:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d101      	bne.n	8006674 <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006670:	2303      	movs	r3, #3
 8006672:	e011      	b.n	8006698 <USBD_CUSTOM_HID_EP0_RxReady+0x3e>
  }

  if (hhid->IsReportAvailable == 1U)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006678:	2b01      	cmp	r3, #1
 800667a:	d10c      	bne.n	8006696 <USBD_CUSTOM_HID_EP0_RxReady+0x3c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	7810      	ldrb	r0, [r2, #0]
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	7852      	ldrb	r2, [r2, #1]
 800668c:	4611      	mov	r1, r2
 800668e:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return (uint8_t)USBD_OK;
 8006696:	2300      	movs	r3, #0
}
 8006698:	4618      	mov	r0, r3
 800669a:	3710      	adds	r7, #16
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	220a      	movs	r2, #10
 80066ac:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80066ae:	4b03      	ldr	r3, [pc, #12]	; (80066bc <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr
 80066bc:	200000d4 	.word	0x200000d4

080066c0 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d101      	bne.n	80066d4 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e004      	b.n	80066de <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	683a      	ldr	r2, [r7, #0]
 80066d8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b086      	sub	sp, #24
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	60f8      	str	r0, [r7, #12]
 80066f2:	60b9      	str	r1, [r7, #8]
 80066f4:	4613      	mov	r3, r2
 80066f6:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80066fe:	2303      	movs	r3, #3
 8006700:	e01f      	b.n	8006742 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2200      	movs	r2, #0
 800670e:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d003      	beq.n	8006728 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	68ba      	ldr	r2, [r7, #8]
 8006724:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	79fa      	ldrb	r2, [r7, #7]
 8006734:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f001 fbde 	bl	8007ef8 <USBD_LL_Init>
 800673c:	4603      	mov	r3, r0
 800673e:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006740:	7dfb      	ldrb	r3, [r7, #23]
}
 8006742:	4618      	mov	r0, r3
 8006744:	3718      	adds	r7, #24
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800674a:	b580      	push	{r7, lr}
 800674c:	b084      	sub	sp, #16
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
 8006752:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006754:	2300      	movs	r3, #0
 8006756:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d101      	bne.n	8006762 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800675e:	2303      	movs	r3, #3
 8006760:	e016      	b.n	8006790 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	683a      	ldr	r2, [r7, #0]
 8006766:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00b      	beq.n	800678e <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800677c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677e:	f107 020e 	add.w	r2, r7, #14
 8006782:	4610      	mov	r0, r2
 8006784:	4798      	blx	r3
 8006786:	4602      	mov	r2, r0
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3710      	adds	r7, #16
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f001 fbf5 	bl	8007f90 <USBD_LL_Start>
 80067a6:	4603      	mov	r3, r0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3708      	adds	r7, #8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	370c      	adds	r7, #12
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b084      	sub	sp, #16
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
 80067ce:	460b      	mov	r3, r1
 80067d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80067d2:	2303      	movs	r3, #3
 80067d4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d009      	beq.n	80067f4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	78fa      	ldrb	r2, [r7, #3]
 80067ea:	4611      	mov	r1, r2
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	4798      	blx	r3
 80067f0:	4603      	mov	r3, r0
 80067f2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80067f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b082      	sub	sp, #8
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
 8006806:	460b      	mov	r3, r1
 8006808:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006810:	2b00      	cmp	r3, #0
 8006812:	d007      	beq.n	8006824 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	78fa      	ldrb	r2, [r7, #3]
 800681e:	4611      	mov	r1, r2
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	4798      	blx	r3
  }

  return USBD_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3708      	adds	r7, #8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b084      	sub	sp, #16
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
 8006836:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800683e:	6839      	ldr	r1, [r7, #0]
 8006840:	4618      	mov	r0, r3
 8006842:	f000 ff8f 	bl	8007764 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2201      	movs	r2, #1
 800684a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006854:	461a      	mov	r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006862:	f003 031f 	and.w	r3, r3, #31
 8006866:	2b02      	cmp	r3, #2
 8006868:	d01a      	beq.n	80068a0 <USBD_LL_SetupStage+0x72>
 800686a:	2b02      	cmp	r3, #2
 800686c:	d822      	bhi.n	80068b4 <USBD_LL_SetupStage+0x86>
 800686e:	2b00      	cmp	r3, #0
 8006870:	d002      	beq.n	8006878 <USBD_LL_SetupStage+0x4a>
 8006872:	2b01      	cmp	r3, #1
 8006874:	d00a      	beq.n	800688c <USBD_LL_SetupStage+0x5e>
 8006876:	e01d      	b.n	80068b4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800687e:	4619      	mov	r1, r3
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 fa61 	bl	8006d48 <USBD_StdDevReq>
 8006886:	4603      	mov	r3, r0
 8006888:	73fb      	strb	r3, [r7, #15]
      break;
 800688a:	e020      	b.n	80068ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006892:	4619      	mov	r1, r3
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 fac5 	bl	8006e24 <USBD_StdItfReq>
 800689a:	4603      	mov	r3, r0
 800689c:	73fb      	strb	r3, [r7, #15]
      break;
 800689e:	e016      	b.n	80068ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068a6:	4619      	mov	r1, r3
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 fb04 	bl	8006eb6 <USBD_StdEPReq>
 80068ae:	4603      	mov	r3, r0
 80068b0:	73fb      	strb	r3, [r7, #15]
      break;
 80068b2:	e00c      	b.n	80068ce <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80068ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	4619      	mov	r1, r3
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f001 fbc4 	bl	8008050 <USBD_LL_StallEP>
 80068c8:	4603      	mov	r3, r0
 80068ca:	73fb      	strb	r3, [r7, #15]
      break;
 80068cc:	bf00      	nop
  }

  return ret;
 80068ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b086      	sub	sp, #24
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	460b      	mov	r3, r1
 80068e2:	607a      	str	r2, [r7, #4]
 80068e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80068e6:	7afb      	ldrb	r3, [r7, #11]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d138      	bne.n	800695e <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80068f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068fa:	2b03      	cmp	r3, #3
 80068fc:	d14a      	bne.n	8006994 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	689a      	ldr	r2, [r3, #8]
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	429a      	cmp	r2, r3
 8006908:	d913      	bls.n	8006932 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	689a      	ldr	r2, [r3, #8]
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	1ad2      	subs	r2, r2, r3
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	68da      	ldr	r2, [r3, #12]
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	4293      	cmp	r3, r2
 8006922:	bf28      	it	cs
 8006924:	4613      	movcs	r3, r2
 8006926:	461a      	mov	r2, r3
 8006928:	6879      	ldr	r1, [r7, #4]
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f001 f80e 	bl	800794c <USBD_CtlContinueRx>
 8006930:	e030      	b.n	8006994 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b03      	cmp	r3, #3
 800693c:	d10b      	bne.n	8006956 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d005      	beq.n	8006956 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	f001 f809 	bl	800796e <USBD_CtlSendStatus>
 800695c:	e01a      	b.n	8006994 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b03      	cmp	r3, #3
 8006968:	d114      	bne.n	8006994 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006970:	699b      	ldr	r3, [r3, #24]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00e      	beq.n	8006994 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800697c:	699b      	ldr	r3, [r3, #24]
 800697e:	7afa      	ldrb	r2, [r7, #11]
 8006980:	4611      	mov	r1, r2
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	4798      	blx	r3
 8006986:	4603      	mov	r3, r0
 8006988:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800698a:	7dfb      	ldrb	r3, [r7, #23]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d001      	beq.n	8006994 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006990:	7dfb      	ldrb	r3, [r7, #23]
 8006992:	e000      	b.n	8006996 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3718      	adds	r7, #24
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800699e:	b580      	push	{r7, lr}
 80069a0:	b086      	sub	sp, #24
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	60f8      	str	r0, [r7, #12]
 80069a6:	460b      	mov	r3, r1
 80069a8:	607a      	str	r2, [r7, #4]
 80069aa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80069ac:	7afb      	ldrb	r3, [r7, #11]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d16b      	bne.n	8006a8a <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	3314      	adds	r3, #20
 80069b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d156      	bne.n	8006a70 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	689a      	ldr	r2, [r3, #8]
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d914      	bls.n	80069f8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	689a      	ldr	r2, [r3, #8]
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	1ad2      	subs	r2, r2, r3
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	461a      	mov	r2, r3
 80069e2:	6879      	ldr	r1, [r7, #4]
 80069e4:	68f8      	ldr	r0, [r7, #12]
 80069e6:	f000 ff83 	bl	80078f0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069ea:	2300      	movs	r3, #0
 80069ec:	2200      	movs	r2, #0
 80069ee:	2100      	movs	r1, #0
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f001 fbd7 	bl	80081a4 <USBD_LL_PrepareReceive>
 80069f6:	e03b      	b.n	8006a70 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	68da      	ldr	r2, [r3, #12]
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d11c      	bne.n	8006a3e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	685a      	ldr	r2, [r3, #4]
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d316      	bcc.n	8006a3e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	685a      	ldr	r2, [r3, #4]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d20f      	bcs.n	8006a3e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006a1e:	2200      	movs	r2, #0
 8006a20:	2100      	movs	r1, #0
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f000 ff64 	bl	80078f0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a30:	2300      	movs	r3, #0
 8006a32:	2200      	movs	r2, #0
 8006a34:	2100      	movs	r1, #0
 8006a36:	68f8      	ldr	r0, [r7, #12]
 8006a38:	f001 fbb4 	bl	80081a4 <USBD_LL_PrepareReceive>
 8006a3c:	e018      	b.n	8006a70 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b03      	cmp	r3, #3
 8006a48:	d10b      	bne.n	8006a62 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d005      	beq.n	8006a62 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a62:	2180      	movs	r1, #128	; 0x80
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f001 faf3 	bl	8008050 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f000 ff92 	bl	8007994 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d122      	bne.n	8006ac0 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f7ff fe98 	bl	80067b0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006a88:	e01a      	b.n	8006ac0 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b03      	cmp	r3, #3
 8006a94:	d114      	bne.n	8006ac0 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a9c:	695b      	ldr	r3, [r3, #20]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00e      	beq.n	8006ac0 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aa8:	695b      	ldr	r3, [r3, #20]
 8006aaa:	7afa      	ldrb	r2, [r7, #11]
 8006aac:	4611      	mov	r1, r2
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	4798      	blx	r3
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006ab6:	7dfb      	ldrb	r3, [r7, #23]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d001      	beq.n	8006ac0 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006abc:	7dfb      	ldrb	r3, [r7, #23]
 8006abe:	e000      	b.n	8006ac2 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3718      	adds	r7, #24
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b082      	sub	sp, #8
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d101      	bne.n	8006afe <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006afa:	2303      	movs	r3, #3
 8006afc:	e02f      	b.n	8006b5e <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00f      	beq.n	8006b28 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d009      	beq.n	8006b28 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	6852      	ldr	r2, [r2, #4]
 8006b20:	b2d2      	uxtb	r2, r2
 8006b22:	4611      	mov	r1, r2
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b28:	2340      	movs	r3, #64	; 0x40
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	2100      	movs	r1, #0
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f001 fa49 	bl	8007fc6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2240      	movs	r2, #64	; 0x40
 8006b40:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b44:	2340      	movs	r3, #64	; 0x40
 8006b46:	2200      	movs	r2, #0
 8006b48:	2180      	movs	r1, #128	; 0x80
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f001 fa3b 	bl	8007fc6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2240      	movs	r2, #64	; 0x40
 8006b5a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3708      	adds	r7, #8
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006b66:	b480      	push	{r7}
 8006b68:	b083      	sub	sp, #12
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
 8006b6e:	460b      	mov	r3, r1
 8006b70:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	78fa      	ldrb	r2, [r7, #3]
 8006b76:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	370c      	adds	r7, #12
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006b86:	b480      	push	{r7}
 8006b88:	b083      	sub	sp, #12
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b94:	b2da      	uxtb	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2204      	movs	r2, #4
 8006ba0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	370c      	adds	r7, #12
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr

08006bb2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006bb2:	b480      	push	{r7}
 8006bb4:	b083      	sub	sp, #12
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	2b04      	cmp	r3, #4
 8006bc4:	d106      	bne.n	8006bd4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006bcc:	b2da      	uxtb	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	370c      	adds	r7, #12
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr

08006be2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b082      	sub	sp, #8
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d101      	bne.n	8006bf8 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	e012      	b.n	8006c1e <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	2b03      	cmp	r3, #3
 8006c02:	d10b      	bne.n	8006c1c <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c0a:	69db      	ldr	r3, [r3, #28]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d005      	beq.n	8006c1c <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c16:	69db      	ldr	r3, [r3, #28]
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3708      	adds	r7, #8
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}

08006c26 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b082      	sub	sp, #8
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
 8006c2e:	460b      	mov	r3, r1
 8006c30:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d101      	bne.n	8006c40 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e014      	b.n	8006c6a <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	2b03      	cmp	r3, #3
 8006c4a:	d10d      	bne.n	8006c68 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c52:	6a1b      	ldr	r3, [r3, #32]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d007      	beq.n	8006c68 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c5e:	6a1b      	ldr	r3, [r3, #32]
 8006c60:	78fa      	ldrb	r2, [r7, #3]
 8006c62:	4611      	mov	r1, r2
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3708      	adds	r7, #8
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b082      	sub	sp, #8
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d101      	bne.n	8006c8c <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	e014      	b.n	8006cb6 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b03      	cmp	r3, #3
 8006c96:	d10d      	bne.n	8006cb4 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d007      	beq.n	8006cb4 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cac:	78fa      	ldrb	r2, [r7, #3]
 8006cae:	4611      	mov	r1, r2
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3708      	adds	r7, #8
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006cbe:	b480      	push	{r7}
 8006cc0:	b083      	sub	sp, #12
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b082      	sub	sp, #8
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d009      	beq.n	8006d02 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	6852      	ldr	r2, [r2, #4]
 8006cfa:	b2d2      	uxtb	r2, r2
 8006cfc:	4611      	mov	r1, r2
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	4798      	blx	r3
  }

  return USBD_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3708      	adds	r7, #8
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b087      	sub	sp, #28
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	3301      	adds	r3, #1
 8006d22:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006d2a:	8a3b      	ldrh	r3, [r7, #16]
 8006d2c:	021b      	lsls	r3, r3, #8
 8006d2e:	b21a      	sxth	r2, r3
 8006d30:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	b21b      	sxth	r3, r3
 8006d38:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006d3a:	89fb      	ldrh	r3, [r7, #14]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	371c      	adds	r7, #28
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d52:	2300      	movs	r3, #0
 8006d54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d5e:	2b40      	cmp	r3, #64	; 0x40
 8006d60:	d005      	beq.n	8006d6e <USBD_StdDevReq+0x26>
 8006d62:	2b40      	cmp	r3, #64	; 0x40
 8006d64:	d853      	bhi.n	8006e0e <USBD_StdDevReq+0xc6>
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00b      	beq.n	8006d82 <USBD_StdDevReq+0x3a>
 8006d6a:	2b20      	cmp	r3, #32
 8006d6c:	d14f      	bne.n	8006e0e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	6839      	ldr	r1, [r7, #0]
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	4798      	blx	r3
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d80:	e04a      	b.n	8006e18 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	785b      	ldrb	r3, [r3, #1]
 8006d86:	2b09      	cmp	r3, #9
 8006d88:	d83b      	bhi.n	8006e02 <USBD_StdDevReq+0xba>
 8006d8a:	a201      	add	r2, pc, #4	; (adr r2, 8006d90 <USBD_StdDevReq+0x48>)
 8006d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d90:	08006de5 	.word	0x08006de5
 8006d94:	08006df9 	.word	0x08006df9
 8006d98:	08006e03 	.word	0x08006e03
 8006d9c:	08006def 	.word	0x08006def
 8006da0:	08006e03 	.word	0x08006e03
 8006da4:	08006dc3 	.word	0x08006dc3
 8006da8:	08006db9 	.word	0x08006db9
 8006dac:	08006e03 	.word	0x08006e03
 8006db0:	08006ddb 	.word	0x08006ddb
 8006db4:	08006dcd 	.word	0x08006dcd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006db8:	6839      	ldr	r1, [r7, #0]
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 f9de 	bl	800717c <USBD_GetDescriptor>
          break;
 8006dc0:	e024      	b.n	8006e0c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006dc2:	6839      	ldr	r1, [r7, #0]
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 fb43 	bl	8007450 <USBD_SetAddress>
          break;
 8006dca:	e01f      	b.n	8006e0c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006dcc:	6839      	ldr	r1, [r7, #0]
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 fb82 	bl	80074d8 <USBD_SetConfig>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	73fb      	strb	r3, [r7, #15]
          break;
 8006dd8:	e018      	b.n	8006e0c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006dda:	6839      	ldr	r1, [r7, #0]
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 fc21 	bl	8007624 <USBD_GetConfig>
          break;
 8006de2:	e013      	b.n	8006e0c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006de4:	6839      	ldr	r1, [r7, #0]
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 fc52 	bl	8007690 <USBD_GetStatus>
          break;
 8006dec:	e00e      	b.n	8006e0c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006dee:	6839      	ldr	r1, [r7, #0]
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 fc81 	bl	80076f8 <USBD_SetFeature>
          break;
 8006df6:	e009      	b.n	8006e0c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006df8:	6839      	ldr	r1, [r7, #0]
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fc90 	bl	8007720 <USBD_ClrFeature>
          break;
 8006e00:	e004      	b.n	8006e0c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006e02:	6839      	ldr	r1, [r7, #0]
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 fce7 	bl	80077d8 <USBD_CtlError>
          break;
 8006e0a:	bf00      	nop
      }
      break;
 8006e0c:	e004      	b.n	8006e18 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006e0e:	6839      	ldr	r1, [r7, #0]
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 fce1 	bl	80077d8 <USBD_CtlError>
      break;
 8006e16:	bf00      	nop
  }

  return ret;
 8006e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop

08006e24 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e3a:	2b40      	cmp	r3, #64	; 0x40
 8006e3c:	d005      	beq.n	8006e4a <USBD_StdItfReq+0x26>
 8006e3e:	2b40      	cmp	r3, #64	; 0x40
 8006e40:	d82f      	bhi.n	8006ea2 <USBD_StdItfReq+0x7e>
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d001      	beq.n	8006e4a <USBD_StdItfReq+0x26>
 8006e46:	2b20      	cmp	r3, #32
 8006e48:	d12b      	bne.n	8006ea2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	3b01      	subs	r3, #1
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d81d      	bhi.n	8006e94 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	889b      	ldrh	r3, [r3, #4]
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d813      	bhi.n	8006e8a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	6839      	ldr	r1, [r7, #0]
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	4798      	blx	r3
 8006e70:	4603      	mov	r3, r0
 8006e72:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	88db      	ldrh	r3, [r3, #6]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d110      	bne.n	8006e9e <USBD_StdItfReq+0x7a>
 8006e7c:	7bfb      	ldrb	r3, [r7, #15]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d10d      	bne.n	8006e9e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fd73 	bl	800796e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006e88:	e009      	b.n	8006e9e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006e8a:	6839      	ldr	r1, [r7, #0]
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 fca3 	bl	80077d8 <USBD_CtlError>
          break;
 8006e92:	e004      	b.n	8006e9e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006e94:	6839      	ldr	r1, [r7, #0]
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 fc9e 	bl	80077d8 <USBD_CtlError>
          break;
 8006e9c:	e000      	b.n	8006ea0 <USBD_StdItfReq+0x7c>
          break;
 8006e9e:	bf00      	nop
      }
      break;
 8006ea0:	e004      	b.n	8006eac <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006ea2:	6839      	ldr	r1, [r7, #0]
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 fc97 	bl	80077d8 <USBD_CtlError>
      break;
 8006eaa:	bf00      	nop
  }

  return ret;
 8006eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}

08006eb6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b084      	sub	sp, #16
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
 8006ebe:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	889b      	ldrh	r3, [r3, #4]
 8006ec8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ed2:	2b40      	cmp	r3, #64	; 0x40
 8006ed4:	d007      	beq.n	8006ee6 <USBD_StdEPReq+0x30>
 8006ed6:	2b40      	cmp	r3, #64	; 0x40
 8006ed8:	f200 8145 	bhi.w	8007166 <USBD_StdEPReq+0x2b0>
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00c      	beq.n	8006efa <USBD_StdEPReq+0x44>
 8006ee0:	2b20      	cmp	r3, #32
 8006ee2:	f040 8140 	bne.w	8007166 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	6839      	ldr	r1, [r7, #0]
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	4798      	blx	r3
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ef8:	e13a      	b.n	8007170 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	785b      	ldrb	r3, [r3, #1]
 8006efe:	2b03      	cmp	r3, #3
 8006f00:	d007      	beq.n	8006f12 <USBD_StdEPReq+0x5c>
 8006f02:	2b03      	cmp	r3, #3
 8006f04:	f300 8129 	bgt.w	800715a <USBD_StdEPReq+0x2a4>
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d07f      	beq.n	800700c <USBD_StdEPReq+0x156>
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d03c      	beq.n	8006f8a <USBD_StdEPReq+0xd4>
 8006f10:	e123      	b.n	800715a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	2b02      	cmp	r3, #2
 8006f1c:	d002      	beq.n	8006f24 <USBD_StdEPReq+0x6e>
 8006f1e:	2b03      	cmp	r3, #3
 8006f20:	d016      	beq.n	8006f50 <USBD_StdEPReq+0x9a>
 8006f22:	e02c      	b.n	8006f7e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f24:	7bbb      	ldrb	r3, [r7, #14]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00d      	beq.n	8006f46 <USBD_StdEPReq+0x90>
 8006f2a:	7bbb      	ldrb	r3, [r7, #14]
 8006f2c:	2b80      	cmp	r3, #128	; 0x80
 8006f2e:	d00a      	beq.n	8006f46 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006f30:	7bbb      	ldrb	r3, [r7, #14]
 8006f32:	4619      	mov	r1, r3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f001 f88b 	bl	8008050 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f3a:	2180      	movs	r1, #128	; 0x80
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f001 f887 	bl	8008050 <USBD_LL_StallEP>
 8006f42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006f44:	e020      	b.n	8006f88 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006f46:	6839      	ldr	r1, [r7, #0]
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 fc45 	bl	80077d8 <USBD_CtlError>
              break;
 8006f4e:	e01b      	b.n	8006f88 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	885b      	ldrh	r3, [r3, #2]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d10e      	bne.n	8006f76 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006f58:	7bbb      	ldrb	r3, [r7, #14]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00b      	beq.n	8006f76 <USBD_StdEPReq+0xc0>
 8006f5e:	7bbb      	ldrb	r3, [r7, #14]
 8006f60:	2b80      	cmp	r3, #128	; 0x80
 8006f62:	d008      	beq.n	8006f76 <USBD_StdEPReq+0xc0>
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	88db      	ldrh	r3, [r3, #6]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d104      	bne.n	8006f76 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006f6c:	7bbb      	ldrb	r3, [r7, #14]
 8006f6e:	4619      	mov	r1, r3
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f001 f86d 	bl	8008050 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 fcf9 	bl	800796e <USBD_CtlSendStatus>

              break;
 8006f7c:	e004      	b.n	8006f88 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006f7e:	6839      	ldr	r1, [r7, #0]
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 fc29 	bl	80077d8 <USBD_CtlError>
              break;
 8006f86:	bf00      	nop
          }
          break;
 8006f88:	e0ec      	b.n	8007164 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d002      	beq.n	8006f9c <USBD_StdEPReq+0xe6>
 8006f96:	2b03      	cmp	r3, #3
 8006f98:	d016      	beq.n	8006fc8 <USBD_StdEPReq+0x112>
 8006f9a:	e030      	b.n	8006ffe <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f9c:	7bbb      	ldrb	r3, [r7, #14]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00d      	beq.n	8006fbe <USBD_StdEPReq+0x108>
 8006fa2:	7bbb      	ldrb	r3, [r7, #14]
 8006fa4:	2b80      	cmp	r3, #128	; 0x80
 8006fa6:	d00a      	beq.n	8006fbe <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006fa8:	7bbb      	ldrb	r3, [r7, #14]
 8006faa:	4619      	mov	r1, r3
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f001 f84f 	bl	8008050 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006fb2:	2180      	movs	r1, #128	; 0x80
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f001 f84b 	bl	8008050 <USBD_LL_StallEP>
 8006fba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006fbc:	e025      	b.n	800700a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006fbe:	6839      	ldr	r1, [r7, #0]
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 fc09 	bl	80077d8 <USBD_CtlError>
              break;
 8006fc6:	e020      	b.n	800700a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	885b      	ldrh	r3, [r3, #2]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d11b      	bne.n	8007008 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006fd0:	7bbb      	ldrb	r3, [r7, #14]
 8006fd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d004      	beq.n	8006fe4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006fda:	7bbb      	ldrb	r3, [r7, #14]
 8006fdc:	4619      	mov	r1, r3
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f001 f855 	bl	800808e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 fcc2 	bl	800796e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	6839      	ldr	r1, [r7, #0]
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	4798      	blx	r3
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006ffc:	e004      	b.n	8007008 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006ffe:	6839      	ldr	r1, [r7, #0]
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 fbe9 	bl	80077d8 <USBD_CtlError>
              break;
 8007006:	e000      	b.n	800700a <USBD_StdEPReq+0x154>
              break;
 8007008:	bf00      	nop
          }
          break;
 800700a:	e0ab      	b.n	8007164 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007012:	b2db      	uxtb	r3, r3
 8007014:	2b02      	cmp	r3, #2
 8007016:	d002      	beq.n	800701e <USBD_StdEPReq+0x168>
 8007018:	2b03      	cmp	r3, #3
 800701a:	d032      	beq.n	8007082 <USBD_StdEPReq+0x1cc>
 800701c:	e097      	b.n	800714e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800701e:	7bbb      	ldrb	r3, [r7, #14]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d007      	beq.n	8007034 <USBD_StdEPReq+0x17e>
 8007024:	7bbb      	ldrb	r3, [r7, #14]
 8007026:	2b80      	cmp	r3, #128	; 0x80
 8007028:	d004      	beq.n	8007034 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800702a:	6839      	ldr	r1, [r7, #0]
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 fbd3 	bl	80077d8 <USBD_CtlError>
                break;
 8007032:	e091      	b.n	8007158 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007034:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007038:	2b00      	cmp	r3, #0
 800703a:	da0b      	bge.n	8007054 <USBD_StdEPReq+0x19e>
 800703c:	7bbb      	ldrb	r3, [r7, #14]
 800703e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007042:	4613      	mov	r3, r2
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	4413      	add	r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	3310      	adds	r3, #16
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	4413      	add	r3, r2
 8007050:	3304      	adds	r3, #4
 8007052:	e00b      	b.n	800706c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007054:	7bbb      	ldrb	r3, [r7, #14]
 8007056:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800705a:	4613      	mov	r3, r2
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	4413      	add	r3, r2
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	4413      	add	r3, r2
 800706a:	3304      	adds	r3, #4
 800706c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	2200      	movs	r2, #0
 8007072:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	2202      	movs	r2, #2
 8007078:	4619      	mov	r1, r3
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 fc1d 	bl	80078ba <USBD_CtlSendData>
              break;
 8007080:	e06a      	b.n	8007158 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007082:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007086:	2b00      	cmp	r3, #0
 8007088:	da11      	bge.n	80070ae <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800708a:	7bbb      	ldrb	r3, [r7, #14]
 800708c:	f003 020f 	and.w	r2, r3, #15
 8007090:	6879      	ldr	r1, [r7, #4]
 8007092:	4613      	mov	r3, r2
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	4413      	add	r3, r2
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	440b      	add	r3, r1
 800709c:	3324      	adds	r3, #36	; 0x24
 800709e:	881b      	ldrh	r3, [r3, #0]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d117      	bne.n	80070d4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80070a4:	6839      	ldr	r1, [r7, #0]
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fb96 	bl	80077d8 <USBD_CtlError>
                  break;
 80070ac:	e054      	b.n	8007158 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80070ae:	7bbb      	ldrb	r3, [r7, #14]
 80070b0:	f003 020f 	and.w	r2, r3, #15
 80070b4:	6879      	ldr	r1, [r7, #4]
 80070b6:	4613      	mov	r3, r2
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	4413      	add	r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	440b      	add	r3, r1
 80070c0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80070c4:	881b      	ldrh	r3, [r3, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d104      	bne.n	80070d4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80070ca:	6839      	ldr	r1, [r7, #0]
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 fb83 	bl	80077d8 <USBD_CtlError>
                  break;
 80070d2:	e041      	b.n	8007158 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	da0b      	bge.n	80070f4 <USBD_StdEPReq+0x23e>
 80070dc:	7bbb      	ldrb	r3, [r7, #14]
 80070de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070e2:	4613      	mov	r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	4413      	add	r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	3310      	adds	r3, #16
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	4413      	add	r3, r2
 80070f0:	3304      	adds	r3, #4
 80070f2:	e00b      	b.n	800710c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80070f4:	7bbb      	ldrb	r3, [r7, #14]
 80070f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070fa:	4613      	mov	r3, r2
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	4413      	add	r3, r2
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	4413      	add	r3, r2
 800710a:	3304      	adds	r3, #4
 800710c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800710e:	7bbb      	ldrb	r3, [r7, #14]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d002      	beq.n	800711a <USBD_StdEPReq+0x264>
 8007114:	7bbb      	ldrb	r3, [r7, #14]
 8007116:	2b80      	cmp	r3, #128	; 0x80
 8007118:	d103      	bne.n	8007122 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	2200      	movs	r2, #0
 800711e:	601a      	str	r2, [r3, #0]
 8007120:	e00e      	b.n	8007140 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007122:	7bbb      	ldrb	r3, [r7, #14]
 8007124:	4619      	mov	r1, r3
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 ffd0 	bl	80080cc <USBD_LL_IsStallEP>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d003      	beq.n	800713a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	2201      	movs	r2, #1
 8007136:	601a      	str	r2, [r3, #0]
 8007138:	e002      	b.n	8007140 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	2200      	movs	r2, #0
 800713e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	2202      	movs	r2, #2
 8007144:	4619      	mov	r1, r3
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 fbb7 	bl	80078ba <USBD_CtlSendData>
              break;
 800714c:	e004      	b.n	8007158 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800714e:	6839      	ldr	r1, [r7, #0]
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 fb41 	bl	80077d8 <USBD_CtlError>
              break;
 8007156:	bf00      	nop
          }
          break;
 8007158:	e004      	b.n	8007164 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800715a:	6839      	ldr	r1, [r7, #0]
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 fb3b 	bl	80077d8 <USBD_CtlError>
          break;
 8007162:	bf00      	nop
      }
      break;
 8007164:	e004      	b.n	8007170 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007166:	6839      	ldr	r1, [r7, #0]
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 fb35 	bl	80077d8 <USBD_CtlError>
      break;
 800716e:	bf00      	nop
  }

  return ret;
 8007170:	7bfb      	ldrb	r3, [r7, #15]
}
 8007172:	4618      	mov	r0, r3
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
	...

0800717c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007186:	2300      	movs	r3, #0
 8007188:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800718a:	2300      	movs	r3, #0
 800718c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800718e:	2300      	movs	r3, #0
 8007190:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	885b      	ldrh	r3, [r3, #2]
 8007196:	0a1b      	lsrs	r3, r3, #8
 8007198:	b29b      	uxth	r3, r3
 800719a:	3b01      	subs	r3, #1
 800719c:	2b06      	cmp	r3, #6
 800719e:	f200 8128 	bhi.w	80073f2 <USBD_GetDescriptor+0x276>
 80071a2:	a201      	add	r2, pc, #4	; (adr r2, 80071a8 <USBD_GetDescriptor+0x2c>)
 80071a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a8:	080071c5 	.word	0x080071c5
 80071ac:	080071dd 	.word	0x080071dd
 80071b0:	0800721d 	.word	0x0800721d
 80071b4:	080073f3 	.word	0x080073f3
 80071b8:	080073f3 	.word	0x080073f3
 80071bc:	08007393 	.word	0x08007393
 80071c0:	080073bf 	.word	0x080073bf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	7c12      	ldrb	r2, [r2, #16]
 80071d0:	f107 0108 	add.w	r1, r7, #8
 80071d4:	4610      	mov	r0, r2
 80071d6:	4798      	blx	r3
 80071d8:	60f8      	str	r0, [r7, #12]
      break;
 80071da:	e112      	b.n	8007402 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	7c1b      	ldrb	r3, [r3, #16]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d10d      	bne.n	8007200 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ec:	f107 0208 	add.w	r2, r7, #8
 80071f0:	4610      	mov	r0, r2
 80071f2:	4798      	blx	r3
 80071f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	3301      	adds	r3, #1
 80071fa:	2202      	movs	r2, #2
 80071fc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80071fe:	e100      	b.n	8007402 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007208:	f107 0208 	add.w	r2, r7, #8
 800720c:	4610      	mov	r0, r2
 800720e:	4798      	blx	r3
 8007210:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	3301      	adds	r3, #1
 8007216:	2202      	movs	r2, #2
 8007218:	701a      	strb	r2, [r3, #0]
      break;
 800721a:	e0f2      	b.n	8007402 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	885b      	ldrh	r3, [r3, #2]
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b05      	cmp	r3, #5
 8007224:	f200 80ac 	bhi.w	8007380 <USBD_GetDescriptor+0x204>
 8007228:	a201      	add	r2, pc, #4	; (adr r2, 8007230 <USBD_GetDescriptor+0xb4>)
 800722a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800722e:	bf00      	nop
 8007230:	08007249 	.word	0x08007249
 8007234:	0800727d 	.word	0x0800727d
 8007238:	080072b1 	.word	0x080072b1
 800723c:	080072e5 	.word	0x080072e5
 8007240:	08007319 	.word	0x08007319
 8007244:	0800734d 	.word	0x0800734d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00b      	beq.n	800726c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	7c12      	ldrb	r2, [r2, #16]
 8007260:	f107 0108 	add.w	r1, r7, #8
 8007264:	4610      	mov	r0, r2
 8007266:	4798      	blx	r3
 8007268:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800726a:	e091      	b.n	8007390 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800726c:	6839      	ldr	r1, [r7, #0]
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 fab2 	bl	80077d8 <USBD_CtlError>
            err++;
 8007274:	7afb      	ldrb	r3, [r7, #11]
 8007276:	3301      	adds	r3, #1
 8007278:	72fb      	strb	r3, [r7, #11]
          break;
 800727a:	e089      	b.n	8007390 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00b      	beq.n	80072a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	7c12      	ldrb	r2, [r2, #16]
 8007294:	f107 0108 	add.w	r1, r7, #8
 8007298:	4610      	mov	r0, r2
 800729a:	4798      	blx	r3
 800729c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800729e:	e077      	b.n	8007390 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072a0:	6839      	ldr	r1, [r7, #0]
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fa98 	bl	80077d8 <USBD_CtlError>
            err++;
 80072a8:	7afb      	ldrb	r3, [r7, #11]
 80072aa:	3301      	adds	r3, #1
 80072ac:	72fb      	strb	r3, [r7, #11]
          break;
 80072ae:	e06f      	b.n	8007390 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d00b      	beq.n	80072d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	7c12      	ldrb	r2, [r2, #16]
 80072c8:	f107 0108 	add.w	r1, r7, #8
 80072cc:	4610      	mov	r0, r2
 80072ce:	4798      	blx	r3
 80072d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072d2:	e05d      	b.n	8007390 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072d4:	6839      	ldr	r1, [r7, #0]
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 fa7e 	bl	80077d8 <USBD_CtlError>
            err++;
 80072dc:	7afb      	ldrb	r3, [r7, #11]
 80072de:	3301      	adds	r3, #1
 80072e0:	72fb      	strb	r3, [r7, #11]
          break;
 80072e2:	e055      	b.n	8007390 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00b      	beq.n	8007308 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072f6:	691b      	ldr	r3, [r3, #16]
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	7c12      	ldrb	r2, [r2, #16]
 80072fc:	f107 0108 	add.w	r1, r7, #8
 8007300:	4610      	mov	r0, r2
 8007302:	4798      	blx	r3
 8007304:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007306:	e043      	b.n	8007390 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007308:	6839      	ldr	r1, [r7, #0]
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 fa64 	bl	80077d8 <USBD_CtlError>
            err++;
 8007310:	7afb      	ldrb	r3, [r7, #11]
 8007312:	3301      	adds	r3, #1
 8007314:	72fb      	strb	r3, [r7, #11]
          break;
 8007316:	e03b      	b.n	8007390 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800731e:	695b      	ldr	r3, [r3, #20]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d00b      	beq.n	800733c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800732a:	695b      	ldr	r3, [r3, #20]
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	7c12      	ldrb	r2, [r2, #16]
 8007330:	f107 0108 	add.w	r1, r7, #8
 8007334:	4610      	mov	r0, r2
 8007336:	4798      	blx	r3
 8007338:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800733a:	e029      	b.n	8007390 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800733c:	6839      	ldr	r1, [r7, #0]
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 fa4a 	bl	80077d8 <USBD_CtlError>
            err++;
 8007344:	7afb      	ldrb	r3, [r7, #11]
 8007346:	3301      	adds	r3, #1
 8007348:	72fb      	strb	r3, [r7, #11]
          break;
 800734a:	e021      	b.n	8007390 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00b      	beq.n	8007370 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800735e:	699b      	ldr	r3, [r3, #24]
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	7c12      	ldrb	r2, [r2, #16]
 8007364:	f107 0108 	add.w	r1, r7, #8
 8007368:	4610      	mov	r0, r2
 800736a:	4798      	blx	r3
 800736c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800736e:	e00f      	b.n	8007390 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007370:	6839      	ldr	r1, [r7, #0]
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 fa30 	bl	80077d8 <USBD_CtlError>
            err++;
 8007378:	7afb      	ldrb	r3, [r7, #11]
 800737a:	3301      	adds	r3, #1
 800737c:	72fb      	strb	r3, [r7, #11]
          break;
 800737e:	e007      	b.n	8007390 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007380:	6839      	ldr	r1, [r7, #0]
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 fa28 	bl	80077d8 <USBD_CtlError>
          err++;
 8007388:	7afb      	ldrb	r3, [r7, #11]
 800738a:	3301      	adds	r3, #1
 800738c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800738e:	bf00      	nop
      }
      break;
 8007390:	e037      	b.n	8007402 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	7c1b      	ldrb	r3, [r3, #16]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d109      	bne.n	80073ae <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073a2:	f107 0208 	add.w	r2, r7, #8
 80073a6:	4610      	mov	r0, r2
 80073a8:	4798      	blx	r3
 80073aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80073ac:	e029      	b.n	8007402 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80073ae:	6839      	ldr	r1, [r7, #0]
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 fa11 	bl	80077d8 <USBD_CtlError>
        err++;
 80073b6:	7afb      	ldrb	r3, [r7, #11]
 80073b8:	3301      	adds	r3, #1
 80073ba:	72fb      	strb	r3, [r7, #11]
      break;
 80073bc:	e021      	b.n	8007402 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	7c1b      	ldrb	r3, [r3, #16]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d10d      	bne.n	80073e2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ce:	f107 0208 	add.w	r2, r7, #8
 80073d2:	4610      	mov	r0, r2
 80073d4:	4798      	blx	r3
 80073d6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	3301      	adds	r3, #1
 80073dc:	2207      	movs	r2, #7
 80073de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80073e0:	e00f      	b.n	8007402 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80073e2:	6839      	ldr	r1, [r7, #0]
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 f9f7 	bl	80077d8 <USBD_CtlError>
        err++;
 80073ea:	7afb      	ldrb	r3, [r7, #11]
 80073ec:	3301      	adds	r3, #1
 80073ee:	72fb      	strb	r3, [r7, #11]
      break;
 80073f0:	e007      	b.n	8007402 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80073f2:	6839      	ldr	r1, [r7, #0]
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 f9ef 	bl	80077d8 <USBD_CtlError>
      err++;
 80073fa:	7afb      	ldrb	r3, [r7, #11]
 80073fc:	3301      	adds	r3, #1
 80073fe:	72fb      	strb	r3, [r7, #11]
      break;
 8007400:	bf00      	nop
  }

  if (err != 0U)
 8007402:	7afb      	ldrb	r3, [r7, #11]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d11e      	bne.n	8007446 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	88db      	ldrh	r3, [r3, #6]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d016      	beq.n	800743e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007410:	893b      	ldrh	r3, [r7, #8]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00e      	beq.n	8007434 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	88da      	ldrh	r2, [r3, #6]
 800741a:	893b      	ldrh	r3, [r7, #8]
 800741c:	4293      	cmp	r3, r2
 800741e:	bf28      	it	cs
 8007420:	4613      	movcs	r3, r2
 8007422:	b29b      	uxth	r3, r3
 8007424:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007426:	893b      	ldrh	r3, [r7, #8]
 8007428:	461a      	mov	r2, r3
 800742a:	68f9      	ldr	r1, [r7, #12]
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 fa44 	bl	80078ba <USBD_CtlSendData>
 8007432:	e009      	b.n	8007448 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007434:	6839      	ldr	r1, [r7, #0]
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f9ce 	bl	80077d8 <USBD_CtlError>
 800743c:	e004      	b.n	8007448 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 fa95 	bl	800796e <USBD_CtlSendStatus>
 8007444:	e000      	b.n	8007448 <USBD_GetDescriptor+0x2cc>
    return;
 8007446:	bf00      	nop
  }
}
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop

08007450 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	889b      	ldrh	r3, [r3, #4]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d131      	bne.n	80074c6 <USBD_SetAddress+0x76>
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	88db      	ldrh	r3, [r3, #6]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d12d      	bne.n	80074c6 <USBD_SetAddress+0x76>
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	885b      	ldrh	r3, [r3, #2]
 800746e:	2b7f      	cmp	r3, #127	; 0x7f
 8007470:	d829      	bhi.n	80074c6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	885b      	ldrh	r3, [r3, #2]
 8007476:	b2db      	uxtb	r3, r3
 8007478:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800747c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b03      	cmp	r3, #3
 8007488:	d104      	bne.n	8007494 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800748a:	6839      	ldr	r1, [r7, #0]
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 f9a3 	bl	80077d8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007492:	e01d      	b.n	80074d0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	7bfa      	ldrb	r2, [r7, #15]
 8007498:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800749c:	7bfb      	ldrb	r3, [r7, #15]
 800749e:	4619      	mov	r1, r3
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 fe3f 	bl	8008124 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 fa61 	bl	800796e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80074ac:	7bfb      	ldrb	r3, [r7, #15]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d004      	beq.n	80074bc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2202      	movs	r2, #2
 80074b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074ba:	e009      	b.n	80074d0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074c4:	e004      	b.n	80074d0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80074c6:	6839      	ldr	r1, [r7, #0]
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 f985 	bl	80077d8 <USBD_CtlError>
  }
}
 80074ce:	bf00      	nop
 80074d0:	bf00      	nop
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074e2:	2300      	movs	r3, #0
 80074e4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	885b      	ldrh	r3, [r3, #2]
 80074ea:	b2da      	uxtb	r2, r3
 80074ec:	4b4c      	ldr	r3, [pc, #304]	; (8007620 <USBD_SetConfig+0x148>)
 80074ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80074f0:	4b4b      	ldr	r3, [pc, #300]	; (8007620 <USBD_SetConfig+0x148>)
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d905      	bls.n	8007504 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80074f8:	6839      	ldr	r1, [r7, #0]
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 f96c 	bl	80077d8 <USBD_CtlError>
    return USBD_FAIL;
 8007500:	2303      	movs	r3, #3
 8007502:	e088      	b.n	8007616 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800750a:	b2db      	uxtb	r3, r3
 800750c:	2b02      	cmp	r3, #2
 800750e:	d002      	beq.n	8007516 <USBD_SetConfig+0x3e>
 8007510:	2b03      	cmp	r3, #3
 8007512:	d025      	beq.n	8007560 <USBD_SetConfig+0x88>
 8007514:	e071      	b.n	80075fa <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007516:	4b42      	ldr	r3, [pc, #264]	; (8007620 <USBD_SetConfig+0x148>)
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d01c      	beq.n	8007558 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800751e:	4b40      	ldr	r3, [pc, #256]	; (8007620 <USBD_SetConfig+0x148>)
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	461a      	mov	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007528:	4b3d      	ldr	r3, [pc, #244]	; (8007620 <USBD_SetConfig+0x148>)
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	4619      	mov	r1, r3
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f7ff f949 	bl	80067c6 <USBD_SetClassConfig>
 8007534:	4603      	mov	r3, r0
 8007536:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007538:	7bfb      	ldrb	r3, [r7, #15]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d004      	beq.n	8007548 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800753e:	6839      	ldr	r1, [r7, #0]
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 f949 	bl	80077d8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007546:	e065      	b.n	8007614 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 fa10 	bl	800796e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2203      	movs	r2, #3
 8007552:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007556:	e05d      	b.n	8007614 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 fa08 	bl	800796e <USBD_CtlSendStatus>
      break;
 800755e:	e059      	b.n	8007614 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007560:	4b2f      	ldr	r3, [pc, #188]	; (8007620 <USBD_SetConfig+0x148>)
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d112      	bne.n	800758e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2202      	movs	r2, #2
 800756c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007570:	4b2b      	ldr	r3, [pc, #172]	; (8007620 <USBD_SetConfig+0x148>)
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	461a      	mov	r2, r3
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800757a:	4b29      	ldr	r3, [pc, #164]	; (8007620 <USBD_SetConfig+0x148>)
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	4619      	mov	r1, r3
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f7ff f93c 	bl	80067fe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f9f1 	bl	800796e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800758c:	e042      	b.n	8007614 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800758e:	4b24      	ldr	r3, [pc, #144]	; (8007620 <USBD_SetConfig+0x148>)
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	461a      	mov	r2, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	429a      	cmp	r2, r3
 800759a:	d02a      	beq.n	80075f2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	4619      	mov	r1, r3
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f7ff f92a 	bl	80067fe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80075aa:	4b1d      	ldr	r3, [pc, #116]	; (8007620 <USBD_SetConfig+0x148>)
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	461a      	mov	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80075b4:	4b1a      	ldr	r3, [pc, #104]	; (8007620 <USBD_SetConfig+0x148>)
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	4619      	mov	r1, r3
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f7ff f903 	bl	80067c6 <USBD_SetClassConfig>
 80075c0:	4603      	mov	r3, r0
 80075c2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80075c4:	7bfb      	ldrb	r3, [r7, #15]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00f      	beq.n	80075ea <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80075ca:	6839      	ldr	r1, [r7, #0]
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f903 	bl	80077d8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	4619      	mov	r1, r3
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f7ff f90f 	bl	80067fe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2202      	movs	r2, #2
 80075e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80075e8:	e014      	b.n	8007614 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f9bf 	bl	800796e <USBD_CtlSendStatus>
      break;
 80075f0:	e010      	b.n	8007614 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f9bb 	bl	800796e <USBD_CtlSendStatus>
      break;
 80075f8:	e00c      	b.n	8007614 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80075fa:	6839      	ldr	r1, [r7, #0]
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 f8eb 	bl	80077d8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007602:	4b07      	ldr	r3, [pc, #28]	; (8007620 <USBD_SetConfig+0x148>)
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	4619      	mov	r1, r3
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f7ff f8f8 	bl	80067fe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800760e:	2303      	movs	r3, #3
 8007610:	73fb      	strb	r3, [r7, #15]
      break;
 8007612:	bf00      	nop
  }

  return ret;
 8007614:	7bfb      	ldrb	r3, [r7, #15]
}
 8007616:	4618      	mov	r0, r3
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	2000032c 	.word	0x2000032c

08007624 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	88db      	ldrh	r3, [r3, #6]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d004      	beq.n	8007640 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007636:	6839      	ldr	r1, [r7, #0]
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 f8cd 	bl	80077d8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800763e:	e023      	b.n	8007688 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007646:	b2db      	uxtb	r3, r3
 8007648:	2b02      	cmp	r3, #2
 800764a:	dc02      	bgt.n	8007652 <USBD_GetConfig+0x2e>
 800764c:	2b00      	cmp	r3, #0
 800764e:	dc03      	bgt.n	8007658 <USBD_GetConfig+0x34>
 8007650:	e015      	b.n	800767e <USBD_GetConfig+0x5a>
 8007652:	2b03      	cmp	r3, #3
 8007654:	d00b      	beq.n	800766e <USBD_GetConfig+0x4a>
 8007656:	e012      	b.n	800767e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	3308      	adds	r3, #8
 8007662:	2201      	movs	r2, #1
 8007664:	4619      	mov	r1, r3
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 f927 	bl	80078ba <USBD_CtlSendData>
        break;
 800766c:	e00c      	b.n	8007688 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	3304      	adds	r3, #4
 8007672:	2201      	movs	r2, #1
 8007674:	4619      	mov	r1, r3
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 f91f 	bl	80078ba <USBD_CtlSendData>
        break;
 800767c:	e004      	b.n	8007688 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800767e:	6839      	ldr	r1, [r7, #0]
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 f8a9 	bl	80077d8 <USBD_CtlError>
        break;
 8007686:	bf00      	nop
}
 8007688:	bf00      	nop
 800768a:	3708      	adds	r7, #8
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	3b01      	subs	r3, #1
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d81e      	bhi.n	80076e6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	88db      	ldrh	r3, [r3, #6]
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d004      	beq.n	80076ba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80076b0:	6839      	ldr	r1, [r7, #0]
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 f890 	bl	80077d8 <USBD_CtlError>
        break;
 80076b8:	e01a      	b.n	80076f0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2201      	movs	r2, #1
 80076be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d005      	beq.n	80076d6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	f043 0202 	orr.w	r2, r3, #2
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	330c      	adds	r3, #12
 80076da:	2202      	movs	r2, #2
 80076dc:	4619      	mov	r1, r3
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f8eb 	bl	80078ba <USBD_CtlSendData>
      break;
 80076e4:	e004      	b.n	80076f0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80076e6:	6839      	ldr	r1, [r7, #0]
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 f875 	bl	80077d8 <USBD_CtlError>
      break;
 80076ee:	bf00      	nop
  }
}
 80076f0:	bf00      	nop
 80076f2:	3708      	adds	r7, #8
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	885b      	ldrh	r3, [r3, #2]
 8007706:	2b01      	cmp	r3, #1
 8007708:	d106      	bne.n	8007718 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2201      	movs	r2, #1
 800770e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 f92b 	bl	800796e <USBD_CtlSendStatus>
  }
}
 8007718:	bf00      	nop
 800771a:	3708      	adds	r7, #8
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007730:	b2db      	uxtb	r3, r3
 8007732:	3b01      	subs	r3, #1
 8007734:	2b02      	cmp	r3, #2
 8007736:	d80b      	bhi.n	8007750 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	885b      	ldrh	r3, [r3, #2]
 800773c:	2b01      	cmp	r3, #1
 800773e:	d10c      	bne.n	800775a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 f910 	bl	800796e <USBD_CtlSendStatus>
      }
      break;
 800774e:	e004      	b.n	800775a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007750:	6839      	ldr	r1, [r7, #0]
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f840 	bl	80077d8 <USBD_CtlError>
      break;
 8007758:	e000      	b.n	800775c <USBD_ClrFeature+0x3c>
      break;
 800775a:	bf00      	nop
  }
}
 800775c:	bf00      	nop
 800775e:	3708      	adds	r7, #8
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	781a      	ldrb	r2, [r3, #0]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	3301      	adds	r3, #1
 800777e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	781a      	ldrb	r2, [r3, #0]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	3301      	adds	r3, #1
 800778c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	f7ff fabc 	bl	8006d0c <SWAPBYTE>
 8007794:	4603      	mov	r3, r0
 8007796:	461a      	mov	r2, r3
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	3301      	adds	r3, #1
 80077a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	3301      	adds	r3, #1
 80077a6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f7ff faaf 	bl	8006d0c <SWAPBYTE>
 80077ae:	4603      	mov	r3, r0
 80077b0:	461a      	mov	r2, r3
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	3301      	adds	r3, #1
 80077ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	3301      	adds	r3, #1
 80077c0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f7ff faa2 	bl	8006d0c <SWAPBYTE>
 80077c8:	4603      	mov	r3, r0
 80077ca:	461a      	mov	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	80da      	strh	r2, [r3, #6]
}
 80077d0:	bf00      	nop
 80077d2:	3710      	adds	r7, #16
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80077e2:	2180      	movs	r1, #128	; 0x80
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 fc33 	bl	8008050 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80077ea:	2100      	movs	r1, #0
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fc2f 	bl	8008050 <USBD_LL_StallEP>
}
 80077f2:	bf00      	nop
 80077f4:	3708      	adds	r7, #8
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b086      	sub	sp, #24
 80077fe:	af00      	add	r7, sp, #0
 8007800:	60f8      	str	r0, [r7, #12]
 8007802:	60b9      	str	r1, [r7, #8]
 8007804:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007806:	2300      	movs	r3, #0
 8007808:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d036      	beq.n	800787e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007814:	6938      	ldr	r0, [r7, #16]
 8007816:	f000 f836 	bl	8007886 <USBD_GetLen>
 800781a:	4603      	mov	r3, r0
 800781c:	3301      	adds	r3, #1
 800781e:	b29b      	uxth	r3, r3
 8007820:	005b      	lsls	r3, r3, #1
 8007822:	b29a      	uxth	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007828:	7dfb      	ldrb	r3, [r7, #23]
 800782a:	68ba      	ldr	r2, [r7, #8]
 800782c:	4413      	add	r3, r2
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	7812      	ldrb	r2, [r2, #0]
 8007832:	701a      	strb	r2, [r3, #0]
  idx++;
 8007834:	7dfb      	ldrb	r3, [r7, #23]
 8007836:	3301      	adds	r3, #1
 8007838:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800783a:	7dfb      	ldrb	r3, [r7, #23]
 800783c:	68ba      	ldr	r2, [r7, #8]
 800783e:	4413      	add	r3, r2
 8007840:	2203      	movs	r2, #3
 8007842:	701a      	strb	r2, [r3, #0]
  idx++;
 8007844:	7dfb      	ldrb	r3, [r7, #23]
 8007846:	3301      	adds	r3, #1
 8007848:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800784a:	e013      	b.n	8007874 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800784c:	7dfb      	ldrb	r3, [r7, #23]
 800784e:	68ba      	ldr	r2, [r7, #8]
 8007850:	4413      	add	r3, r2
 8007852:	693a      	ldr	r2, [r7, #16]
 8007854:	7812      	ldrb	r2, [r2, #0]
 8007856:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	3301      	adds	r3, #1
 800785c:	613b      	str	r3, [r7, #16]
    idx++;
 800785e:	7dfb      	ldrb	r3, [r7, #23]
 8007860:	3301      	adds	r3, #1
 8007862:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007864:	7dfb      	ldrb	r3, [r7, #23]
 8007866:	68ba      	ldr	r2, [r7, #8]
 8007868:	4413      	add	r3, r2
 800786a:	2200      	movs	r2, #0
 800786c:	701a      	strb	r2, [r3, #0]
    idx++;
 800786e:	7dfb      	ldrb	r3, [r7, #23]
 8007870:	3301      	adds	r3, #1
 8007872:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1e7      	bne.n	800784c <USBD_GetString+0x52>
 800787c:	e000      	b.n	8007880 <USBD_GetString+0x86>
    return;
 800787e:	bf00      	nop
  }
}
 8007880:	3718      	adds	r7, #24
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007886:	b480      	push	{r7}
 8007888:	b085      	sub	sp, #20
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800788e:	2300      	movs	r3, #0
 8007890:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007896:	e005      	b.n	80078a4 <USBD_GetLen+0x1e>
  {
    len++;
 8007898:	7bfb      	ldrb	r3, [r7, #15]
 800789a:	3301      	adds	r3, #1
 800789c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	3301      	adds	r3, #1
 80078a2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d1f5      	bne.n	8007898 <USBD_GetLen+0x12>
  }

  return len;
 80078ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3714      	adds	r7, #20
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr

080078ba <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b084      	sub	sp, #16
 80078be:	af00      	add	r7, sp, #0
 80078c0:	60f8      	str	r0, [r7, #12]
 80078c2:	60b9      	str	r1, [r7, #8]
 80078c4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2202      	movs	r2, #2
 80078ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	2100      	movs	r1, #0
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f000 fc3e 	bl	8008162 <USBD_LL_Transmit>

  return USBD_OK;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	68ba      	ldr	r2, [r7, #8]
 8007900:	2100      	movs	r1, #0
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f000 fc2d 	bl	8008162 <USBD_LL_Transmit>

  return USBD_OK;
 8007908:	2300      	movs	r3, #0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b084      	sub	sp, #16
 8007916:	af00      	add	r7, sp, #0
 8007918:	60f8      	str	r0, [r7, #12]
 800791a:	60b9      	str	r1, [r7, #8]
 800791c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2203      	movs	r2, #3
 8007922:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	68ba      	ldr	r2, [r7, #8]
 800793a:	2100      	movs	r1, #0
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f000 fc31 	bl	80081a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007942:	2300      	movs	r3, #0
}
 8007944:	4618      	mov	r0, r3
 8007946:	3710      	adds	r7, #16
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	2100      	movs	r1, #0
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f000 fc20 	bl	80081a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3710      	adds	r7, #16
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}

0800796e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800796e:	b580      	push	{r7, lr}
 8007970:	b082      	sub	sp, #8
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2204      	movs	r2, #4
 800797a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800797e:	2300      	movs	r3, #0
 8007980:	2200      	movs	r2, #0
 8007982:	2100      	movs	r1, #0
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 fbec 	bl	8008162 <USBD_LL_Transmit>

  return USBD_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3708      	adds	r7, #8
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2205      	movs	r2, #5
 80079a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80079a4:	2300      	movs	r3, #0
 80079a6:	2200      	movs	r2, #0
 80079a8:	2100      	movs	r1, #0
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 fbfa 	bl	80081a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3708      	adds	r7, #8
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
	...

080079bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80079c0:	2200      	movs	r2, #0
 80079c2:	4912      	ldr	r1, [pc, #72]	; (8007a0c <MX_USB_DEVICE_Init+0x50>)
 80079c4:	4812      	ldr	r0, [pc, #72]	; (8007a10 <MX_USB_DEVICE_Init+0x54>)
 80079c6:	f7fe fe90 	bl	80066ea <USBD_Init>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d001      	beq.n	80079d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80079d0:	f7f9 f818 	bl	8000a04 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 80079d4:	490f      	ldr	r1, [pc, #60]	; (8007a14 <MX_USB_DEVICE_Init+0x58>)
 80079d6:	480e      	ldr	r0, [pc, #56]	; (8007a10 <MX_USB_DEVICE_Init+0x54>)
 80079d8:	f7fe feb7 	bl	800674a <USBD_RegisterClass>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d001      	beq.n	80079e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80079e2:	f7f9 f80f 	bl	8000a04 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80079e6:	490c      	ldr	r1, [pc, #48]	; (8007a18 <MX_USB_DEVICE_Init+0x5c>)
 80079e8:	4809      	ldr	r0, [pc, #36]	; (8007a10 <MX_USB_DEVICE_Init+0x54>)
 80079ea:	f7fe fe69 	bl	80066c0 <USBD_CUSTOM_HID_RegisterInterface>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d001      	beq.n	80079f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80079f4:	f7f9 f806 	bl	8000a04 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80079f8:	4805      	ldr	r0, [pc, #20]	; (8007a10 <MX_USB_DEVICE_Init+0x54>)
 80079fa:	f7fe fecd 	bl	8006798 <USBD_Start>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d001      	beq.n	8007a08 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007a04:	f7f8 fffe 	bl	8000a04 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007a08:	bf00      	nop
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	20000114 	.word	0x20000114
 8007a10:	20000330 	.word	0x20000330
 8007a14:	2000000c 	.word	0x2000000c
 8007a18:	20000104 	.word	0x20000104

08007a1c <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007a20:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8007a30:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	4603      	mov	r3, r0
 8007a44:	460a      	mov	r2, r1
 8007a46:	71fb      	strb	r3, [r7, #7]
 8007a48:	4613      	mov	r3, r2
 8007a4a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 8007a4c:	4803      	ldr	r0, [pc, #12]	; (8007a5c <CUSTOM_HID_OutEvent_FS+0x20>)
 8007a4e:	f7fe fdea 	bl	8006626 <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 8007a52:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3708      	adds	r7, #8
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	20000330 	.word	0x20000330

08007a60 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	4603      	mov	r3, r0
 8007a68:	6039      	str	r1, [r7, #0]
 8007a6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	2212      	movs	r2, #18
 8007a70:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007a72:	4b03      	ldr	r3, [pc, #12]	; (8007a80 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr
 8007a80:	20000130 	.word	0x20000130

08007a84 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	6039      	str	r1, [r7, #0]
 8007a8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	2204      	movs	r2, #4
 8007a94:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007a96:	4b03      	ldr	r3, [pc, #12]	; (8007aa4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr
 8007aa4:	20000144 	.word	0x20000144

08007aa8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	4603      	mov	r3, r0
 8007ab0:	6039      	str	r1, [r7, #0]
 8007ab2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ab4:	79fb      	ldrb	r3, [r7, #7]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d105      	bne.n	8007ac6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007aba:	683a      	ldr	r2, [r7, #0]
 8007abc:	4907      	ldr	r1, [pc, #28]	; (8007adc <USBD_FS_ProductStrDescriptor+0x34>)
 8007abe:	4808      	ldr	r0, [pc, #32]	; (8007ae0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ac0:	f7ff fe9b 	bl	80077fa <USBD_GetString>
 8007ac4:	e004      	b.n	8007ad0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ac6:	683a      	ldr	r2, [r7, #0]
 8007ac8:	4904      	ldr	r1, [pc, #16]	; (8007adc <USBD_FS_ProductStrDescriptor+0x34>)
 8007aca:	4805      	ldr	r0, [pc, #20]	; (8007ae0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007acc:	f7ff fe95 	bl	80077fa <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ad0:	4b02      	ldr	r3, [pc, #8]	; (8007adc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3708      	adds	r7, #8
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	20000600 	.word	0x20000600
 8007ae0:	0800ed18 	.word	0x0800ed18

08007ae4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	4603      	mov	r3, r0
 8007aec:	6039      	str	r1, [r7, #0]
 8007aee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007af0:	683a      	ldr	r2, [r7, #0]
 8007af2:	4904      	ldr	r1, [pc, #16]	; (8007b04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007af4:	4804      	ldr	r0, [pc, #16]	; (8007b08 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007af6:	f7ff fe80 	bl	80077fa <USBD_GetString>
  return USBD_StrDesc;
 8007afa:	4b02      	ldr	r3, [pc, #8]	; (8007b04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3708      	adds	r7, #8
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	20000600 	.word	0x20000600
 8007b08:	0800ed28 	.word	0x0800ed28

08007b0c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	4603      	mov	r3, r0
 8007b14:	6039      	str	r1, [r7, #0]
 8007b16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	221a      	movs	r2, #26
 8007b1c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007b1e:	f000 f843 	bl	8007ba8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007b22:	4b02      	ldr	r3, [pc, #8]	; (8007b2c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3708      	adds	r7, #8
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	20000148 	.word	0x20000148

08007b30 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	4603      	mov	r3, r0
 8007b38:	6039      	str	r1, [r7, #0]
 8007b3a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007b3c:	79fb      	ldrb	r3, [r7, #7]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d105      	bne.n	8007b4e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b42:	683a      	ldr	r2, [r7, #0]
 8007b44:	4907      	ldr	r1, [pc, #28]	; (8007b64 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b46:	4808      	ldr	r0, [pc, #32]	; (8007b68 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b48:	f7ff fe57 	bl	80077fa <USBD_GetString>
 8007b4c:	e004      	b.n	8007b58 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b4e:	683a      	ldr	r2, [r7, #0]
 8007b50:	4904      	ldr	r1, [pc, #16]	; (8007b64 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b52:	4805      	ldr	r0, [pc, #20]	; (8007b68 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b54:	f7ff fe51 	bl	80077fa <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b58:	4b02      	ldr	r3, [pc, #8]	; (8007b64 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3708      	adds	r7, #8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	20000600 	.word	0x20000600
 8007b68:	0800ed30 	.word	0x0800ed30

08007b6c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	4603      	mov	r3, r0
 8007b74:	6039      	str	r1, [r7, #0]
 8007b76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b78:	79fb      	ldrb	r3, [r7, #7]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d105      	bne.n	8007b8a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b7e:	683a      	ldr	r2, [r7, #0]
 8007b80:	4907      	ldr	r1, [pc, #28]	; (8007ba0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b82:	4808      	ldr	r0, [pc, #32]	; (8007ba4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b84:	f7ff fe39 	bl	80077fa <USBD_GetString>
 8007b88:	e004      	b.n	8007b94 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b8a:	683a      	ldr	r2, [r7, #0]
 8007b8c:	4904      	ldr	r1, [pc, #16]	; (8007ba0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b8e:	4805      	ldr	r0, [pc, #20]	; (8007ba4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b90:	f7ff fe33 	bl	80077fa <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b94:	4b02      	ldr	r3, [pc, #8]	; (8007ba0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3708      	adds	r7, #8
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	20000600 	.word	0x20000600
 8007ba4:	0800ed30 	.word	0x0800ed30

08007ba8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007bae:	4b0f      	ldr	r3, [pc, #60]	; (8007bec <Get_SerialNum+0x44>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007bb4:	4b0e      	ldr	r3, [pc, #56]	; (8007bf0 <Get_SerialNum+0x48>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007bba:	4b0e      	ldr	r3, [pc, #56]	; (8007bf4 <Get_SerialNum+0x4c>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d009      	beq.n	8007be2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007bce:	2208      	movs	r2, #8
 8007bd0:	4909      	ldr	r1, [pc, #36]	; (8007bf8 <Get_SerialNum+0x50>)
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f000 f814 	bl	8007c00 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007bd8:	2204      	movs	r2, #4
 8007bda:	4908      	ldr	r1, [pc, #32]	; (8007bfc <Get_SerialNum+0x54>)
 8007bdc:	68b8      	ldr	r0, [r7, #8]
 8007bde:	f000 f80f 	bl	8007c00 <IntToUnicode>
  }
}
 8007be2:	bf00      	nop
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	1fff7a10 	.word	0x1fff7a10
 8007bf0:	1fff7a14 	.word	0x1fff7a14
 8007bf4:	1fff7a18 	.word	0x1fff7a18
 8007bf8:	2000014a 	.word	0x2000014a
 8007bfc:	2000015a 	.word	0x2000015a

08007c00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b087      	sub	sp, #28
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007c12:	2300      	movs	r3, #0
 8007c14:	75fb      	strb	r3, [r7, #23]
 8007c16:	e027      	b.n	8007c68 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	0f1b      	lsrs	r3, r3, #28
 8007c1c:	2b09      	cmp	r3, #9
 8007c1e:	d80b      	bhi.n	8007c38 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	0f1b      	lsrs	r3, r3, #28
 8007c24:	b2da      	uxtb	r2, r3
 8007c26:	7dfb      	ldrb	r3, [r7, #23]
 8007c28:	005b      	lsls	r3, r3, #1
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	440b      	add	r3, r1
 8007c30:	3230      	adds	r2, #48	; 0x30
 8007c32:	b2d2      	uxtb	r2, r2
 8007c34:	701a      	strb	r2, [r3, #0]
 8007c36:	e00a      	b.n	8007c4e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	0f1b      	lsrs	r3, r3, #28
 8007c3c:	b2da      	uxtb	r2, r3
 8007c3e:	7dfb      	ldrb	r3, [r7, #23]
 8007c40:	005b      	lsls	r3, r3, #1
 8007c42:	4619      	mov	r1, r3
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	440b      	add	r3, r1
 8007c48:	3237      	adds	r2, #55	; 0x37
 8007c4a:	b2d2      	uxtb	r2, r2
 8007c4c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	011b      	lsls	r3, r3, #4
 8007c52:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007c54:	7dfb      	ldrb	r3, [r7, #23]
 8007c56:	005b      	lsls	r3, r3, #1
 8007c58:	3301      	adds	r3, #1
 8007c5a:	68ba      	ldr	r2, [r7, #8]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	2200      	movs	r2, #0
 8007c60:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007c62:	7dfb      	ldrb	r3, [r7, #23]
 8007c64:	3301      	adds	r3, #1
 8007c66:	75fb      	strb	r3, [r7, #23]
 8007c68:	7dfa      	ldrb	r2, [r7, #23]
 8007c6a:	79fb      	ldrb	r3, [r7, #7]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d3d3      	bcc.n	8007c18 <IntToUnicode+0x18>
  }
}
 8007c70:	bf00      	nop
 8007c72:	bf00      	nop
 8007c74:	371c      	adds	r7, #28
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr
	...

08007c80 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b08a      	sub	sp, #40	; 0x28
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c88:	f107 0314 	add.w	r3, r7, #20
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	601a      	str	r2, [r3, #0]
 8007c90:	605a      	str	r2, [r3, #4]
 8007c92:	609a      	str	r2, [r3, #8]
 8007c94:	60da      	str	r2, [r3, #12]
 8007c96:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ca0:	d13a      	bne.n	8007d18 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	613b      	str	r3, [r7, #16]
 8007ca6:	4b1e      	ldr	r3, [pc, #120]	; (8007d20 <HAL_PCD_MspInit+0xa0>)
 8007ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007caa:	4a1d      	ldr	r2, [pc, #116]	; (8007d20 <HAL_PCD_MspInit+0xa0>)
 8007cac:	f043 0301 	orr.w	r3, r3, #1
 8007cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8007cb2:	4b1b      	ldr	r3, [pc, #108]	; (8007d20 <HAL_PCD_MspInit+0xa0>)
 8007cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cb6:	f003 0301 	and.w	r3, r3, #1
 8007cba:	613b      	str	r3, [r7, #16]
 8007cbc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007cbe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cc4:	2302      	movs	r3, #2
 8007cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ccc:	2303      	movs	r3, #3
 8007cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007cd0:	230a      	movs	r3, #10
 8007cd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007cd4:	f107 0314 	add.w	r3, r7, #20
 8007cd8:	4619      	mov	r1, r3
 8007cda:	4812      	ldr	r0, [pc, #72]	; (8007d24 <HAL_PCD_MspInit+0xa4>)
 8007cdc:	f7f9 fafa 	bl	80012d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007ce0:	4b0f      	ldr	r3, [pc, #60]	; (8007d20 <HAL_PCD_MspInit+0xa0>)
 8007ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ce4:	4a0e      	ldr	r2, [pc, #56]	; (8007d20 <HAL_PCD_MspInit+0xa0>)
 8007ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cea:	6353      	str	r3, [r2, #52]	; 0x34
 8007cec:	2300      	movs	r3, #0
 8007cee:	60fb      	str	r3, [r7, #12]
 8007cf0:	4b0b      	ldr	r3, [pc, #44]	; (8007d20 <HAL_PCD_MspInit+0xa0>)
 8007cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cf4:	4a0a      	ldr	r2, [pc, #40]	; (8007d20 <HAL_PCD_MspInit+0xa0>)
 8007cf6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007cfa:	6453      	str	r3, [r2, #68]	; 0x44
 8007cfc:	4b08      	ldr	r3, [pc, #32]	; (8007d20 <HAL_PCD_MspInit+0xa0>)
 8007cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d04:	60fb      	str	r3, [r7, #12]
 8007d06:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007d08:	2200      	movs	r2, #0
 8007d0a:	2100      	movs	r1, #0
 8007d0c:	2043      	movs	r0, #67	; 0x43
 8007d0e:	f7f9 fa91 	bl	8001234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007d12:	2043      	movs	r0, #67	; 0x43
 8007d14:	f7f9 faba 	bl	800128c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007d18:	bf00      	nop
 8007d1a:	3728      	adds	r7, #40	; 0x28
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	40023800 	.word	0x40023800
 8007d24:	40020000 	.word	0x40020000

08007d28 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	4610      	mov	r0, r2
 8007d40:	f7fe fd75 	bl	800682e <USBD_LL_SetupStage>
}
 8007d44:	bf00      	nop
 8007d46:	3708      	adds	r7, #8
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	460b      	mov	r3, r1
 8007d56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007d5e:	78fa      	ldrb	r2, [r7, #3]
 8007d60:	6879      	ldr	r1, [r7, #4]
 8007d62:	4613      	mov	r3, r2
 8007d64:	00db      	lsls	r3, r3, #3
 8007d66:	1a9b      	subs	r3, r3, r2
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	440b      	add	r3, r1
 8007d6c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	78fb      	ldrb	r3, [r7, #3]
 8007d74:	4619      	mov	r1, r3
 8007d76:	f7fe fdaf 	bl	80068d8 <USBD_LL_DataOutStage>
}
 8007d7a:	bf00      	nop
 8007d7c:	3708      	adds	r7, #8
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b082      	sub	sp, #8
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007d94:	78fa      	ldrb	r2, [r7, #3]
 8007d96:	6879      	ldr	r1, [r7, #4]
 8007d98:	4613      	mov	r3, r2
 8007d9a:	00db      	lsls	r3, r3, #3
 8007d9c:	1a9b      	subs	r3, r3, r2
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	440b      	add	r3, r1
 8007da2:	3348      	adds	r3, #72	; 0x48
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	78fb      	ldrb	r3, [r7, #3]
 8007da8:	4619      	mov	r1, r3
 8007daa:	f7fe fdf8 	bl	800699e <USBD_LL_DataInStage>
}
 8007dae:	bf00      	nop
 8007db0:	3708      	adds	r7, #8
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b082      	sub	sp, #8
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7fe ff0c 	bl	8006be2 <USBD_LL_SOF>
}
 8007dca:	bf00      	nop
 8007dcc:	3708      	adds	r7, #8
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b084      	sub	sp, #16
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	2b02      	cmp	r3, #2
 8007de4:	d001      	beq.n	8007dea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007de6:	f7f8 fe0d 	bl	8000a04 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007df0:	7bfa      	ldrb	r2, [r7, #15]
 8007df2:	4611      	mov	r1, r2
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7fe feb6 	bl	8006b66 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7fe fe62 	bl	8006aca <USBD_LL_Reset>
}
 8007e06:	bf00      	nop
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
	...

08007e10 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7fe feb1 	bl	8006b86 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	6812      	ldr	r2, [r2, #0]
 8007e32:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007e36:	f043 0301 	orr.w	r3, r3, #1
 8007e3a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6a1b      	ldr	r3, [r3, #32]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d005      	beq.n	8007e50 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e44:	4b04      	ldr	r3, [pc, #16]	; (8007e58 <HAL_PCD_SuspendCallback+0x48>)
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	4a03      	ldr	r2, [pc, #12]	; (8007e58 <HAL_PCD_SuspendCallback+0x48>)
 8007e4a:	f043 0306 	orr.w	r3, r3, #6
 8007e4e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007e50:	bf00      	nop
 8007e52:	3708      	adds	r7, #8
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	e000ed00 	.word	0xe000ed00

08007e5c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7fe fea1 	bl	8006bb2 <USBD_LL_Resume>
}
 8007e70:	bf00      	nop
 8007e72:	3708      	adds	r7, #8
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	460b      	mov	r3, r1
 8007e82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e8a:	78fa      	ldrb	r2, [r7, #3]
 8007e8c:	4611      	mov	r1, r2
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7fe feef 	bl	8006c72 <USBD_LL_IsoOUTIncomplete>
}
 8007e94:	bf00      	nop
 8007e96:	3708      	adds	r7, #8
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007eae:	78fa      	ldrb	r2, [r7, #3]
 8007eb0:	4611      	mov	r1, r2
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7fe feb7 	bl	8006c26 <USBD_LL_IsoINIncomplete>
}
 8007eb8:	bf00      	nop
 8007eba:	3708      	adds	r7, #8
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7fe fef5 	bl	8006cbe <USBD_LL_DevConnected>
}
 8007ed4:	bf00      	nop
 8007ed6:	3708      	adds	r7, #8
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7fe fef2 	bl	8006cd4 <USBD_LL_DevDisconnected>
}
 8007ef0:	bf00      	nop
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d13c      	bne.n	8007f82 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007f08:	4a20      	ldr	r2, [pc, #128]	; (8007f8c <USBD_LL_Init+0x94>)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a1e      	ldr	r2, [pc, #120]	; (8007f8c <USBD_LL_Init+0x94>)
 8007f14:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007f18:	4b1c      	ldr	r3, [pc, #112]	; (8007f8c <USBD_LL_Init+0x94>)
 8007f1a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007f1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007f20:	4b1a      	ldr	r3, [pc, #104]	; (8007f8c <USBD_LL_Init+0x94>)
 8007f22:	2204      	movs	r2, #4
 8007f24:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007f26:	4b19      	ldr	r3, [pc, #100]	; (8007f8c <USBD_LL_Init+0x94>)
 8007f28:	2202      	movs	r2, #2
 8007f2a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007f2c:	4b17      	ldr	r3, [pc, #92]	; (8007f8c <USBD_LL_Init+0x94>)
 8007f2e:	2200      	movs	r2, #0
 8007f30:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007f32:	4b16      	ldr	r3, [pc, #88]	; (8007f8c <USBD_LL_Init+0x94>)
 8007f34:	2202      	movs	r2, #2
 8007f36:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007f38:	4b14      	ldr	r3, [pc, #80]	; (8007f8c <USBD_LL_Init+0x94>)
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007f3e:	4b13      	ldr	r3, [pc, #76]	; (8007f8c <USBD_LL_Init+0x94>)
 8007f40:	2200      	movs	r2, #0
 8007f42:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007f44:	4b11      	ldr	r3, [pc, #68]	; (8007f8c <USBD_LL_Init+0x94>)
 8007f46:	2200      	movs	r2, #0
 8007f48:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007f4a:	4b10      	ldr	r3, [pc, #64]	; (8007f8c <USBD_LL_Init+0x94>)
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007f50:	4b0e      	ldr	r3, [pc, #56]	; (8007f8c <USBD_LL_Init+0x94>)
 8007f52:	2200      	movs	r2, #0
 8007f54:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007f56:	480d      	ldr	r0, [pc, #52]	; (8007f8c <USBD_LL_Init+0x94>)
 8007f58:	f7f9 ffd4 	bl	8001f04 <HAL_PCD_Init>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d001      	beq.n	8007f66 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007f62:	f7f8 fd4f 	bl	8000a04 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007f66:	2180      	movs	r1, #128	; 0x80
 8007f68:	4808      	ldr	r0, [pc, #32]	; (8007f8c <USBD_LL_Init+0x94>)
 8007f6a:	f7fb f924 	bl	80031b6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007f6e:	2240      	movs	r2, #64	; 0x40
 8007f70:	2100      	movs	r1, #0
 8007f72:	4806      	ldr	r0, [pc, #24]	; (8007f8c <USBD_LL_Init+0x94>)
 8007f74:	f7fb f8d8 	bl	8003128 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007f78:	2280      	movs	r2, #128	; 0x80
 8007f7a:	2101      	movs	r1, #1
 8007f7c:	4803      	ldr	r0, [pc, #12]	; (8007f8c <USBD_LL_Init+0x94>)
 8007f7e:	f7fb f8d3 	bl	8003128 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3708      	adds	r7, #8
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	20000640 	.word	0x20000640

08007f90 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7fa f8d4 	bl	8002154 <HAL_PCD_Start>
 8007fac:	4603      	mov	r3, r0
 8007fae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fb0:	7bfb      	ldrb	r3, [r7, #15]
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f000 f930 	bl	8008218 <USBD_Get_USB_Status>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b084      	sub	sp, #16
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
 8007fce:	4608      	mov	r0, r1
 8007fd0:	4611      	mov	r1, r2
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	70fb      	strb	r3, [r7, #3]
 8007fd8:	460b      	mov	r3, r1
 8007fda:	70bb      	strb	r3, [r7, #2]
 8007fdc:	4613      	mov	r3, r2
 8007fde:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007fee:	78bb      	ldrb	r3, [r7, #2]
 8007ff0:	883a      	ldrh	r2, [r7, #0]
 8007ff2:	78f9      	ldrb	r1, [r7, #3]
 8007ff4:	f7fa fcb8 	bl	8002968 <HAL_PCD_EP_Open>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ffc:	7bfb      	ldrb	r3, [r7, #15]
 8007ffe:	4618      	mov	r0, r3
 8008000:	f000 f90a 	bl	8008218 <USBD_Get_USB_Status>
 8008004:	4603      	mov	r3, r0
 8008006:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008008:	7bbb      	ldrb	r3, [r7, #14]
}
 800800a:	4618      	mov	r0, r3
 800800c:	3710      	adds	r7, #16
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b084      	sub	sp, #16
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
 800801a:	460b      	mov	r3, r1
 800801c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800801e:	2300      	movs	r3, #0
 8008020:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008022:	2300      	movs	r3, #0
 8008024:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800802c:	78fa      	ldrb	r2, [r7, #3]
 800802e:	4611      	mov	r1, r2
 8008030:	4618      	mov	r0, r3
 8008032:	f7fa fd01 	bl	8002a38 <HAL_PCD_EP_Close>
 8008036:	4603      	mov	r3, r0
 8008038:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800803a:	7bfb      	ldrb	r3, [r7, #15]
 800803c:	4618      	mov	r0, r3
 800803e:	f000 f8eb 	bl	8008218 <USBD_Get_USB_Status>
 8008042:	4603      	mov	r3, r0
 8008044:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008046:	7bbb      	ldrb	r3, [r7, #14]
}
 8008048:	4618      	mov	r0, r3
 800804a:	3710      	adds	r7, #16
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	460b      	mov	r3, r1
 800805a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800805c:	2300      	movs	r3, #0
 800805e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008060:	2300      	movs	r3, #0
 8008062:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800806a:	78fa      	ldrb	r2, [r7, #3]
 800806c:	4611      	mov	r1, r2
 800806e:	4618      	mov	r0, r3
 8008070:	f7fa fdc1 	bl	8002bf6 <HAL_PCD_EP_SetStall>
 8008074:	4603      	mov	r3, r0
 8008076:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008078:	7bfb      	ldrb	r3, [r7, #15]
 800807a:	4618      	mov	r0, r3
 800807c:	f000 f8cc 	bl	8008218 <USBD_Get_USB_Status>
 8008080:	4603      	mov	r3, r0
 8008082:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008084:	7bbb      	ldrb	r3, [r7, #14]
}
 8008086:	4618      	mov	r0, r3
 8008088:	3710      	adds	r7, #16
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}

0800808e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800808e:	b580      	push	{r7, lr}
 8008090:	b084      	sub	sp, #16
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
 8008096:	460b      	mov	r3, r1
 8008098:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800809a:	2300      	movs	r3, #0
 800809c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800809e:	2300      	movs	r3, #0
 80080a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80080a8:	78fa      	ldrb	r2, [r7, #3]
 80080aa:	4611      	mov	r1, r2
 80080ac:	4618      	mov	r0, r3
 80080ae:	f7fa fe06 	bl	8002cbe <HAL_PCD_EP_ClrStall>
 80080b2:	4603      	mov	r3, r0
 80080b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080b6:	7bfb      	ldrb	r3, [r7, #15]
 80080b8:	4618      	mov	r0, r3
 80080ba:	f000 f8ad 	bl	8008218 <USBD_Get_USB_Status>
 80080be:	4603      	mov	r3, r0
 80080c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3710      	adds	r7, #16
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b085      	sub	sp, #20
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	460b      	mov	r3, r1
 80080d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80080de:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80080e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	da0b      	bge.n	8008100 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80080e8:	78fb      	ldrb	r3, [r7, #3]
 80080ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080ee:	68f9      	ldr	r1, [r7, #12]
 80080f0:	4613      	mov	r3, r2
 80080f2:	00db      	lsls	r3, r3, #3
 80080f4:	1a9b      	subs	r3, r3, r2
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	440b      	add	r3, r1
 80080fa:	333e      	adds	r3, #62	; 0x3e
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	e00b      	b.n	8008118 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008100:	78fb      	ldrb	r3, [r7, #3]
 8008102:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008106:	68f9      	ldr	r1, [r7, #12]
 8008108:	4613      	mov	r3, r2
 800810a:	00db      	lsls	r3, r3, #3
 800810c:	1a9b      	subs	r3, r3, r2
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	440b      	add	r3, r1
 8008112:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008116:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008118:	4618      	mov	r0, r3
 800811a:	3714      	adds	r7, #20
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	460b      	mov	r3, r1
 800812e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008130:	2300      	movs	r3, #0
 8008132:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008134:	2300      	movs	r3, #0
 8008136:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800813e:	78fa      	ldrb	r2, [r7, #3]
 8008140:	4611      	mov	r1, r2
 8008142:	4618      	mov	r0, r3
 8008144:	f7fa fbeb 	bl	800291e <HAL_PCD_SetAddress>
 8008148:	4603      	mov	r3, r0
 800814a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800814c:	7bfb      	ldrb	r3, [r7, #15]
 800814e:	4618      	mov	r0, r3
 8008150:	f000 f862 	bl	8008218 <USBD_Get_USB_Status>
 8008154:	4603      	mov	r3, r0
 8008156:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008158:	7bbb      	ldrb	r3, [r7, #14]
}
 800815a:	4618      	mov	r0, r3
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008162:	b580      	push	{r7, lr}
 8008164:	b086      	sub	sp, #24
 8008166:	af00      	add	r7, sp, #0
 8008168:	60f8      	str	r0, [r7, #12]
 800816a:	607a      	str	r2, [r7, #4]
 800816c:	603b      	str	r3, [r7, #0]
 800816e:	460b      	mov	r3, r1
 8008170:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008172:	2300      	movs	r3, #0
 8008174:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008176:	2300      	movs	r3, #0
 8008178:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008180:	7af9      	ldrb	r1, [r7, #11]
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	f7fa fcec 	bl	8002b62 <HAL_PCD_EP_Transmit>
 800818a:	4603      	mov	r3, r0
 800818c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800818e:	7dfb      	ldrb	r3, [r7, #23]
 8008190:	4618      	mov	r0, r3
 8008192:	f000 f841 	bl	8008218 <USBD_Get_USB_Status>
 8008196:	4603      	mov	r3, r0
 8008198:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800819a:	7dbb      	ldrb	r3, [r7, #22]
}
 800819c:	4618      	mov	r0, r3
 800819e:	3718      	adds	r7, #24
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b086      	sub	sp, #24
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	607a      	str	r2, [r7, #4]
 80081ae:	603b      	str	r3, [r7, #0]
 80081b0:	460b      	mov	r3, r1
 80081b2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081b4:	2300      	movs	r3, #0
 80081b6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081b8:	2300      	movs	r3, #0
 80081ba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80081c2:	7af9      	ldrb	r1, [r7, #11]
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	f7fa fc80 	bl	8002acc <HAL_PCD_EP_Receive>
 80081cc:	4603      	mov	r3, r0
 80081ce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081d0:	7dfb      	ldrb	r3, [r7, #23]
 80081d2:	4618      	mov	r0, r3
 80081d4:	f000 f820 	bl	8008218 <USBD_Get_USB_Status>
 80081d8:	4603      	mov	r3, r0
 80081da:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80081dc:	7dbb      	ldrb	r3, [r7, #22]
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3718      	adds	r7, #24
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
	...

080081e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 80081f0:	4b03      	ldr	r3, [pc, #12]	; (8008200 <USBD_static_malloc+0x18>)
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	370c      	adds	r7, #12
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop
 8008200:	20000a48 	.word	0x20000a48

08008204 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]

}
 800820c:	bf00      	nop
 800820e:	370c      	adds	r7, #12
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008218:	b480      	push	{r7}
 800821a:	b085      	sub	sp, #20
 800821c:	af00      	add	r7, sp, #0
 800821e:	4603      	mov	r3, r0
 8008220:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008222:	2300      	movs	r3, #0
 8008224:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008226:	79fb      	ldrb	r3, [r7, #7]
 8008228:	2b03      	cmp	r3, #3
 800822a:	d817      	bhi.n	800825c <USBD_Get_USB_Status+0x44>
 800822c:	a201      	add	r2, pc, #4	; (adr r2, 8008234 <USBD_Get_USB_Status+0x1c>)
 800822e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008232:	bf00      	nop
 8008234:	08008245 	.word	0x08008245
 8008238:	0800824b 	.word	0x0800824b
 800823c:	08008251 	.word	0x08008251
 8008240:	08008257 	.word	0x08008257
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008244:	2300      	movs	r3, #0
 8008246:	73fb      	strb	r3, [r7, #15]
    break;
 8008248:	e00b      	b.n	8008262 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800824a:	2303      	movs	r3, #3
 800824c:	73fb      	strb	r3, [r7, #15]
    break;
 800824e:	e008      	b.n	8008262 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008250:	2301      	movs	r3, #1
 8008252:	73fb      	strb	r3, [r7, #15]
    break;
 8008254:	e005      	b.n	8008262 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008256:	2303      	movs	r3, #3
 8008258:	73fb      	strb	r3, [r7, #15]
    break;
 800825a:	e002      	b.n	8008262 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800825c:	2303      	movs	r3, #3
 800825e:	73fb      	strb	r3, [r7, #15]
    break;
 8008260:	bf00      	nop
  }
  return usb_status;
 8008262:	7bfb      	ldrb	r3, [r7, #15]
}
 8008264:	4618      	mov	r0, r3
 8008266:	3714      	adds	r7, #20
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <is_adv718x_id_valid>:
#define ADV718X_DRIVE_STR               0xF4 /* Drive strength */
#define ADV718X_IF_COMP_CTRL            0xF8 /* IF comp control */
#define ADV718X_VS_MODE_CTRL            0xF9 /* VS mode control */

static inline int8_t is_adv718x_id_valid(uint8_t id)
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	4603      	mov	r3, r0
 8008278:	71fb      	strb	r3, [r7, #7]
	id &= 0xF0;
 800827a:	79fb      	ldrb	r3, [r7, #7]
 800827c:	f023 030f 	bic.w	r3, r3, #15
 8008280:	71fb      	strb	r3, [r7, #7]
	return (id == ADV718X_ID_7180_B || id == ADV718X_ID_7182_B);
 8008282:	79fb      	ldrb	r3, [r7, #7]
 8008284:	2b10      	cmp	r3, #16
 8008286:	d002      	beq.n	800828e <is_adv718x_id_valid+0x1e>
 8008288:	79fb      	ldrb	r3, [r7, #7]
 800828a:	2b40      	cmp	r3, #64	; 0x40
 800828c:	d101      	bne.n	8008292 <is_adv718x_id_valid+0x22>
 800828e:	2301      	movs	r3, #1
 8008290:	e000      	b.n	8008294 <is_adv718x_id_valid+0x24>
 8008292:	2300      	movs	r3, #0
 8008294:	b25b      	sxtb	r3, r3
}
 8008296:	4618      	mov	r0, r3
 8008298:	370c      	adds	r7, #12
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr

080082a2 <adv718x_check_support>:
extern vatek_result adv718x_chip_open(Padv718x_handle padv);
extern uint8_t adv718x_chip_get_input_type(Padv718x_handle padv);
extern vatek_result adv718x_get_check_status(Padv718x_handle padv,bridge_status* bstatus,Ptv_encoding_param* pvparam);

vatek_result adv718x_check_support()
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	af00      	add	r7, sp, #0
    return hal_i2c_check_device(ADV718X_DEVICE_ADDR);
 80082a6:	2042      	movs	r0, #66	; 0x42
 80082a8:	f004 ff89 	bl	800d1be <hal_i2c_check_device>
 80082ac:	4603      	mov	r3, r0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	bd80      	pop	{r7, pc}
	...

080082b4 <adv718x_open>:

vatek_result adv718x_open(hbridge_source* hsource)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
    vatek_result nres = vatek_memfail;
 80082bc:	f06f 030a 	mvn.w	r3, #10
 80082c0:	60fb      	str	r3, [r7, #12]
    Padv718x_handle newadv = (Padv718x_handle)malloc(sizeof(adv718x_handle));
 80082c2:	200a      	movs	r0, #10
 80082c4:	f005 fe1c 	bl	800df00 <malloc>
 80082c8:	4603      	mov	r3, r0
 80082ca:	60bb      	str	r3, [r7, #8]
    if(newadv)
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d021      	beq.n	8008316 <adv718x_open+0x62>
    {
		memset(newadv,0,sizeof(adv718x_handle));
 80082d2:	220a      	movs	r2, #10
 80082d4:	2100      	movs	r1, #0
 80082d6:	68b8      	ldr	r0, [r7, #8]
 80082d8:	f005 fe30 	bl	800df3c <memset>
		memcpy(&newadv->param,&def_adv718x_param,sizeof(adv718x_param));
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	3304      	adds	r3, #4
 80082e0:	4a0f      	ldr	r2, [pc, #60]	; (8008320 <adv718x_open+0x6c>)
 80082e2:	6810      	ldr	r0, [r2, #0]
 80082e4:	6018      	str	r0, [r3, #0]
 80082e6:	8892      	ldrh	r2, [r2, #4]
 80082e8:	809a      	strh	r2, [r3, #4]
        newadv->input_std = newadv->param.input | (newadv->param.std  << 4);
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	791b      	ldrb	r3, [r3, #4]
 80082ee:	b25a      	sxtb	r2, r3
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	795b      	ldrb	r3, [r3, #5]
 80082f4:	011b      	lsls	r3, r3, #4
 80082f6:	b25b      	sxtb	r3, r3
 80082f8:	4313      	orrs	r3, r2
 80082fa:	b25b      	sxtb	r3, r3
 80082fc:	b2da      	uxtb	r2, r3
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	70da      	strb	r2, [r3, #3]
        nres = adv718x_chip_open(newadv);
 8008302:	68b8      	ldr	r0, [r7, #8]
 8008304:	f000 fa09 	bl	800871a <adv718x_chip_open>
 8008308:	60f8      	str	r0, [r7, #12]
        if(is_vatek_success(nres))*hsource = newadv;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2b00      	cmp	r3, #0
 800830e:	db02      	blt.n	8008316 <adv718x_open+0x62>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	68ba      	ldr	r2, [r7, #8]
 8008314:	601a      	str	r2, [r3, #0]
    }
    return nres;
 8008316:	68fb      	ldr	r3, [r7, #12]
}
 8008318:	4618      	mov	r0, r3
 800831a:	3710      	adds	r7, #16
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}
 8008320:	0800fbd0 	.word	0x0800fbd0

08008324 <adv718x_config>:

vatek_result adv718x_config(hbridge_source hsource,Pbavsource_param param)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
	return vatek_unsupport;
 800832e:	f06f 0301 	mvn.w	r3, #1
}
 8008332:	4618      	mov	r0, r3
 8008334:	370c      	adds	r7, #12
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr

0800833e <adv718x_get_status>:

vatek_result adv718x_get_status(hbridge_source hsource,Pbridge_source pbsourcesttaus)
{
 800833e:	b580      	push	{r7, lr}
 8008340:	b086      	sub	sp, #24
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
 8008346:	6039      	str	r1, [r7, #0]
    vatek_result nres = vatek_success;
 8008348:	2300      	movs	r3, #0
 800834a:	617b      	str	r3, [r7, #20]
    Padv718x_handle padv = (Padv718x_handle)hsource;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	613b      	str	r3, [r7, #16]
    Ptv_encoding_param pstd = NULL;
 8008350:	2300      	movs	r3, #0
 8008352:	60fb      	str	r3, [r7, #12]

    memset(pbsourcesttaus,0,sizeof(bridge_source));
 8008354:	2220      	movs	r2, #32
 8008356:	2100      	movs	r1, #0
 8008358:	6838      	ldr	r0, [r7, #0]
 800835a:	f005 fdef 	bl	800df3c <memset>
    nres = adv718x_get_check_status(padv,&pbsourcesttaus->status,&pstd);
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	f107 020c 	add.w	r2, r7, #12
 8008364:	4619      	mov	r1, r3
 8008366:	6938      	ldr	r0, [r7, #16]
 8008368:	f000 f8c8 	bl	80084fc <adv718x_get_check_status>
 800836c:	6178      	str	r0, [r7, #20]
    if(is_vatek_success(nres))
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	2b00      	cmp	r3, #0
 8008372:	db2a      	blt.n	80083ca <adv718x_get_status+0x8c>
    {
        if(pbsourcesttaus->status >= bstatus_active)
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	f993 3000 	ldrsb.w	r3, [r3]
 800837a:	2b00      	cmp	r3, #0
 800837c:	dd25      	ble.n	80083ca <adv718x_get_status+0x8c>
        {
            pbsourcesttaus->video_info.offset_x = 0;
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	2200      	movs	r2, #0
 8008382:	60da      	str	r2, [r3, #12]
            pbsourcesttaus->video_info.offset_y = 0;
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	2200      	movs	r2, #0
 8008388:	611a      	str	r2, [r3, #16]
            pbsourcesttaus->video_info.pixelclk = 27000;
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	f646 1278 	movw	r2, #27000	; 0x6978
 8008390:	615a      	str	r2, [r3, #20]
            pbsourcesttaus->video_info.resolution = resolution_unknown;
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	22ff      	movs	r2, #255	; 0xff
 8008396:	721a      	strb	r2, [r3, #8]
            pbsourcesttaus->video_info.aspectrate = aspectrate_16_9;
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	2201      	movs	r2, #1
 800839c:	729a      	strb	r2, [r3, #10]
            pbsourcesttaus->video_info.framerate = framerate_unknown;
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	22ff      	movs	r2, #255	; 0xff
 80083a2:	725a      	strb	r2, [r3, #9]
            pbsourcesttaus->video_info.signal_flag = 0; /* embended_sync */
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	2200      	movs	r2, #0
 80083a8:	619a      	str	r2, [r3, #24]
            pbsourcesttaus->video_info.framerate = pstd->framerate;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	725a      	strb	r2, [r3, #9]
            pbsourcesttaus->video_info.resolution = pstd->resolution;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f993 2000 	ldrsb.w	r2, [r3]
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	721a      	strb	r2, [r3, #8]
            pbsourcesttaus->audio_info.channel = channel_stereo;
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	2201      	movs	r2, #1
 80083c2:	775a      	strb	r2, [r3, #29]
            pbsourcesttaus->audio_info.samplerate = sample_rate_48;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	2202      	movs	r2, #2
 80083c8:	771a      	strb	r2, [r3, #28]
        }
    }
    return nres;
 80083ca:	697b      	ldr	r3, [r7, #20]
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3718      	adds	r7, #24
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <adv718x_set_output>:

vatek_result adv718x_set_output(hbridge_source hsource,int32_t isoutput)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b086      	sub	sp, #24
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
    vatek_result nres = vatek_success;
 80083de:	2300      	movs	r3, #0
 80083e0:	617b      	str	r3, [r7, #20]
    Padv718x_handle padv = (Padv718x_handle)hsource;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	613b      	str	r3, [r7, #16]
    if(isoutput)
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d065      	beq.n	80084b8 <adv718x_set_output+0xe4>
    {
        bridge_status bstatus = bstatus_idle;
 80083ec:	2300      	movs	r3, #0
 80083ee:	73fb      	strb	r3, [r7, #15]
        nres = adv718x_get_check_status(padv,&bstatus,NULL);
 80083f0:	f107 030f 	add.w	r3, r7, #15
 80083f4:	2200      	movs	r2, #0
 80083f6:	4619      	mov	r1, r3
 80083f8:	6938      	ldr	r0, [r7, #16]
 80083fa:	f000 f87f 	bl	80084fc <adv718x_get_check_status>
 80083fe:	6178      	str	r0, [r7, #20]
        if(is_vatek_success(nres))
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	2b00      	cmp	r3, #0
 8008404:	db67      	blt.n	80084d6 <adv718x_set_output+0x102>
        {
            if(bstatus < bstatus_active)nres = vatek_badstatus;
 8008406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800840a:	2b00      	cmp	r3, #0
 800840c:	dc03      	bgt.n	8008416 <adv718x_set_output+0x42>
 800840e:	f06f 0304 	mvn.w	r3, #4
 8008412:	617b      	str	r3, [r7, #20]
 8008414:	e05f      	b.n	80084d6 <adv718x_set_output+0x102>
            else 
            {
                nres = adv718x_write_reg(ADV718X_BRIGHTNESS,padv->param.brightnes);
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	799b      	ldrb	r3, [r3, #6]
 800841a:	4619      	mov	r1, r3
 800841c:	200a      	movs	r0, #10
 800841e:	f000 f8e9 	bl	80085f4 <adv718x_write_reg>
 8008422:	6178      	str	r0, [r7, #20]
                if(is_vatek_success(nres))
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	2b00      	cmp	r3, #0
 8008428:	db08      	blt.n	800843c <adv718x_set_output+0x68>
                    nres = adv718x_write_reg(ADV718X_HUE,-padv->param.hue);
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	79db      	ldrb	r3, [r3, #7]
 800842e:	425b      	negs	r3, r3
 8008430:	b2db      	uxtb	r3, r3
 8008432:	4619      	mov	r1, r3
 8008434:	200b      	movs	r0, #11
 8008436:	f000 f8dd 	bl	80085f4 <adv718x_write_reg>
 800843a:	6178      	str	r0, [r7, #20]
                if(is_vatek_success(nres))
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	2b00      	cmp	r3, #0
 8008440:	db06      	blt.n	8008450 <adv718x_set_output+0x7c>
                    nres = adv718x_write_reg(ADV718X_CONTRAST,padv->param.contrast);
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	7a1b      	ldrb	r3, [r3, #8]
 8008446:	4619      	mov	r1, r3
 8008448:	2008      	movs	r0, #8
 800844a:	f000 f8d3 	bl	80085f4 <adv718x_write_reg>
 800844e:	6178      	str	r0, [r7, #20]
                if(is_vatek_success(nres))
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	2b00      	cmp	r3, #0
 8008454:	db06      	blt.n	8008464 <adv718x_set_output+0x90>
                    nres = adv718x_write_reg(ADV718X_CONTRAST,padv->param.contrast);
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	7a1b      	ldrb	r3, [r3, #8]
 800845a:	4619      	mov	r1, r3
 800845c:	2008      	movs	r0, #8
 800845e:	f000 f8c9 	bl	80085f4 <adv718x_write_reg>
 8008462:	6178      	str	r0, [r7, #20]
                if(is_vatek_success(nres))
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	2b00      	cmp	r3, #0
 8008468:	db06      	blt.n	8008478 <adv718x_set_output+0xa4>
                    nres = adv718x_write_reg(ADV718X_SD_SATURATION_CB,padv->param.saturation);
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	7a5b      	ldrb	r3, [r3, #9]
 800846e:	4619      	mov	r1, r3
 8008470:	20e3      	movs	r0, #227	; 0xe3
 8008472:	f000 f8bf 	bl	80085f4 <adv718x_write_reg>
 8008476:	6178      	str	r0, [r7, #20]
                if(is_vatek_success(nres))
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	2b00      	cmp	r3, #0
 800847c:	db06      	blt.n	800848c <adv718x_set_output+0xb8>
                    nres = adv718x_write_reg(ADV718X_SD_SATURATION_CR,padv->param.saturation);
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	7a5b      	ldrb	r3, [r3, #9]
 8008482:	4619      	mov	r1, r3
 8008484:	20e4      	movs	r0, #228	; 0xe4
 8008486:	f000 f8b5 	bl	80085f4 <adv718x_write_reg>
 800848a:	6178      	str	r0, [r7, #20]
                
                if(is_vatek_success(nres))
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	2b00      	cmp	r3, #0
 8008490:	db04      	blt.n	800849c <adv718x_set_output+0xc8>
                    nres = adv718x_write_reg(ADV718X_ADI_CTRL_2,ADV718X_EN_LLC);
 8008492:	2140      	movs	r1, #64	; 0x40
 8008494:	201d      	movs	r0, #29
 8008496:	f000 f8ad 	bl	80085f4 <adv718x_write_reg>
 800849a:	6178      	str	r0, [r7, #20]
                if(is_vatek_success(nres))
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	db19      	blt.n	80084d6 <adv718x_set_output+0x102>
                    nres = adv718x_write_reg(ADV718X_OUT_CTRL,padv->reg_out & 0x0F);
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	785b      	ldrb	r3, [r3, #1]
 80084a6:	f003 030f 	and.w	r3, r3, #15
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	4619      	mov	r1, r3
 80084ae:	2003      	movs	r0, #3
 80084b0:	f000 f8a0 	bl	80085f4 <adv718x_write_reg>
 80084b4:	6178      	str	r0, [r7, #20]
 80084b6:	e00e      	b.n	80084d6 <adv718x_set_output+0x102>
            }
        }
    }else 
    {
        nres = adv718x_write_reg(ADV718X_ADI_CTRL_2,ADV718X_TRI_LLC);
 80084b8:	21c0      	movs	r1, #192	; 0xc0
 80084ba:	201d      	movs	r0, #29
 80084bc:	f000 f89a 	bl	80085f4 <adv718x_write_reg>
 80084c0:	6178      	str	r0, [r7, #20]
        if(is_vatek_success(nres))
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	db06      	blt.n	80084d6 <adv718x_set_output+0x102>
            nres = adv718x_write_reg(ADV718X_OUT_CTRL,padv->reg_out);
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	785b      	ldrb	r3, [r3, #1]
 80084cc:	4619      	mov	r1, r3
 80084ce:	2003      	movs	r0, #3
 80084d0:	f000 f890 	bl	80085f4 <adv718x_write_reg>
 80084d4:	6178      	str	r0, [r7, #20]
    }
    return nres;
 80084d6:	697b      	ldr	r3, [r7, #20]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3718      	adds	r7, #24
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <adv718x_close>:

void adv718x_close(hbridge_source hsource)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
    Padv718x_handle padv = (Padv718x_handle)hsource;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	60fb      	str	r3, [r7, #12]
    free(padv);
 80084ec:	68f8      	ldr	r0, [r7, #12]
 80084ee:	f005 fd0f 	bl	800df10 <free>
}
 80084f2:	bf00      	nop
 80084f4:	3710      	adds	r7, #16
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
	...

080084fc <adv718x_get_check_status>:
extern vatek_result adv7182_select_input(Padv718x_handle padv);
extern vatek_result adv7182_reset_clamp(void);
extern vatek_result adv7182_adj_clamp(uint8_t v0,uint8_t v1);

vatek_result adv718x_get_check_status(Padv718x_handle padv,bridge_status* bstatus,Ptv_encoding_param* pvparam)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b088      	sub	sp, #32
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	607a      	str	r2, [r7, #4]
    uint8_t status0 = 0;
 8008508:	2300      	movs	r3, #0
 800850a:	757b      	strb	r3, [r7, #21]
    vatek_result nres = adv718x_read_req(ADV718X_STATUS_1,&status0);
 800850c:	f107 0315 	add.w	r3, r7, #21
 8008510:	4619      	mov	r1, r3
 8008512:	2010      	movs	r0, #16
 8008514:	f000 f896 	bl	8008644 <adv718x_read_req>
 8008518:	61f8      	str	r0, [r7, #28]
    if(is_vatek_success(nres))
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	2b00      	cmp	r3, #0
 800851e:	db62      	blt.n	80085e6 <adv718x_get_check_status+0xea>
    {
        *bstatus = bstatus_idle;
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	2200      	movs	r2, #0
 8008524:	701a      	strb	r2, [r3, #0]
        if(status0 & ADV718X_STATUS1_IN_LOCK)
 8008526:	7d7b      	ldrb	r3, [r7, #21]
 8008528:	f003 0301 	and.w	r3, r3, #1
 800852c:	2b00      	cmp	r3, #0
 800852e:	d05a      	beq.n	80085e6 <adv718x_get_check_status+0xea>
        {
            uint8_t status3 = 0;
 8008530:	2300      	movs	r3, #0
 8008532:	753b      	strb	r3, [r7, #20]
            nres = adv718x_read_req(ADV718X_STATUS_3,&status3);
 8008534:	f107 0314 	add.w	r3, r7, #20
 8008538:	4619      	mov	r1, r3
 800853a:	2013      	movs	r0, #19
 800853c:	f000 f882 	bl	8008644 <adv718x_read_req>
 8008540:	61f8      	str	r0, [r7, #28]
            status0 = (status0 & ADV718X_STATUS1_AUTOD_MASK) >> 4;
 8008542:	7d7b      	ldrb	r3, [r7, #21]
 8008544:	111b      	asrs	r3, r3, #4
 8008546:	b2db      	uxtb	r3, r3
 8008548:	f003 0307 	and.w	r3, r3, #7
 800854c:	b2db      	uxtb	r3, r3
 800854e:	757b      	strb	r3, [r7, #21]
            
            if(is_vatek_success(nres))
 8008550:	69fb      	ldr	r3, [r7, #28]
 8008552:	2b00      	cmp	r3, #0
 8008554:	db47      	blt.n	80085e6 <adv718x_get_check_status+0xea>
            {
                Ptv_encoding_param pstd = (Ptv_encoding_param)&tv_encoding_spec[status0][0];
 8008556:	7d7b      	ldrb	r3, [r7, #21]
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	4a25      	ldr	r2, [pc, #148]	; (80085f0 <adv718x_get_check_status+0xf4>)
 800855c:	4413      	add	r3, r2
 800855e:	61bb      	str	r3, [r7, #24]
                int8_t is_interlanced = ((status3 & ADV718X_STATUS3_IS_I) != 0);
 8008560:	7d3b      	ldrb	r3, [r7, #20]
 8008562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008566:	2b00      	cmp	r3, #0
 8008568:	bf14      	ite	ne
 800856a:	2301      	movne	r3, #1
 800856c:	2300      	moveq	r3, #0
 800856e:	b2db      	uxtb	r3, r3
 8008570:	75fb      	strb	r3, [r7, #23]
                int8_t is_f50 = ((status3 & ADV718X_STATUS3_50FPS) != 0);
 8008572:	7d3b      	ldrb	r3, [r7, #20]
 8008574:	f003 0304 	and.w	r3, r3, #4
 8008578:	2b00      	cmp	r3, #0
 800857a:	bf14      	ite	ne
 800857c:	2301      	movne	r3, #1
 800857e:	2300      	moveq	r3, #0
 8008580:	b2db      	uxtb	r3, r3
 8008582:	75bb      	strb	r3, [r7, #22]
                if(pstd->framerate == framerate_50 && !is_f50)*bstatus = bstatus_invalid;
 8008584:	69bb      	ldr	r3, [r7, #24]
 8008586:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800858a:	2b05      	cmp	r3, #5
 800858c:	d107      	bne.n	800859e <adv718x_get_check_status+0xa2>
 800858e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d103      	bne.n	800859e <adv718x_get_check_status+0xa2>
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	22fe      	movs	r2, #254	; 0xfe
 800859a:	701a      	strb	r2, [r3, #0]
 800859c:	e023      	b.n	80085e6 <adv718x_get_check_status+0xea>
                else if(pstd->framerate != framerate_50 && is_f50)*bstatus = bstatus_invalid;
 800859e:	69bb      	ldr	r3, [r7, #24]
 80085a0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80085a4:	2b05      	cmp	r3, #5
 80085a6:	d007      	beq.n	80085b8 <adv718x_get_check_status+0xbc>
 80085a8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d003      	beq.n	80085b8 <adv718x_get_check_status+0xbc>
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	22fe      	movs	r2, #254	; 0xfe
 80085b4:	701a      	strb	r2, [r3, #0]
 80085b6:	e016      	b.n	80085e6 <adv718x_get_check_status+0xea>
                else 
                {
                    if(pvparam)*pvparam = (Ptv_encoding_param)&tv_encoding_spec[status0][!is_interlanced];
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d010      	beq.n	80085e0 <adv718x_get_check_status+0xe4>
 80085be:	7d7b      	ldrb	r3, [r7, #21]
 80085c0:	4619      	mov	r1, r3
 80085c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	bf0c      	ite	eq
 80085ca:	2301      	moveq	r3, #1
 80085cc:	2300      	movne	r3, #0
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	461a      	mov	r2, r3
 80085d2:	004b      	lsls	r3, r1, #1
 80085d4:	4413      	add	r3, r2
 80085d6:	005b      	lsls	r3, r3, #1
 80085d8:	4a05      	ldr	r2, [pc, #20]	; (80085f0 <adv718x_get_check_status+0xf4>)
 80085da:	441a      	add	r2, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	601a      	str	r2, [r3, #0]
                    *bstatus = bstatus_active;
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	2201      	movs	r2, #1
 80085e4:	701a      	strb	r2, [r3, #0]
                }
            }  
        }
    }
    return nres;    
 80085e6:	69fb      	ldr	r3, [r7, #28]
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3720      	adds	r7, #32
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	0800fbd8 	.word	0x0800fbd8

080085f4 <adv718x_write_reg>:

vatek_result adv718x_write_reg(uint8_t reg, uint8_t val)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	4603      	mov	r3, r0
 80085fc:	460a      	mov	r2, r1
 80085fe:	71fb      	strb	r3, [r7, #7]
 8008600:	4613      	mov	r3, r2
 8008602:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	vatek_result nres = vatek_success;
 8008604:	2300      	movs	r3, #0
 8008606:	60fb      	str	r3, [r7, #12]
    
    buf[0] = reg;
 8008608:	79fb      	ldrb	r3, [r7, #7]
 800860a:	723b      	strb	r3, [r7, #8]
    buf[1] = val;
 800860c:	79bb      	ldrb	r3, [r7, #6]
 800860e:	727b      	strb	r3, [r7, #9]
    
    nres = hal_i2c_start(ADV718X_SLAVE_WRITE,0);
 8008610:	2100      	movs	r1, #0
 8008612:	2042      	movs	r0, #66	; 0x42
 8008614:	f004 fde1 	bl	800d1da <hal_i2c_start>
 8008618:	60f8      	str	r0, [r7, #12]
	if (is_vatek_success(nres))
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2b00      	cmp	r3, #0
 800861e:	db0c      	blt.n	800863a <adv718x_write_reg+0x46>
	{
		nres = hal_i2c_write(&buf[0], 2);
 8008620:	f107 0308 	add.w	r3, r7, #8
 8008624:	2102      	movs	r1, #2
 8008626:	4618      	mov	r0, r3
 8008628:	f004 fdf3 	bl	800d212 <hal_i2c_write>
 800862c:	60f8      	str	r0, [r7, #12]
		if (is_vatek_success(nres))nres = hal_i2c_stop();
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2b00      	cmp	r3, #0
 8008632:	db02      	blt.n	800863a <adv718x_write_reg+0x46>
 8008634:	f004 fe23 	bl	800d27e <hal_i2c_stop>
 8008638:	60f8      	str	r0, [r7, #12]
	}
    return nres;
 800863a:	68fb      	ldr	r3, [r7, #12]
}
 800863c:	4618      	mov	r0, r3
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <adv718x_read_req>:

vatek_result adv718x_read_req(uint8_t reg, uint8_t* val)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	4603      	mov	r3, r0
 800864c:	6039      	str	r1, [r7, #0]
 800864e:	71fb      	strb	r3, [r7, #7]
    vatek_result nres = hal_i2c_start(ADV718X_SLAVE_WRITE,0);
 8008650:	2100      	movs	r1, #0
 8008652:	2042      	movs	r0, #66	; 0x42
 8008654:	f004 fdc1 	bl	800d1da <hal_i2c_start>
 8008658:	60f8      	str	r0, [r7, #12]
	if (is_vatek_success(nres))nres = hal_i2c_write(&reg, 1);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2b00      	cmp	r3, #0
 800865e:	db05      	blt.n	800866c <adv718x_read_req+0x28>
 8008660:	1dfb      	adds	r3, r7, #7
 8008662:	2101      	movs	r1, #1
 8008664:	4618      	mov	r0, r3
 8008666:	f004 fdd4 	bl	800d212 <hal_i2c_write>
 800866a:	60f8      	str	r0, [r7, #12]
	if (is_vatek_success(nres))
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2b00      	cmp	r3, #0
 8008670:	db12      	blt.n	8008698 <adv718x_read_req+0x54>
	{
		nres = hal_i2c_start(ADV718X_SLAVE_READ,1); /* re-start */
 8008672:	2101      	movs	r1, #1
 8008674:	2043      	movs	r0, #67	; 0x43
 8008676:	f004 fdb0 	bl	800d1da <hal_i2c_start>
 800867a:	60f8      	str	r0, [r7, #12]
		if (is_vatek_success(nres))nres = hal_i2c_read(val, 1);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2b00      	cmp	r3, #0
 8008680:	db04      	blt.n	800868c <adv718x_read_req+0x48>
 8008682:	2101      	movs	r1, #1
 8008684:	6838      	ldr	r0, [r7, #0]
 8008686:	f004 fddf 	bl	800d248 <hal_i2c_read>
 800868a:	60f8      	str	r0, [r7, #12]
        if (is_vatek_success(nres))nres = hal_i2c_stop();
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2b00      	cmp	r3, #0
 8008690:	db02      	blt.n	8008698 <adv718x_read_req+0x54>
 8008692:	f004 fdf4 	bl	800d27e <hal_i2c_stop>
 8008696:	60f8      	str	r0, [r7, #12]
	}
    return nres;
 8008698:	68fb      	ldr	r3, [r7, #12]
}
 800869a:	4618      	mov	r0, r3
 800869c:	3710      	adds	r7, #16
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <adv718x_chip_reset>:

vatek_result adv718x_chip_reset(Padv718x_handle padv)
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b084      	sub	sp, #16
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
    vatek_result nres = adv718x_write_reg(ADV718X_POW_MANAGE,ADV718X_PWR_MAN_RES);
 80086aa:	2180      	movs	r1, #128	; 0x80
 80086ac:	200f      	movs	r0, #15
 80086ae:	f7ff ffa1 	bl	80085f4 <adv718x_write_reg>
 80086b2:	60f8      	str	r0, [r7, #12]
    if(is_vatek_success(nres))
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	db2a      	blt.n	8008710 <adv718x_chip_reset+0x6e>
    {
        hal_system_sleep(10);
 80086ba:	200a      	movs	r0, #10
 80086bc:	f004 fd16 	bl	800d0ec <hal_system_sleep>
        nres = adv718x_read_req(ADV718X_IDENT,&padv->chip_id);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	4619      	mov	r1, r3
 80086c4:	2011      	movs	r0, #17
 80086c6:	f7ff ffbd 	bl	8008644 <adv718x_read_req>
 80086ca:	60f8      	str	r0, [r7, #12]
        if(is_vatek_success(nres))
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	db1e      	blt.n	8008710 <adv718x_chip_reset+0x6e>
        {
            nres = vatek_unsupport;
 80086d2:	f06f 0301 	mvn.w	r3, #1
 80086d6:	60fb      	str	r3, [r7, #12]
            if(is_adv718x_id_valid(padv->chip_id))
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	4618      	mov	r0, r3
 80086de:	f7ff fdc7 	bl	8008270 <is_adv718x_id_valid>
 80086e2:	4603      	mov	r3, r0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d013      	beq.n	8008710 <adv718x_chip_reset+0x6e>
            {
                padv->reg_out = ADV718X_OUT_EMBENDED;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	224c      	movs	r2, #76	; 0x4c
 80086ec:	705a      	strb	r2, [r3, #1]
                padv->reg_ext_out = ADV7180_EXT_OUT_656_4;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	22c5      	movs	r2, #197	; 0xc5
 80086f2:	709a      	strb	r2, [r3, #2]
                /* default output bt656-4 pin */
                if(is_adv_7282(padv))padv->reg_ext_out = ADV7182_EXT_OUT_656_4;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d002      	beq.n	8008706 <adv718x_chip_reset+0x64>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	22b5      	movs	r2, #181	; 0xb5
 8008704:	709a      	strb	r2, [r3, #2]
                nres = adv718x_write_reg(ADV718X_POW_MANAGE,ADV718X_PWR_MAN_ON);
 8008706:	2104      	movs	r1, #4
 8008708:	200f      	movs	r0, #15
 800870a:	f7ff ff73 	bl	80085f4 <adv718x_write_reg>
 800870e:	60f8      	str	r0, [r7, #12]
            }
        }
    }
    return nres;
 8008710:	68fb      	ldr	r3, [r7, #12]
}
 8008712:	4618      	mov	r0, r3
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <adv718x_chip_open>:

vatek_result adv718x_chip_open(Padv718x_handle padv)
{
 800871a:	b580      	push	{r7, lr}
 800871c:	b084      	sub	sp, #16
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
    vatek_result nres = adv718x_chip_reset(padv);
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f7ff ffbd 	bl	80086a2 <adv718x_chip_reset>
 8008728:	60f8      	str	r0, [r7, #12]
    if(is_vatek_success(nres))
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2b00      	cmp	r3, #0
 800872e:	db11      	blt.n	8008754 <adv718x_chip_open+0x3a>
    {
        if(is_adv_7282(padv))
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008738:	2b00      	cmp	r3, #0
 800873a:	d004      	beq.n	8008746 <adv718x_chip_open+0x2c>
        {
            nres = adv7182_select_input(padv);
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 f86d 	bl	800881c <adv7182_select_input>
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	e006      	b.n	8008754 <adv718x_chip_open+0x3a>
        }else nres = adv718x_write_reg(ADV718X_IN_CTRL,padv->input_std);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	78db      	ldrb	r3, [r3, #3]
 800874a:	4619      	mov	r1, r3
 800874c:	2000      	movs	r0, #0
 800874e:	f7ff ff51 	bl	80085f4 <adv718x_write_reg>
 8008752:	60f8      	str	r0, [r7, #12]
    }

    if(is_vatek_success(nres))
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2b00      	cmp	r3, #0
 8008758:	db36      	blt.n	80087c8 <adv718x_chip_open+0xae>
    {
        nres = adv718x_write_reg(ADV718X_OUT_CTRL,padv->reg_out);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	785b      	ldrb	r3, [r3, #1]
 800875e:	4619      	mov	r1, r3
 8008760:	2003      	movs	r0, #3
 8008762:	f7ff ff47 	bl	80085f4 <adv718x_write_reg>
 8008766:	60f8      	str	r0, [r7, #12]
        if(is_vatek_success(nres))nres = adv718x_write_reg(ADV718X_EXT_OUT_CTRL,padv->reg_ext_out);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2b00      	cmp	r3, #0
 800876c:	db06      	blt.n	800877c <adv718x_chip_open+0x62>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	789b      	ldrb	r3, [r3, #2]
 8008772:	4619      	mov	r1, r3
 8008774:	2004      	movs	r0, #4
 8008776:	f7ff ff3d 	bl	80085f4 <adv718x_write_reg>
 800877a:	60f8      	str	r0, [r7, #12]
        //if(is_hal_lite_success(nres))nres = adv718x_write_reg(padv->i2c,ADV718X_VS_FIELD_CTRL_1,0x02);
        if(is_vatek_success(nres))nres = adv718x_write_reg(ADV718X_ADI_CTRL_2,ADV718X_TRI_LLC);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2b00      	cmp	r3, #0
 8008780:	db04      	blt.n	800878c <adv718x_chip_open+0x72>
 8008782:	21c0      	movs	r1, #192	; 0xc0
 8008784:	201d      	movs	r0, #29
 8008786:	f7ff ff35 	bl	80085f4 <adv718x_write_reg>
 800878a:	60f8      	str	r0, [r7, #12]
            
            
        if(is_vatek_success(nres))
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2b00      	cmp	r3, #0
 8008790:	db1a      	blt.n	80087c8 <adv718x_chip_open+0xae>
        {
            if(is_adv_7282(padv))nres = adv718x_write_reg(ADV718X_STATUS_3,0x00);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800879a:	2b00      	cmp	r3, #0
 800879c:	d005      	beq.n	80087aa <adv718x_chip_open+0x90>
 800879e:	2100      	movs	r1, #0
 80087a0:	2013      	movs	r0, #19
 80087a2:	f7ff ff27 	bl	80085f4 <adv718x_write_reg>
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	e00e      	b.n	80087c8 <adv718x_chip_open+0xae>
            else
            {
                nres = adv718x_write_reg(ADV718X_NTSC_V_END,0x4F);
 80087aa:	214f      	movs	r1, #79	; 0x4f
 80087ac:	20e6      	movs	r0, #230	; 0xe6
 80087ae:	f7ff ff21 	bl	80085f4 <adv718x_write_reg>
 80087b2:	60f8      	str	r0, [r7, #12]
                if(is_vatek_success(nres))
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	db06      	blt.n	80087c8 <adv718x_chip_open+0xae>
                nres = adv718x_write_reg(ADV718X_IN_CTRL,padv->input_std);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	78db      	ldrb	r3, [r3, #3]
 80087be:	4619      	mov	r1, r3
 80087c0:	2000      	movs	r0, #0
 80087c2:	f7ff ff17 	bl	80085f4 <adv718x_write_reg>
 80087c6:	60f8      	str	r0, [r7, #12]
            }
        }
    }
    return nres;
 80087c8:	68fb      	ldr	r3, [r7, #12]
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}

080087d2 <adv718x_chip_get_input_type>:

uint8_t adv718x_chip_get_input_type(Padv718x_handle padv)
{
 80087d2:	b480      	push	{r7}
 80087d4:	b085      	sub	sp, #20
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
    uint8_t val = padv->input_std & 0x0F;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	78db      	ldrb	r3, [r3, #3]
 80087de:	f003 030f 	and.w	r3, r3, #15
 80087e2:	73fb      	strb	r3, [r7, #15]
    if(val >= adv718x_in_svideo_ain_1_2 && val <= adv718x_in_svideo_ain_5_6)
 80087e4:	7bfb      	ldrb	r3, [r7, #15]
 80087e6:	2b05      	cmp	r3, #5
 80087e8:	d904      	bls.n	80087f4 <adv718x_chip_get_input_type+0x22>
 80087ea:	7bfb      	ldrb	r3, [r7, #15]
 80087ec:	2b08      	cmp	r3, #8
 80087ee:	d801      	bhi.n	80087f4 <adv718x_chip_get_input_type+0x22>
        return ADV718X_INPUT_TYPE_SVIDEO;
 80087f0:	2301      	movs	r3, #1
 80087f2:	e00d      	b.n	8008810 <adv718x_chip_get_input_type+0x3e>
    else if(val >= adv718x_in_ypbpr_ain_1_2_3 && val <= adv718x_in_ypbpr_ain_4_5_6)
 80087f4:	7bfb      	ldrb	r3, [r7, #15]
 80087f6:	2b08      	cmp	r3, #8
 80087f8:	d904      	bls.n	8008804 <adv718x_chip_get_input_type+0x32>
 80087fa:	7bfb      	ldrb	r3, [r7, #15]
 80087fc:	2b0a      	cmp	r3, #10
 80087fe:	d801      	bhi.n	8008804 <adv718x_chip_get_input_type+0x32>
        return ADV718X_INPUT_TYPE_YPBPR;
 8008800:	2302      	movs	r3, #2
 8008802:	e005      	b.n	8008810 <adv718x_chip_get_input_type+0x3e>
    else if(val > adv718x_in_cvbs_ain_6)
 8008804:	7bfb      	ldrb	r3, [r7, #15]
 8008806:	2b05      	cmp	r3, #5
 8008808:	d901      	bls.n	800880e <adv718x_chip_get_input_type+0x3c>
		return ADV718X_INPUT_TYPE_UNKNOWN;
 800880a:	23ff      	movs	r3, #255	; 0xff
 800880c:	e000      	b.n	8008810 <adv718x_chip_get_input_type+0x3e>
    return ADV718X_INPUT_TYPE_CVBS;
 800880e:	2300      	movs	r3, #0
}
 8008810:	4618      	mov	r0, r3
 8008812:	3714      	adds	r7, #20
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <adv7182_select_input>:

vatek_result adv7182_select_input(Padv718x_handle padv)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b086      	sub	sp, #24
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
        {0xCB, 0x4E, 0x80,},
        {0x0B, 0xCE, 0x80,},
        {0x0B, 0x4E, 0xC0,},
    };
    
    uint8_t type = adv718x_chip_get_input_type(padv);
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f7ff ffd4 	bl	80087d2 <adv718x_chip_get_input_type>
 800882a:	4603      	mov	r3, r0
 800882c:	75fb      	strb	r3, [r7, #23]
	vatek_result nres = vatek_unsupport;
 800882e:	f06f 0301 	mvn.w	r3, #1
 8008832:	613b      	str	r3, [r7, #16]
	if(type != ADV718X_INPUT_TYPE_UNKNOWN)
 8008834:	7dfb      	ldrb	r3, [r7, #23]
 8008836:	2bff      	cmp	r3, #255	; 0xff
 8008838:	d052      	beq.n	80088e0 <adv7182_select_input+0xc4>
	{
		nres = adv718x_write_reg(ADV718X_IN_CTRL,padv->input_std & 0xF);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	78db      	ldrb	r3, [r3, #3]
 800883e:	f003 030f 	and.w	r3, r3, #15
 8008842:	b2db      	uxtb	r3, r3
 8008844:	4619      	mov	r1, r3
 8008846:	2000      	movs	r0, #0
 8008848:	f7ff fed4 	bl	80085f4 <adv718x_write_reg>
 800884c:	6138      	str	r0, [r7, #16]
		if(is_vatek_success(nres))
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	2b00      	cmp	r3, #0
 8008852:	db0e      	blt.n	8008872 <adv7182_select_input+0x56>
			nres = adv718x_write_reg(ADV7182_IN_SEL_2,(padv->input_std & 0xF0) | 0x04);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	78db      	ldrb	r3, [r3, #3]
 8008858:	b25b      	sxtb	r3, r3
 800885a:	f023 030f 	bic.w	r3, r3, #15
 800885e:	b25b      	sxtb	r3, r3
 8008860:	f043 0304 	orr.w	r3, r3, #4
 8008864:	b25b      	sxtb	r3, r3
 8008866:	b2db      	uxtb	r3, r3
 8008868:	4619      	mov	r1, r3
 800886a:	2002      	movs	r0, #2
 800886c:	f7ff fec2 	bl	80085f4 <adv718x_write_reg>
 8008870:	6138      	str	r0, [r7, #16]
		if(is_vatek_success(nres))
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	2b00      	cmp	r3, #0
 8008876:	db02      	blt.n	800887e <adv7182_select_input+0x62>
			nres = adv7182_reset_clamp();
 8008878:	f000 f83a 	bl	80088f0 <adv7182_reset_clamp>
 800887c:	6138      	str	r0, [r7, #16]
						
		if(is_vatek_success(nres))
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	2b00      	cmp	r3, #0
 8008882:	db2d      	blt.n	80088e0 <adv7182_select_input+0xc4>
		{
			uint8_t* plbias = (uint8_t*)&adv7182_lbias_regs[type];                        
 8008884:	7dfa      	ldrb	r2, [r7, #23]
 8008886:	4613      	mov	r3, r2
 8008888:	005b      	lsls	r3, r3, #1
 800888a:	4413      	add	r3, r2
 800888c:	4a17      	ldr	r2, [pc, #92]	; (80088ec <adv7182_select_input+0xd0>)
 800888e:	4413      	add	r3, r2
 8008890:	60fb      	str	r3, [r7, #12]
			for(type = 0;type < 3;type++)
 8008892:	2300      	movs	r3, #0
 8008894:	75fb      	strb	r3, [r7, #23]
 8008896:	e010      	b.n	80088ba <adv7182_select_input+0x9e>
			{
				nres = adv718x_write_reg(ADV7182_CVBS_TRIM + type,plbias[type]);
 8008898:	7dfb      	ldrb	r3, [r7, #23]
 800889a:	3352      	adds	r3, #82	; 0x52
 800889c:	b2d8      	uxtb	r0, r3
 800889e:	7dfb      	ldrb	r3, [r7, #23]
 80088a0:	68fa      	ldr	r2, [r7, #12]
 80088a2:	4413      	add	r3, r2
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	4619      	mov	r1, r3
 80088a8:	f7ff fea4 	bl	80085f4 <adv718x_write_reg>
 80088ac:	6138      	str	r0, [r7, #16]
				if(!is_vatek_success(nres))break;
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	db06      	blt.n	80088c2 <adv7182_select_input+0xa6>
			for(type = 0;type < 3;type++)
 80088b4:	7dfb      	ldrb	r3, [r7, #23]
 80088b6:	3301      	adds	r3, #1
 80088b8:	75fb      	strb	r3, [r7, #23]
 80088ba:	7dfb      	ldrb	r3, [r7, #23]
 80088bc:	2b02      	cmp	r3, #2
 80088be:	d9eb      	bls.n	8008898 <adv7182_select_input+0x7c>
 80088c0:	e000      	b.n	80088c4 <adv7182_select_input+0xa8>
				if(!is_vatek_success(nres))break;
 80088c2:	bf00      	nop
			}
							
			if(type == ADV718X_INPUT_TYPE_CVBS)
 80088c4:	7dfb      	ldrb	r3, [r7, #23]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d105      	bne.n	80088d6 <adv7182_select_input+0xba>
				nres = adv718x_write_reg(ADV718X_SHAP_FILT_CTRL,0x41);
 80088ca:	2141      	movs	r1, #65	; 0x41
 80088cc:	2017      	movs	r0, #23
 80088ce:	f7ff fe91 	bl	80085f4 <adv718x_write_reg>
 80088d2:	6138      	str	r0, [r7, #16]
 80088d4:	e004      	b.n	80088e0 <adv7182_select_input+0xc4>
			else nres = adv718x_write_reg(ADV718X_SHAP_FILT_CTRL,0x01);
 80088d6:	2101      	movs	r1, #1
 80088d8:	2017      	movs	r0, #23
 80088da:	f7ff fe8b 	bl	80085f4 <adv718x_write_reg>
 80088de:	6138      	str	r0, [r7, #16]
					nres = adv7182_adj_clamp(padv->i2c,0x9c,0x00);
			}
			#endif
		} 
	}
    return nres;
 80088e0:	693b      	ldr	r3, [r7, #16]
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3718      	adds	r7, #24
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	0800fbf8 	.word	0x0800fbf8

080088f0 <adv7182_reset_clamp>:

vatek_result adv7182_reset_clamp(void)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
    vatek_result nres = adv718x_write_reg(ADV718X_ADI_CTRL,0x80);
 80088f6:	2180      	movs	r1, #128	; 0x80
 80088f8:	200e      	movs	r0, #14
 80088fa:	f7ff fe7b 	bl	80085f4 <adv718x_write_reg>
 80088fe:	6078      	str	r0, [r7, #4]
    if(is_vatek_success(nres))
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2b00      	cmp	r3, #0
 8008904:	db0f      	blt.n	8008926 <adv7182_reset_clamp+0x36>
    {
        if(is_vatek_success(nres))nres = adv718x_write_reg(ADV7180_REG_RST_CLAMP,0x00);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2b00      	cmp	r3, #0
 800890a:	db04      	blt.n	8008916 <adv7182_reset_clamp+0x26>
 800890c:	2100      	movs	r1, #0
 800890e:	209c      	movs	r0, #156	; 0x9c
 8008910:	f7ff fe70 	bl	80085f4 <adv718x_write_reg>
 8008914:	6078      	str	r0, [r7, #4]
        if(is_vatek_success(nres))nres = adv718x_write_reg(ADV7180_REG_RST_CLAMP,0xFF);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2b00      	cmp	r3, #0
 800891a:	db04      	blt.n	8008926 <adv7182_reset_clamp+0x36>
 800891c:	21ff      	movs	r1, #255	; 0xff
 800891e:	209c      	movs	r0, #156	; 0x9c
 8008920:	f7ff fe68 	bl	80085f4 <adv718x_write_reg>
 8008924:	6078      	str	r0, [r7, #4]
        if(is_hal_lite_success(nres))nres = adv718x_write_reg(pi2c,ADV718X_ADI_CTRL,0x40);
        if(is_hal_lite_success(nres))nres = adv718x_write_reg(pi2c,ADV7180_REG_FLCONTROL,0x01);
    }
    #endif
    
    if(is_vatek_success(nres))nres = adv718x_write_reg(ADV718X_ADI_CTRL,0x00);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2b00      	cmp	r3, #0
 800892a:	db04      	blt.n	8008936 <adv7182_reset_clamp+0x46>
 800892c:	2100      	movs	r1, #0
 800892e:	200e      	movs	r0, #14
 8008930:	f7ff fe60 	bl	80085f4 <adv718x_write_reg>
 8008934:	6078      	str	r0, [r7, #4]
    return nres;
 8008936:	687b      	ldr	r3, [r7, #4]
}
 8008938:	4618      	mov	r0, r3
 800893a:	3708      	adds	r7, #8
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <ep9351_check_support>:
extern vatek_result ep9351_hotplug_in_set(Pep9351_handle pep,int32_t status);

extern vatek_result ep9351_phy_start(Pep9351_handle pep,const uint8_t* edid);

vatek_result ep9351_check_support()
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
	#define EP9555E_SYS_ADDR					        0x68
	
    vatek_result nres = hal_i2c_check_device(EP9555E_SYS_ADDR);
 8008946:	2068      	movs	r0, #104	; 0x68
 8008948:	f004 fc39 	bl	800d1be <hal_i2c_check_device>
 800894c:	6078      	str	r0, [r7, #4]
	if(!is_vatek_success(nres))
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2b00      	cmp	r3, #0
 8008952:	da04      	bge.n	800895e <ep9351_check_support+0x1e>
		nres = hal_i2c_check_device(EP9351_ADDRESS);
 8008954:	2078      	movs	r0, #120	; 0x78
 8008956:	f004 fc32 	bl	800d1be <hal_i2c_check_device>
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	e002      	b.n	8008964 <ep9351_check_support+0x24>
	else nres = vatek_unsupport; //ep9555e
 800895e:	f06f 0301 	mvn.w	r3, #1
 8008962:	607b      	str	r3, [r7, #4]
	return nres;
 8008964:	687b      	ldr	r3, [r7, #4]
}
 8008966:	4618      	mov	r0, r3
 8008968:	3708      	adds	r7, #8
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
	...

08008970 <ep9351_open>:

vatek_result ep9351_open(hbridge_source* hsource)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
    Pep9351_handle newep = (Pep9351_handle)malloc(sizeof(ep9351_handle));
 8008978:	2008      	movs	r0, #8
 800897a:	f005 fac1 	bl	800df00 <malloc>
 800897e:	4603      	mov	r3, r0
 8008980:	60bb      	str	r3, [r7, #8]
    vatek_result nres = vatek_memfail;
 8008982:	f06f 030a 	mvn.w	r3, #10
 8008986:	60fb      	str	r3, [r7, #12]
    if(newep)
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d010      	beq.n	80089b0 <ep9351_open+0x40>
	{
		memset(newep,0,sizeof(ep9351_handle));
 800898e:	2208      	movs	r2, #8
 8008990:	2100      	movs	r1, #0
 8008992:	68b8      	ldr	r0, [r7, #8]
 8008994:	f005 fad2 	bl	800df3c <memset>
		newep->param.baseclk = sbaseclk_1001;
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	2201      	movs	r2, #1
 800899c:	601a      	str	r2, [r3, #0]
		newep->param.pin_hp = -1;
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	f04f 32ff 	mov.w	r2, #4294967295
 80089a4:	605a      	str	r2, [r3, #4]
		nres = ep9351_phy_start(newep,&HDMI_EDID_DEFAULT[0]);
 80089a6:	4905      	ldr	r1, [pc, #20]	; (80089bc <ep9351_open+0x4c>)
 80089a8:	68b8      	ldr	r0, [r7, #8]
 80089aa:	f000 f923 	bl	8008bf4 <ep9351_phy_start>
 80089ae:	60f8      	str	r0, [r7, #12]
	}
    return nres;
 80089b0:	68fb      	ldr	r3, [r7, #12]
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3710      	adds	r7, #16
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}
 80089ba:	bf00      	nop
 80089bc:	0800fc04 	.word	0x0800fc04

080089c0 <ep9351_config>:

vatek_result ep9351_config(hbridge_source hsource,Pbavsource_param param)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b083      	sub	sp, #12
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
	return vatek_unsupport;
 80089ca:	f06f 0301 	mvn.w	r3, #1
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	370c      	adds	r7, #12
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr

080089da <ep9351_get_status>:

vatek_result ep9351_get_status(hbridge_source hsource,Pbridge_source pbsourcesttaus)
{
 80089da:	b580      	push	{r7, lr}
 80089dc:	b08a      	sub	sp, #40	; 0x28
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
 80089e2:	6039      	str	r1, [r7, #0]
    vatek_result nres = vatek_badstatus;
 80089e4:	f06f 0304 	mvn.w	r3, #4
 80089e8:	627b      	str	r3, [r7, #36]	; 0x24
    Pep9351_handle pep = (Pep9351_handle)hsource;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	623b      	str	r3, [r7, #32]
    memset(pbsourcesttaus,0,sizeof(bridge_source));
 80089ee:	2220      	movs	r2, #32
 80089f0:	2100      	movs	r1, #0
 80089f2:	6838      	ldr	r0, [r7, #0]
 80089f4:	f005 faa2 	bl	800df3c <memset>

    nres = ep9351_source_valid(pep,&pbsourcesttaus->status);
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	4619      	mov	r1, r3
 80089fc:	6a38      	ldr	r0, [r7, #32]
 80089fe:	f000 f95f 	bl	8008cc0 <ep9351_source_valid>
 8008a02:	6278      	str	r0, [r7, #36]	; 0x24
    if(is_vatek_success(nres))
 8008a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	db77      	blt.n	8008afa <ep9351_get_status+0x120>
    {
        if(pbsourcesttaus->status >= bstatus_active)
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	f993 3000 	ldrsb.w	r3, [r3]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	dd72      	ble.n	8008afa <ep9351_get_status+0x120>
                {
                    vcode = VINFO_VIDEOCODE(vbuf);
                    nres = ep9351_read(EP9351_TIMING_REGISTERS,&vbuf[0],EP9XXX_VTIME_SIZE);
                }
            #else
                nres = ep9351_read(EP9351_TIMING_REGISTERS,&vbuf[0],EP9XXX_VTIME_SIZE);
 8008a14:	f107 0310 	add.w	r3, r7, #16
 8008a18:	220d      	movs	r2, #13
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	203b      	movs	r0, #59	; 0x3b
 8008a1e:	f000 fa95 	bl	8008f4c <ep9351_read>
 8008a22:	6278      	str	r0, [r7, #36]	; 0x24
            #endif

            if(is_vatek_success(nres))
 8008a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	db31      	blt.n	8008a8e <ep9351_get_status+0xb4>
            {
                Phdmi_video_id pvideo = NULL;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	60fb      	str	r3, [r7, #12]
                #if EP9351_EN_NOTHDMI
                    nres = ep9xxx_get_video_from_timing(&vbuf[0],0xFF,&pvideo);
 8008a2e:	f107 020c 	add.w	r2, r7, #12
 8008a32:	f107 0310 	add.w	r3, r7, #16
 8008a36:	21ff      	movs	r1, #255	; 0xff
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f002 fd07 	bl	800b44c <ep9xxx_get_video_from_timing>
 8008a3e:	6278      	str	r0, [r7, #36]	; 0x24
                #else 
                    nres = ep9xxx_get_video_from_timing(&vbuf[0],vcode,&pvideo);
                #endif
                if(is_vatek_success(nres))
 8008a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	db23      	blt.n	8008a8e <ep9351_get_status+0xb4>
                {        
                    pbsourcesttaus->video_info.resolution = pvideo->resolution;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	721a      	strb	r2, [r3, #8]
                    pbsourcesttaus->video_info.framerate = pvideo->framerate;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	725a      	strb	r2, [r3, #9]
                    pbsourcesttaus->video_info.aspectrate = pvideo->aspectratio;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	729a      	strb	r2, [r3, #10]
                    pbsourcesttaus->video_info.offset_x = 0;
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	2200      	movs	r2, #0
 8008a68:	60da      	str	r2, [r3, #12]
                    pbsourcesttaus->video_info.offset_y = 0;
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	611a      	str	r2, [r3, #16]
                    pbsourcesttaus->video_info.pixelclk = pvideo->pixelclk;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	689a      	ldr	r2, [r3, #8]
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	615a      	str	r2, [r3, #20]
                    pbsourcesttaus->video_info.signal_flag = VI_SEPARATED_SYNC | VI_BUSWIDTH_16;
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	2250      	movs	r2, #80	; 0x50
 8008a7c:	619a      	str	r2, [r3, #24]
                    hdmi_tool_change_base_clock(pep->param.baseclk,&pbsourcesttaus->video_info);
 8008a7e:	6a3b      	ldr	r3, [r7, #32]
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	3308      	adds	r3, #8
 8008a86:	4619      	mov	r1, r3
 8008a88:	4610      	mov	r0, r2
 8008a8a:	f002 fff7 	bl	800ba7c <hdmi_tool_change_base_clock>
                }
            }

            if(is_vatek_success(nres))
 8008a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	db2c      	blt.n	8008aee <ep9351_get_status+0x114>
            {
                uint8_t val = 0;
 8008a94:	2300      	movs	r3, #0
 8008a96:	72fb      	strb	r3, [r7, #11]
                nres = ep9351_read(EP9351_GENERAL_CONTROL_4,&val,1);
 8008a98:	f107 030b 	add.w	r3, r7, #11
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	2044      	movs	r0, #68	; 0x44
 8008aa2:	f000 fa53 	bl	8008f4c <ep9351_read>
 8008aa6:	6278      	str	r0, [r7, #36]	; 0x24
                if(is_vatek_success(nres))
 8008aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	db19      	blt.n	8008ae2 <ep9351_get_status+0x108>
                {  
                    val &= 0x7;
 8008aae:	7afb      	ldrb	r3, [r7, #11]
 8008ab0:	f003 0307 	and.w	r3, r3, #7
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	72fb      	strb	r3, [r7, #11]
                    pbsourcesttaus->audio_info.samplerate = ep9xxx_get_audio_samplerate(val);
 8008ab8:	7afb      	ldrb	r3, [r7, #11]
 8008aba:	4618      	mov	r0, r3
 8008abc:	f002 fe26 	bl	800b70c <ep9xxx_get_audio_samplerate>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	771a      	strb	r2, [r3, #28]
                    if(pbsourcesttaus->audio_info.samplerate != sample_rate_unknown)
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8008ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ad2:	d003      	beq.n	8008adc <ep9351_get_status+0x102>
                        pbsourcesttaus->audio_info.channel = channel_stereo;
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	775a      	strb	r2, [r3, #29]
 8008ada:	e002      	b.n	8008ae2 <ep9351_get_status+0x108>
                    else pbsourcesttaus->audio_info.channel = channel_mute;
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	775a      	strb	r2, [r3, #29]
                }
                if(!is_vatek_success(nres))pbsourcesttaus->status = bstatus_invalid;
 8008ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	da02      	bge.n	8008aee <ep9351_get_status+0x114>
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	22fe      	movs	r2, #254	; 0xfe
 8008aec:	701a      	strb	r2, [r3, #0]
            }

            if(!is_vatek_success(nres))pbsourcesttaus->status = bstatus_invalid;
 8008aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	da02      	bge.n	8008afa <ep9351_get_status+0x120>
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	22fe      	movs	r2, #254	; 0xfe
 8008af8:	701a      	strb	r2, [r3, #0]
        }
    }
    return nres;
 8008afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3728      	adds	r7, #40	; 0x28
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <ep9351_set_output>:

vatek_result ep9351_set_output(hbridge_source hsource,int32_t isoutput)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b088      	sub	sp, #32
 8008b08:	af02      	add	r7, sp, #8
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
    vatek_result nres = vatek_success;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	617b      	str	r3, [r7, #20]
    if(!isoutput)nres = ep9351_write_one(EP9351_GENERAL_CONTROL_1,EP9351_GC_1_IO_DISABLE);
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d105      	bne.n	8008b24 <ep9351_set_output+0x20>
 8008b18:	210f      	movs	r1, #15
 8008b1a:	2041      	movs	r0, #65	; 0x41
 8008b1c:	f000 f9d7 	bl	8008ece <ep9351_write_one>
 8008b20:	6178      	str	r0, [r7, #20]
 8008b22:	e045      	b.n	8008bb0 <ep9351_set_output+0xac>
    else
    {
        bridge_status status = bstatus_idle;
 8008b24:	2300      	movs	r3, #0
 8008b26:	72fb      	strb	r3, [r7, #11]
        Pep9351_handle pep = (Pep9351_handle)hsource;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	60fb      	str	r3, [r7, #12]
        nres = ep9351_source_valid(pep,&status);
 8008b2c:	f107 030b 	add.w	r3, r7, #11
 8008b30:	4619      	mov	r1, r3
 8008b32:	68f8      	ldr	r0, [r7, #12]
 8008b34:	f000 f8c4 	bl	8008cc0 <ep9351_source_valid>
 8008b38:	6178      	str	r0, [r7, #20]
        if(is_vatek_success(nres))
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	db37      	blt.n	8008bb0 <ep9351_set_output+0xac>
        {
            nres = vatek_badstatus;
 8008b40:	f06f 0304 	mvn.w	r3, #4
 8008b44:	617b      	str	r3, [r7, #20]
            if(is_bstatus_active(status))
 8008b46:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	dd30      	ble.n	8008bb0 <ep9351_set_output+0xac>
 8008b4e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008b52:	2b02      	cmp	r3, #2
 8008b54:	dc2c      	bgt.n	8008bb0 <ep9351_set_output+0xac>
            {
                nres = ep9351_source_output_format(pep);
 8008b56:	68f8      	ldr	r0, [r7, #12]
 8008b58:	f000 f936 	bl	8008dc8 <ep9351_source_output_format>
 8008b5c:	6178      	str	r0, [r7, #20]
                if(is_vatek_success(nres))
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	db25      	blt.n	8008bb0 <ep9351_set_output+0xac>
                {
                    uint8_t val = 0;
 8008b64:	2300      	movs	r3, #0
 8008b66:	72bb      	strb	r3, [r7, #10]
                    uint8_t vcfg = 0;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	74fb      	strb	r3, [r7, #19]
                    nres = ep9351_read(EP9351_GENERAL_CONTROL_1,&val,1);
 8008b6c:	f107 030a 	add.w	r3, r7, #10
 8008b70:	2201      	movs	r2, #1
 8008b72:	4619      	mov	r1, r3
 8008b74:	2041      	movs	r0, #65	; 0x41
 8008b76:	f000 f9e9 	bl	8008f4c <ep9351_read>
 8008b7a:	6178      	str	r0, [r7, #20]
                    if(is_vatek_success(nres))
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	db16      	blt.n	8008bb0 <ep9351_set_output+0xac>
                    {
                        if((val & GENERAL_CONTROL_1_V_POL_RW) == 0)vcfg |= GENERAL_CONTROL_1_V_POL_RW;
 8008b82:	7abb      	ldrb	r3, [r7, #10]
 8008b84:	b25b      	sxtb	r3, r3
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	db03      	blt.n	8008b92 <ep9351_set_output+0x8e>
 8008b8a:	7cfb      	ldrb	r3, [r7, #19]
 8008b8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b90:	74fb      	strb	r3, [r7, #19]
                        if(val & GENERAL_CONTROL_1_H_POL_RW)vcfg |= GENERAL_CONTROL_1_H_POL_RW;
 8008b92:	7abb      	ldrb	r3, [r7, #10]
 8008b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d003      	beq.n	8008ba4 <ep9351_set_output+0xa0>
 8008b9c:	7cfb      	ldrb	r3, [r7, #19]
 8008b9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ba2:	74fb      	strb	r3, [r7, #19]
                        nres = ep9351_write_one(EP9351_GENERAL_CONTROL_1,vcfg);
 8008ba4:	7cfb      	ldrb	r3, [r7, #19]
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	2041      	movs	r0, #65	; 0x41
 8008baa:	f000 f990 	bl	8008ece <ep9351_write_one>
 8008bae:	6178      	str	r0, [r7, #20]
                }
            }
        } 
    }
    
    if(!is_vatek_success(nres))
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	da07      	bge.n	8008bc6 <ep9351_set_output+0xc2>
        _HAL_ERR(ep9351,"set output fail : %d - %d",nres,isoutput);
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	9300      	str	r3, [sp, #0]
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	4a04      	ldr	r2, [pc, #16]	; (8008bd0 <ep9351_set_output+0xcc>)
 8008bbe:	4905      	ldr	r1, [pc, #20]	; (8008bd4 <ep9351_set_output+0xd0>)
 8008bc0:	2002      	movs	r0, #2
 8008bc2:	f002 fdef 	bl	800b7a4 <vatek_debug_print>
    return nres;
 8008bc6:	697b      	ldr	r3, [r7, #20]
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3718      	adds	r7, #24
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	0800ed44 	.word	0x0800ed44
 8008bd4:	0800ed78 	.word	0x0800ed78

08008bd8 <ep9351_close>:

void ep9351_close(hbridge_source hsource)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
    Pep9351_handle pep = (Pep9351_handle)hsource;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	60fb      	str	r3, [r7, #12]
    free(pep);
 8008be4:	68f8      	ldr	r0, [r7, #12]
 8008be6:	f005 f993 	bl	800df10 <free>
}
 8008bea:	bf00      	nop
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
	...

08008bf4 <ep9351_phy_start>:

vatek_result ep9351_phy_start(Pep9351_handle pep,const uint8_t* edid)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
    #define GC_0_NORMAL         (GENEROL_CONTROL_0_DDC_DIS)
    #define GC_0_RESET          (GENEROL_CONTROL_0_HDCP_RST | GENEROL_CONTROL_0_DDC_DIS | GENEROL_CONTROL_0_RST)
    #define GC_0_POWERDOWN      (GC_0_NORMAL | GENEROL_CONTROL_0_PWR_DWN | GENEROL_CONTROL_0_DE_RST)
    
    vatek_result nres = ep9351_write_one(EP9351_GENERAL_CONTROL_0,GC_0_RESET);
 8008bfe:	2158      	movs	r1, #88	; 0x58
 8008c00:	2040      	movs	r0, #64	; 0x40
 8008c02:	f000 f964 	bl	8008ece <ep9351_write_one>
 8008c06:	60f8      	str	r0, [r7, #12]
    if(is_vatek_success(nres))nres = ep9351_write_one(EP9351_GENERAL_CONTROL_0,GC_0_NORMAL);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	db04      	blt.n	8008c18 <ep9351_phy_start+0x24>
 8008c0e:	2140      	movs	r1, #64	; 0x40
 8008c10:	2040      	movs	r0, #64	; 0x40
 8008c12:	f000 f95c 	bl	8008ece <ep9351_write_one>
 8008c16:	60f8      	str	r0, [r7, #12]
    if(is_vatek_success(nres))
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	db3c      	blt.n	8008c98 <ep9351_phy_start+0xa4>
    {
        nres = ep9351_write_one(EP9351_GENERAL_CONTROL_0,GC_0_POWERDOWN);
 8008c1e:	2164      	movs	r1, #100	; 0x64
 8008c20:	2040      	movs	r0, #64	; 0x40
 8008c22:	f000 f954 	bl	8008ece <ep9351_write_one>
 8008c26:	60f8      	str	r0, [r7, #12]
        if(is_vatek_success(nres))
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	db25      	blt.n	8008c7a <ep9351_phy_start+0x86>
        {
            nres = ep9351_write(EP9351_EDID_DATA_REGISTER,edid,HDMI_EDID_LEN);
 8008c2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c32:	6839      	ldr	r1, [r7, #0]
 8008c34:	20ff      	movs	r0, #255	; 0xff
 8008c36:	f000 f960 	bl	8008efa <ep9351_write>
 8008c3a:	60f8      	str	r0, [r7, #12]
                        }
                        if(!is_vatek_success(nres))_HAL_ERR(ep9351,"check edid fail : %d",i);
                    }else _HAL_ERR(ep9351,"read edid fail : %d",nres);
                }
            #endif
            if(is_vatek_success(nres))
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	db1b      	blt.n	8008c7a <ep9351_phy_start+0x86>
            {
                nres = ep9351_write_one(EP9351_GENERAL_CONTROL_0,GENEROL_CONTROL_0_ON_CHIP_EDID);
 8008c42:	2102      	movs	r1, #2
 8008c44:	2040      	movs	r0, #64	; 0x40
 8008c46:	f000 f942 	bl	8008ece <ep9351_write_one>
 8008c4a:	60f8      	str	r0, [r7, #12]
                if(is_vatek_success(nres))ep9351_write_one(EP9351_GENERAL_CONTROL_4,GENERAL_CONTROL_4_LNK_ON_RST);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	db03      	blt.n	8008c5a <ep9351_phy_start+0x66>
 8008c52:	2180      	movs	r1, #128	; 0x80
 8008c54:	2044      	movs	r0, #68	; 0x44
 8008c56:	f000 f93a 	bl	8008ece <ep9351_write_one>
                if(is_vatek_success(nres))nres = ep9351_hotplug_in_set(pep,1);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	db04      	blt.n	8008c6a <ep9351_phy_start+0x76>
 8008c60:	2101      	movs	r1, #1
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 f91b 	bl	8008e9e <ep9351_hotplug_in_set>
 8008c68:	60f8      	str	r0, [r7, #12]
                if(is_vatek_success(nres))nres = ep9351_set_output(pep,0);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	db04      	blt.n	8008c7a <ep9351_phy_start+0x86>
 8008c70:	2100      	movs	r1, #0
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f7ff ff46 	bl	8008b04 <ep9351_set_output>
 8008c78:	60f8      	str	r0, [r7, #12]
            }
        }
        
        
        if(!is_vatek_success(nres))_HAL_ERR(ep9351,"download edid fail : %d",nres);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	da06      	bge.n	8008c8e <ep9351_phy_start+0x9a>
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	4a0c      	ldr	r2, [pc, #48]	; (8008cb4 <ep9351_phy_start+0xc0>)
 8008c84:	490c      	ldr	r1, [pc, #48]	; (8008cb8 <ep9351_phy_start+0xc4>)
 8008c86:	2002      	movs	r0, #2
 8008c88:	f002 fd8c 	bl	800b7a4 <vatek_debug_print>
 8008c8c:	e004      	b.n	8008c98 <ep9351_phy_start+0xa4>
        else nres = ep9351_write_one(EP9351_GENERAL_CONTROL_0,GENEROL_CONTROL_0_ON_CHIP_EDID);
 8008c8e:	2102      	movs	r1, #2
 8008c90:	2040      	movs	r0, #64	; 0x40
 8008c92:	f000 f91c 	bl	8008ece <ep9351_write_one>
 8008c96:	60f8      	str	r0, [r7, #12]
    }
    
    if(!is_vatek_success(nres))_HAL_ERR(ep9351,"reset chip fail : %d",nres);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	da05      	bge.n	8008caa <ep9351_phy_start+0xb6>
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	4a04      	ldr	r2, [pc, #16]	; (8008cb4 <ep9351_phy_start+0xc0>)
 8008ca2:	4906      	ldr	r1, [pc, #24]	; (8008cbc <ep9351_phy_start+0xc8>)
 8008ca4:	2002      	movs	r0, #2
 8008ca6:	f002 fd7d 	bl	800b7a4 <vatek_debug_print>
    
    return nres;
 8008caa:	68fb      	ldr	r3, [r7, #12]
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	0800ed44 	.word	0x0800ed44
 8008cb8:	0800ed9c 	.word	0x0800ed9c
 8008cbc:	0800edbc 	.word	0x0800edbc

08008cc0 <ep9351_source_valid>:

vatek_result ep9351_source_valid(Pep9351_handle pep,bridge_status* status)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b084      	sub	sp, #16
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
    uint8_t status0,status1;
    static uint32_t reset_invalid_source = 0;
    vatek_result nres = ep9351_read(EP9351_STATUS_REGISTER_1,&status1,1);
 8008cca:	f107 030a 	add.w	r3, r7, #10
 8008cce:	2201      	movs	r2, #1
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	203d      	movs	r0, #61	; 0x3d
 8008cd4:	f000 f93a 	bl	8008f4c <ep9351_read>
 8008cd8:	60f8      	str	r0, [r7, #12]
    if(is_vatek_success(nres))nres = ep9351_read(EP9351_STATUS_REGISTER_0,&status0,1);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	db07      	blt.n	8008cf0 <ep9351_source_valid+0x30>
 8008ce0:	f107 030b 	add.w	r3, r7, #11
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	203c      	movs	r0, #60	; 0x3c
 8008cea:	f000 f92f 	bl	8008f4c <ep9351_read>
 8008cee:	60f8      	str	r0, [r7, #12]
    
    *status = bstatus_hw_fail;
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	22ff      	movs	r2, #255	; 0xff
 8008cf4:	701a      	strb	r2, [r3, #0]
    if(is_vatek_success(nres))
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	db53      	blt.n	8008da4 <ep9351_source_valid+0xe4>
    {
        *status = bstatus_idle;
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	701a      	strb	r2, [r3, #0]
        if(status1 & STATUS_REGISTER_1_LINK_ON)
 8008d02:	7abb      	ldrb	r3, [r7, #10]
 8008d04:	b25b      	sxtb	r3, r3
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	da49      	bge.n	8008d9e <ep9351_source_valid+0xde>
        {
            if((status1 & EP9351_SR_1_LINKED_ON) == EP9351_SR_1_LINKED_ON)
 8008d0a:	7abb      	ldrb	r3, [r7, #10]
 8008d0c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008d10:	2bc0      	cmp	r3, #192	; 0xc0
 8008d12:	d11b      	bne.n	8008d4c <ep9351_source_valid+0x8c>
            {
                *status = bstatus_invalid;
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	22fe      	movs	r2, #254	; 0xfe
 8008d18:	701a      	strb	r2, [r3, #0]
				#if EP9351_EN_NOTHDMI
					if(status0 & STATUS_REGISTER_0_HDMI)_HAL_LOG(ep9351,"linked-on hdmi");
 8008d1a:	7afb      	ldrb	r3, [r7, #11]
 8008d1c:	f003 0310 	and.w	r3, r3, #16
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d005      	beq.n	8008d30 <ep9351_source_valid+0x70>
 8008d24:	4a22      	ldr	r2, [pc, #136]	; (8008db0 <ep9351_source_valid+0xf0>)
 8008d26:	4923      	ldr	r1, [pc, #140]	; (8008db4 <ep9351_source_valid+0xf4>)
 8008d28:	2000      	movs	r0, #0
 8008d2a:	f002 fd3b 	bl	800b7a4 <vatek_debug_print>
 8008d2e:	e004      	b.n	8008d3a <ep9351_source_valid+0x7a>
					else _HAL_LOG(ep9351,"linked-on not hdmi");
 8008d30:	4a1f      	ldr	r2, [pc, #124]	; (8008db0 <ep9351_source_valid+0xf0>)
 8008d32:	4921      	ldr	r1, [pc, #132]	; (8008db8 <ep9351_source_valid+0xf8>)
 8008d34:	2000      	movs	r0, #0
 8008d36:	f002 fd35 	bl	800b7a4 <vatek_debug_print>
					*status = bstatus_active;
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	701a      	strb	r2, [r3, #0]
					reset_invalid_source = 0;
 8008d40:	4b1e      	ldr	r3, [pc, #120]	; (8008dbc <ep9351_source_valid+0xfc>)
 8008d42:	2200      	movs	r2, #0
 8008d44:	601a      	str	r2, [r3, #0]
					nres = vatek_success;
 8008d46:	2300      	movs	r3, #0
 8008d48:	60fb      	str	r3, [r7, #12]
 8008d4a:	e004      	b.n	8008d56 <ep9351_source_valid+0x96>
						reset_invalid_source = 0;
						nres = vatek_success;
					}
					else _HAL_LOG(ep9351,"linked but not hdmi");
				#endif
            }else _HAL_LOG(ep9351,"linked but invalid");
 8008d4c:	4a18      	ldr	r2, [pc, #96]	; (8008db0 <ep9351_source_valid+0xf0>)
 8008d4e:	491c      	ldr	r1, [pc, #112]	; (8008dc0 <ep9351_source_valid+0x100>)
 8008d50:	2000      	movs	r0, #0
 8008d52:	f002 fd27 	bl	800b7a4 <vatek_debug_print>
            
            if(*status == bstatus_invalid)
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	f993 3000 	ldrsb.w	r3, [r3]
 8008d5c:	f113 0f02 	cmn.w	r3, #2
 8008d60:	d120      	bne.n	8008da4 <ep9351_source_valid+0xe4>
            {
                reset_invalid_source++;
 8008d62:	4b16      	ldr	r3, [pc, #88]	; (8008dbc <ep9351_source_valid+0xfc>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	3301      	adds	r3, #1
 8008d68:	4a14      	ldr	r2, [pc, #80]	; (8008dbc <ep9351_source_valid+0xfc>)
 8008d6a:	6013      	str	r3, [r2, #0]
                if(EP9351_INVALID_RESET_COUNT != 0 && 
 8008d6c:	4b13      	ldr	r3, [pc, #76]	; (8008dbc <ep9351_source_valid+0xfc>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2b0a      	cmp	r3, #10
 8008d72:	d917      	bls.n	8008da4 <ep9351_source_valid+0xe4>
                   reset_invalid_source > EP9351_INVALID_RESET_COUNT)
                {
                    _HAL_LOG(ep9351,"reset hot-plug ep9351");
 8008d74:	4a0e      	ldr	r2, [pc, #56]	; (8008db0 <ep9351_source_valid+0xf0>)
 8008d76:	4913      	ldr	r1, [pc, #76]	; (8008dc4 <ep9351_source_valid+0x104>)
 8008d78:	2000      	movs	r0, #0
 8008d7a:	f002 fd13 	bl	800b7a4 <vatek_debug_print>
                    ep9351_hotplug_in_set(pep,0);
 8008d7e:	2100      	movs	r1, #0
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 f88c 	bl	8008e9e <ep9351_hotplug_in_set>
                    hal_system_sleep(1000);
 8008d86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008d8a:	f004 f9af 	bl	800d0ec <hal_system_sleep>
                    ep9351_hotplug_in_set(pep,1);
 8008d8e:	2101      	movs	r1, #1
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 f884 	bl	8008e9e <ep9351_hotplug_in_set>
                    reset_invalid_source = 0;
 8008d96:	4b09      	ldr	r3, [pc, #36]	; (8008dbc <ep9351_source_valid+0xfc>)
 8008d98:	2200      	movs	r2, #0
 8008d9a:	601a      	str	r2, [r3, #0]
 8008d9c:	e002      	b.n	8008da4 <ep9351_source_valid+0xe4>
                }
                
            }
        }else reset_invalid_source = 0;
 8008d9e:	4b07      	ldr	r3, [pc, #28]	; (8008dbc <ep9351_source_valid+0xfc>)
 8008da0:	2200      	movs	r2, #0
 8008da2:	601a      	str	r2, [r3, #0]
    }
    return nres;
 8008da4:	68fb      	ldr	r3, [r7, #12]
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	0800ed44 	.word	0x0800ed44
 8008db4:	0800eddc 	.word	0x0800eddc
 8008db8:	0800edf4 	.word	0x0800edf4
 8008dbc:	20000aa0 	.word	0x20000aa0
 8008dc0:	0800ee10 	.word	0x0800ee10
 8008dc4:	0800ee2c 	.word	0x0800ee2c

08008dc8 <ep9351_source_output_format>:

vatek_result ep9351_source_output_format(Pep9351_handle pep)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b088      	sub	sp, #32
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
    uint8_t vinfo[EP9XXX_VINFO_SIZE];
    vatek_result nres = ep9351_read(EP9351_AVI_INFOFRAME,&vinfo[0],EP9XXX_VINFO_SIZE);
 8008dd0:	f107 0308 	add.w	r3, r7, #8
 8008dd4:	220f      	movs	r2, #15
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	202a      	movs	r0, #42	; 0x2a
 8008dda:	f000 f8b7 	bl	8008f4c <ep9351_read>
 8008dde:	61f8      	str	r0, [r7, #28]
    if(is_vatek_success(nres))
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	db56      	blt.n	8008e94 <ep9351_source_output_format+0xcc>
    {
        uint8_t val = EP9351_GC_4_OUTPUT;
 8008de6:	23a0      	movs	r3, #160	; 0xa0
 8008de8:	76fb      	strb	r3, [r7, #27]
        uint8_t flag = VINFO_COLORSPACE(vinfo);
 8008dea:	7abb      	ldrb	r3, [r7, #10]
 8008dec:	095b      	lsrs	r3, r3, #5
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	f003 0303 	and.w	r3, r3, #3
 8008df4:	76bb      	strb	r3, [r7, #26]
                    
        if(flag != Y_COLOR_RGB)
 8008df6:	7ebb      	ldrb	r3, [r7, #26]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d00a      	beq.n	8008e12 <ep9351_source_output_format+0x4a>
        {
            val |= GENERAL_CONTROL_2_INCOLOR_YCC;
 8008dfc:	7efb      	ldrb	r3, [r7, #27]
 8008dfe:	f043 0310 	orr.w	r3, r3, #16
 8008e02:	76fb      	strb	r3, [r7, #27]
            if(flag == Y_COLOR_YCC_422)val |= GENERAL_CONTROL_2_INFORMAT_422;
 8008e04:	7ebb      	ldrb	r3, [r7, #26]
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d103      	bne.n	8008e12 <ep9351_source_output_format+0x4a>
 8008e0a:	7efb      	ldrb	r3, [r7, #27]
 8008e0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e10:	76fb      	strb	r3, [r7, #27]
        }
                    
        flag = VINFO_PIXEL_REPEAT(vinfo) & 0xF;
 8008e12:	7bbb      	ldrb	r3, [r7, #14]
 8008e14:	f003 030f 	and.w	r3, r3, #15
 8008e18:	76bb      	strb	r3, [r7, #26]
        if(flag != 0)val |= ((flag - 1) & 0x3);
 8008e1a:	7ebb      	ldrb	r3, [r7, #26]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d00b      	beq.n	8008e38 <ep9351_source_output_format+0x70>
 8008e20:	7ebb      	ldrb	r3, [r7, #26]
 8008e22:	3b01      	subs	r3, #1
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	b25b      	sxtb	r3, r3
 8008e28:	f003 0303 	and.w	r3, r3, #3
 8008e2c:	b25a      	sxtb	r2, r3
 8008e2e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	b25b      	sxtb	r3, r3
 8008e36:	76fb      	strb	r3, [r7, #27]
        flag = VINFO_COLORIMETRY(vinfo);
 8008e38:	7afb      	ldrb	r3, [r7, #11]
 8008e3a:	099b      	lsrs	r3, r3, #6
 8008e3c:	76bb      	strb	r3, [r7, #26]
        if(flag == C_COLORSPACE_ITU709)val |= GENERAL_CONTROL_2_ITU709;
 8008e3e:	7ebb      	ldrb	r3, [r7, #26]
 8008e40:	2b02      	cmp	r3, #2
 8008e42:	d104      	bne.n	8008e4e <ep9351_source_output_format+0x86>
 8008e44:	7efb      	ldrb	r3, [r7, #27]
 8008e46:	f043 0304 	orr.w	r3, r3, #4
 8008e4a:	76fb      	strb	r3, [r7, #27]
 8008e4c:	e00f      	b.n	8008e6e <ep9351_source_output_format+0xa6>
        else if(flag == C_COLORSPACE_EXT)
 8008e4e:	7ebb      	ldrb	r3, [r7, #26]
 8008e50:	2b03      	cmp	r3, #3
 8008e52:	d10c      	bne.n	8008e6e <ep9351_source_output_format+0xa6>
        {
            flag = VINFO_EX_COLORIMETRY(vinfo);
 8008e54:	7b3b      	ldrb	r3, [r7, #12]
 8008e56:	091b      	lsrs	r3, r3, #4
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	f003 0307 	and.w	r3, r3, #7
 8008e5e:	76bb      	strb	r3, [r7, #26]
            if(flag == EC_COLORSPACE_CC709)val |= GENERAL_CONTROL_2_ITU709;
 8008e60:	7ebb      	ldrb	r3, [r7, #26]
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d103      	bne.n	8008e6e <ep9351_source_output_format+0xa6>
 8008e66:	7efb      	ldrb	r3, [r7, #27]
 8008e68:	f043 0304 	orr.w	r3, r3, #4
 8008e6c:	76fb      	strb	r3, [r7, #27]
        }
                    
        flag = VINFO_QUANT_RANGE(vinfo);
 8008e6e:	7b3b      	ldrb	r3, [r7, #12]
 8008e70:	089b      	lsrs	r3, r3, #2
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	f003 0303 	and.w	r3, r3, #3
 8008e78:	76bb      	strb	r3, [r7, #26]
        if(flag == Q_COLORRANGE_FULL)val |= GENERAL_CONTROL_2_FULLRANGE;         
 8008e7a:	7ebb      	ldrb	r3, [r7, #26]
 8008e7c:	2b02      	cmp	r3, #2
 8008e7e:	d103      	bne.n	8008e88 <ep9351_source_output_format+0xc0>
 8008e80:	7efb      	ldrb	r3, [r7, #27]
 8008e82:	f043 0308 	orr.w	r3, r3, #8
 8008e86:	76fb      	strb	r3, [r7, #27]
        nres = ep9351_write_one(EP9351_GENERAL_CONTROL_2,val);
 8008e88:	7efb      	ldrb	r3, [r7, #27]
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	2042      	movs	r0, #66	; 0x42
 8008e8e:	f000 f81e 	bl	8008ece <ep9351_write_one>
 8008e92:	61f8      	str	r0, [r7, #28]
    }
    
    return nres;
 8008e94:	69fb      	ldr	r3, [r7, #28]
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3720      	adds	r7, #32
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <ep9351_hotplug_in_set>:
        nres = hal_gpio_config((hhal_pin)pep->param.pin_hp,hal_gpio_output);
    return nres;
}

vatek_result ep9351_hotplug_in_set(Pep9351_handle pep,int32_t status)
{
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b084      	sub	sp, #16
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
 8008ea6:	6039      	str	r1, [r7, #0]
    vatek_result nres = vatek_success;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	60fb      	str	r3, [r7, #12]
    if(pep->param.pin_hp != -1)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb4:	d006      	beq.n	8008ec4 <ep9351_hotplug_in_set+0x26>
        nres = hal_gpio_set((hhal_pin)pep->param.pin_hp,status);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	6839      	ldr	r1, [r7, #0]
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f004 f965 	bl	800d18c <hal_gpio_set>
 8008ec2:	60f8      	str	r0, [r7, #12]
    return nres;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3710      	adds	r7, #16
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <ep9351_write_one>:

vatek_result ep9351_write_one(uint8_t reg,uint8_t val)
{
 8008ece:	b580      	push	{r7, lr}
 8008ed0:	b084      	sub	sp, #16
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	460a      	mov	r2, r1
 8008ed8:	71fb      	strb	r3, [r7, #7]
 8008eda:	4613      	mov	r3, r2
 8008edc:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp = val;
 8008ede:	79bb      	ldrb	r3, [r7, #6]
 8008ee0:	73fb      	strb	r3, [r7, #15]
    return ep9351_write(reg,&tmp,1);
 8008ee2:	f107 010f 	add.w	r1, r7, #15
 8008ee6:	79fb      	ldrb	r3, [r7, #7]
 8008ee8:	2201      	movs	r2, #1
 8008eea:	4618      	mov	r0, r3
 8008eec:	f000 f805 	bl	8008efa <ep9351_write>
 8008ef0:	4603      	mov	r3, r0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <ep9351_write>:

vatek_result ep9351_write(uint8_t reg,const uint8_t* pbuf,int32_t len)
{
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b086      	sub	sp, #24
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	4603      	mov	r3, r0
 8008f02:	60b9      	str	r1, [r7, #8]
 8008f04:	607a      	str	r2, [r7, #4]
 8008f06:	73fb      	strb	r3, [r7, #15]
    vatek_result nres = hal_i2c_start(EP9351_WRITE_ADDR,0);
 8008f08:	2100      	movs	r1, #0
 8008f0a:	2078      	movs	r0, #120	; 0x78
 8008f0c:	f004 f965 	bl	800d1da <hal_i2c_start>
 8008f10:	6178      	str	r0, [r7, #20]
    if(is_vatek_success(nres))
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	db14      	blt.n	8008f42 <ep9351_write+0x48>
    {
        nres = hal_i2c_write(&reg,1);
 8008f18:	f107 030f 	add.w	r3, r7, #15
 8008f1c:	2101      	movs	r1, #1
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f004 f977 	bl	800d212 <hal_i2c_write>
 8008f24:	6178      	str	r0, [r7, #20]
        if(is_vatek_success(nres))nres = hal_i2c_write(pbuf,len);
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	db04      	blt.n	8008f36 <ep9351_write+0x3c>
 8008f2c:	6879      	ldr	r1, [r7, #4]
 8008f2e:	68b8      	ldr	r0, [r7, #8]
 8008f30:	f004 f96f 	bl	800d212 <hal_i2c_write>
 8008f34:	6178      	str	r0, [r7, #20]
        if(is_vatek_success(nres))nres = hal_i2c_stop();
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	db02      	blt.n	8008f42 <ep9351_write+0x48>
 8008f3c:	f004 f99f 	bl	800d27e <hal_i2c_stop>
 8008f40:	6178      	str	r0, [r7, #20]
    }
    return nres;
 8008f42:	697b      	ldr	r3, [r7, #20]
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3718      	adds	r7, #24
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <ep9351_read>:

vatek_result ep9351_read(uint8_t reg,uint8_t* pbuf,int32_t len)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b086      	sub	sp, #24
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	4603      	mov	r3, r0
 8008f54:	60b9      	str	r1, [r7, #8]
 8008f56:	607a      	str	r2, [r7, #4]
 8008f58:	73fb      	strb	r3, [r7, #15]
    vatek_result nres = hal_i2c_start(EP9351_WRITE_ADDR,0);
 8008f5a:	2100      	movs	r1, #0
 8008f5c:	2078      	movs	r0, #120	; 0x78
 8008f5e:	f004 f93c 	bl	800d1da <hal_i2c_start>
 8008f62:	6178      	str	r0, [r7, #20]
    if(is_vatek_success(nres))
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	db0c      	blt.n	8008f84 <ep9351_read+0x38>
    {
        nres = hal_i2c_write(&reg,1);
 8008f6a:	f107 030f 	add.w	r3, r7, #15
 8008f6e:	2101      	movs	r1, #1
 8008f70:	4618      	mov	r0, r3
 8008f72:	f004 f94e 	bl	800d212 <hal_i2c_write>
 8008f76:	6178      	str	r0, [r7, #20]
        if(is_vatek_success(nres))nres = hal_i2c_stop();
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	db02      	blt.n	8008f84 <ep9351_read+0x38>
 8008f7e:	f004 f97e 	bl	800d27e <hal_i2c_stop>
 8008f82:	6178      	str	r0, [r7, #20]
    }
    
    if(is_vatek_success(nres))
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	db12      	blt.n	8008fb0 <ep9351_read+0x64>
    {
        nres = hal_i2c_start(EP9351_READ_ADDR,0);
 8008f8a:	2100      	movs	r1, #0
 8008f8c:	2079      	movs	r0, #121	; 0x79
 8008f8e:	f004 f924 	bl	800d1da <hal_i2c_start>
 8008f92:	6178      	str	r0, [r7, #20]
        if(is_vatek_success(nres))nres = hal_i2c_read(pbuf,len);
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	db04      	blt.n	8008fa4 <ep9351_read+0x58>
 8008f9a:	6879      	ldr	r1, [r7, #4]
 8008f9c:	68b8      	ldr	r0, [r7, #8]
 8008f9e:	f004 f953 	bl	800d248 <hal_i2c_read>
 8008fa2:	6178      	str	r0, [r7, #20]
        if(is_vatek_success(nres))nres = hal_i2c_stop();
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	db02      	blt.n	8008fb0 <ep9351_read+0x64>
 8008faa:	f004 f968 	bl	800d27e <hal_i2c_stop>
 8008fae:	6178      	str	r0, [r7, #20]
    }
    return nres;
 8008fb0:	697b      	ldr	r3, [r7, #20]
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3718      	adds	r7, #24
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <ep9555e_check_support>:
extern vatek_result ep9555e_check_source_valid(bridge_status* status);
extern vatek_result ep9555e_get_current_resolution(Pep9555e_handle pep9555e,video_resolution* resolution);
extern vatek_result ep9555e_get_scale_timing(video_resolution resolution,video_framerate fps,Phdmi_video_timing ptiming);

vatek_result ep9555e_check_support(void)
{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b082      	sub	sp, #8
 8008fbe:	af00      	add	r7, sp, #0
    vatek_result nres = hal_i2c_check_device(EP9555E_SYS_ADDR);
 8008fc0:	2068      	movs	r0, #104	; 0x68
 8008fc2:	f004 f8fc 	bl	800d1be <hal_i2c_check_device>
 8008fc6:	6078      	str	r0, [r7, #4]
	if(is_vatek_success(nres))
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	db03      	blt.n	8008fd6 <ep9555e_check_support+0x1c>
		nres = hal_i2c_check_device(EP9555E_CHIP_ADDR);
 8008fce:	2078      	movs	r0, #120	; 0x78
 8008fd0:	f004 f8f5 	bl	800d1be <hal_i2c_check_device>
 8008fd4:	6078      	str	r0, [r7, #4]
	return nres;
 8008fd6:	687b      	ldr	r3, [r7, #4]
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3708      	adds	r7, #8
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <ep9555e_open>:

vatek_result ep9555e_open(hbridge_source* hsource)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b086      	sub	sp, #24
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
    uint8_t val = 0;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	73fb      	strb	r3, [r7, #15]
    vatek_result nres = EP9555E_CHIP_RD(EP9555E_POWER_STATUS,&val,1);
 8008fec:	f107 020f 	add.w	r2, r7, #15
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	2100      	movs	r1, #0
 8008ff4:	2078      	movs	r0, #120	; 0x78
 8008ff6:	f000 fc8a 	bl	800990e <ep9555e_read>
 8008ffa:	6178      	str	r0, [r7, #20]
    if(is_vatek_success(nres))
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	db23      	blt.n	800904a <ep9555e_open+0x6a>
    {
    	Pep9555e_handle newep = (Pep9555e_handle)malloc(sizeof(ep9555e_handle));
 8009002:	2008      	movs	r0, #8
 8009004:	f004 ff7c 	bl	800df00 <malloc>
 8009008:	4603      	mov	r3, r0
 800900a:	613b      	str	r3, [r7, #16]
    	nres = vatek_memfail;
 800900c:	f06f 030a 	mvn.w	r3, #10
 8009010:	617b      	str	r3, [r7, #20]
    	if(newep)
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d018      	beq.n	800904a <ep9555e_open+0x6a>
    	{
            memset(newep,0,sizeof(ep9555e_handle));
 8009018:	2208      	movs	r2, #8
 800901a:	2100      	movs	r1, #0
 800901c:	6938      	ldr	r0, [r7, #16]
 800901e:	f004 ff8d 	bl	800df3c <memset>
            newep->param.scale = sscale_i_2_p;
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	2201      	movs	r2, #1
 8009026:	601a      	str	r2, [r3, #0]
            newep->param.baseclk = sbaseclk_1001;
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	2201      	movs	r2, #1
 800902c:	605a      	str	r2, [r3, #4]
            nres = ep9555e_write_init(newep);
 800902e:	6938      	ldr	r0, [r7, #16]
 8009030:	f000 fb08 	bl	8009644 <ep9555e_write_init>
 8009034:	6178      	str	r0, [r7, #20]
            if(!is_vatek_success(nres))free(newep);
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	2b00      	cmp	r3, #0
 800903a:	da03      	bge.n	8009044 <ep9555e_open+0x64>
 800903c:	6938      	ldr	r0, [r7, #16]
 800903e:	f004 ff67 	bl	800df10 <free>
 8009042:	e002      	b.n	800904a <ep9555e_open+0x6a>
    		else *hsource = newep;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	693a      	ldr	r2, [r7, #16]
 8009048:	601a      	str	r2, [r3, #0]
    	}
    }
	return nres;
 800904a:	697b      	ldr	r3, [r7, #20]
}
 800904c:	4618      	mov	r0, r3
 800904e:	3718      	adds	r7, #24
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <ep9555e_config>:

vatek_result ep9555e_config(hbridge_source hsource,Pbavsource_param param)
{
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
	return vatek_unsupport;
 800905e:	f06f 0301 	mvn.w	r3, #1
}
 8009062:	4618      	mov	r0, r3
 8009064:	370c      	adds	r7, #12
 8009066:	46bd      	mov	sp, r7
 8009068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906c:	4770      	bx	lr
	...

08009070 <ep9555e_get_status>:

vatek_result ep9555e_get_status(hbridge_source hsource,Pbridge_source pbsourcesttaus)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b088      	sub	sp, #32
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
    vatek_result nres = vatek_success;
 800907a:	2300      	movs	r3, #0
 800907c:	61fb      	str	r3, [r7, #28]
    Pep9555e_handle pep = (Pep9555e_handle)hsource;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	613b      	str	r3, [r7, #16]
    
    //memset(&pbsourcesttaus,0,sizeof(bridge_source));
    nres = ep9555e_check_source_valid(&pbsourcesttaus->status);
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	4618      	mov	r0, r3
 8009086:	f000 f94b 	bl	8009320 <ep9555e_check_source_valid>
 800908a:	61f8      	str	r0, [r7, #28]
    if(is_vatek_success(nres))
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	2b00      	cmp	r3, #0
 8009090:	f2c0 80e5 	blt.w	800925e <ep9555e_get_status+0x1ee>
    {   
        if(pbsourcesttaus->status >= bstatus_active)
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	f993 3000 	ldrsb.w	r3, [r3]
 800909a:	2b00      	cmp	r3, #0
 800909c:	f340 80df 	ble.w	800925e <ep9555e_get_status+0x1ee>
        {
            uint8_t val = 0;
 80090a0:	2300      	movs	r3, #0
 80090a2:	72fb      	strb	r3, [r7, #11]
            Phdmi_video_id pvideo = NULL;
 80090a4:	2300      	movs	r3, #0
 80090a6:	60fb      	str	r3, [r7, #12]
            nres = EP9555E_CHIP_RD(EP9555E_V_TIMING,&val,1);
 80090a8:	f107 020b 	add.w	r2, r7, #11
 80090ac:	2301      	movs	r3, #1
 80090ae:	f240 3101 	movw	r1, #769	; 0x301
 80090b2:	2078      	movs	r0, #120	; 0x78
 80090b4:	f000 fc2b 	bl	800990e <ep9555e_read>
 80090b8:	61f8      	str	r0, [r7, #28]
            if(is_vatek_success(nres))
 80090ba:	69fb      	ldr	r3, [r7, #28]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	f2c0 8088 	blt.w	80091d2 <ep9555e_get_status+0x162>
            {
                pvideo = hdmi_tool_get_video_id(val);
 80090c2:	7afb      	ldrb	r3, [r7, #11]
 80090c4:	4618      	mov	r0, r3
 80090c6:	f002 fc5d 	bl	800b984 <hdmi_tool_get_video_id>
 80090ca:	60f8      	str	r0, [r7, #12]
                nres = vatek_unsupport;
 80090cc:	f06f 0301 	mvn.w	r3, #1
 80090d0:	61fb      	str	r3, [r7, #28]
                if(pvideo == NULL)_HAL_LOG(ep9555e,"unsupported video code : %d",val);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d106      	bne.n	80090e6 <ep9555e_get_status+0x76>
 80090d8:	7afb      	ldrb	r3, [r7, #11]
 80090da:	4a63      	ldr	r2, [pc, #396]	; (8009268 <ep9555e_get_status+0x1f8>)
 80090dc:	4963      	ldr	r1, [pc, #396]	; (800926c <ep9555e_get_status+0x1fc>)
 80090de:	2000      	movs	r0, #0
 80090e0:	f002 fb60 	bl	800b7a4 <vatek_debug_print>
 80090e4:	e075      	b.n	80091d2 <ep9555e_get_status+0x162>
                else 
                {
                    uint32_t signal = VI_SEPARATED_SYNC | VI_BUSWIDTH_16;
 80090e6:	2350      	movs	r3, #80	; 0x50
 80090e8:	61bb      	str	r3, [r7, #24]
                    uint32_t pixelclk = pvideo->pixelclk;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	689b      	ldr	r3, [r3, #8]
 80090ee:	617b      	str	r3, [r7, #20]
                    video_resolution resolution = pvideo->resolution;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80090f6:	72bb      	strb	r3, [r7, #10]
                    nres = ep9555e_get_current_resolution(pep,&resolution);
 80090f8:	f107 030a 	add.w	r3, r7, #10
 80090fc:	4619      	mov	r1, r3
 80090fe:	6938      	ldr	r0, [r7, #16]
 8009100:	f000 face 	bl	80096a0 <ep9555e_get_current_resolution>
 8009104:	61f8      	str	r0, [r7, #28]
        
                    if(is_vatek_success(nres))
 8009106:	69fb      	ldr	r3, [r7, #28]
 8009108:	2b00      	cmp	r3, #0
 800910a:	db62      	blt.n	80091d2 <ep9555e_get_status+0x162>
                    {
                        if(pep->param.scale == sscale_i_2_p)
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	2b01      	cmp	r3, #1
 8009112:	d11b      	bne.n	800914c <ep9555e_get_status+0xdc>
                        {
                            if(pvideo->resolution == resolution_1080i)pixelclk <<= 1;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800911a:	2b05      	cmp	r3, #5
 800911c:	d102      	bne.n	8009124 <ep9555e_get_status+0xb4>
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	005b      	lsls	r3, r3, #1
 8009122:	617b      	str	r3, [r7, #20]
                            if(is_resolution_interlaced(pvideo->resolution))signal |= VI_EXT_HALF_FPS;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d009      	beq.n	8009142 <ep9555e_get_status+0xd2>
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8009134:	2b02      	cmp	r3, #2
 8009136:	d004      	beq.n	8009142 <ep9555e_get_status+0xd2>
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800913e:	2b05      	cmp	r3, #5
 8009140:	d122      	bne.n	8009188 <ep9555e_get_status+0x118>
 8009142:	69bb      	ldr	r3, [r7, #24]
 8009144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009148:	61bb      	str	r3, [r7, #24]
 800914a:	e01d      	b.n	8009188 <ep9555e_get_status+0x118>
                        }else if(pep->param.scale == sscale_fixed_720p)
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2b04      	cmp	r3, #4
 8009152:	d119      	bne.n	8009188 <ep9555e_get_status+0x118>
                        {
                            if(pvideo->resolution > resolution_720p)pixelclk = 74250;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800915a:	2b04      	cmp	r3, #4
 800915c:	dd01      	ble.n	8009162 <ep9555e_get_status+0xf2>
 800915e:	4b44      	ldr	r3, [pc, #272]	; (8009270 <ep9555e_get_status+0x200>)
 8009160:	617b      	str	r3, [r7, #20]
                            if(is_resolution_interlaced(pvideo->resolution))signal |= VI_EXT_HALF_FPS;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d009      	beq.n	8009180 <ep9555e_get_status+0x110>
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8009172:	2b02      	cmp	r3, #2
 8009174:	d004      	beq.n	8009180 <ep9555e_get_status+0x110>
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800917c:	2b05      	cmp	r3, #5
 800917e:	d103      	bne.n	8009188 <ep9555e_get_status+0x118>
 8009180:	69bb      	ldr	r3, [r7, #24]
 8009182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009186:	61bb      	str	r3, [r7, #24]
                        }

                        if(is_vatek_success(nres))
 8009188:	69fb      	ldr	r3, [r7, #28]
 800918a:	2b00      	cmp	r3, #0
 800918c:	db21      	blt.n	80091d2 <ep9555e_get_status+0x162>
                        {
                            pbsourcesttaus->video_info.resolution = resolution;
 800918e:	f997 200a 	ldrsb.w	r2, [r7, #10]
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	721a      	strb	r2, [r3, #8]
                            pbsourcesttaus->video_info.framerate = pvideo->framerate;  
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	725a      	strb	r2, [r3, #9]
                            pbsourcesttaus->video_info.pixelclk = pixelclk;        
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	697a      	ldr	r2, [r7, #20]
 80091a4:	615a      	str	r2, [r3, #20]
                            hdmi_tool_change_base_clock(pep->param.baseclk,&pbsourcesttaus->video_info);
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	685a      	ldr	r2, [r3, #4]
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	3308      	adds	r3, #8
 80091ae:	4619      	mov	r1, r3
 80091b0:	4610      	mov	r0, r2
 80091b2:	f002 fc63 	bl	800ba7c <hdmi_tool_change_base_clock>
                            pbsourcesttaus->video_info.aspectrate = pvideo->aspectratio;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f993 2004 	ldrsb.w	r2, [r3, #4]
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	729a      	strb	r2, [r3, #10]
                            pbsourcesttaus->video_info.signal_flag = signal;
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	69ba      	ldr	r2, [r7, #24]
 80091c4:	619a      	str	r2, [r3, #24]
                            pbsourcesttaus->video_info.offset_x = 0;
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	2200      	movs	r2, #0
 80091ca:	60da      	str	r2, [r3, #12]
                            pbsourcesttaus->video_info.offset_y = 0;   
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	2200      	movs	r2, #0
 80091d0:	611a      	str	r2, [r3, #16]
                        }   
                    }
                }
            }

            if(is_vatek_success(nres))
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	db3c      	blt.n	8009252 <ep9555e_get_status+0x1e2>
            {
                uint8_t reg_status = 0;
 80091d8:	2300      	movs	r3, #0
 80091da:	727b      	strb	r3, [r7, #9]
                nres = EP9555E_CHIP_RD(EP9555E_SYS_STATUS1,&reg_status,1);
 80091dc:	f107 0209 	add.w	r2, r7, #9
 80091e0:	2301      	movs	r3, #1
 80091e2:	f240 2101 	movw	r1, #513	; 0x201
 80091e6:	2078      	movs	r0, #120	; 0x78
 80091e8:	f000 fb91 	bl	800990e <ep9555e_read>
 80091ec:	61f8      	str	r0, [r7, #28]
                if(is_vatek_success(nres))
 80091ee:	69fb      	ldr	r3, [r7, #28]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	db2e      	blt.n	8009252 <ep9555e_get_status+0x1e2>
                {
                    pbsourcesttaus->audio_info.channel = channel_mute;
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	2200      	movs	r2, #0
 80091f8:	775a      	strb	r2, [r3, #29]
                    if(is_ep9555e_source_valid(reg_status))
 80091fa:	7a7b      	ldrb	r3, [r7, #9]
 80091fc:	b25b      	sxtb	r3, r3
 80091fe:	2b00      	cmp	r3, #0
 8009200:	da27      	bge.n	8009252 <ep9555e_get_status+0x1e2>
 8009202:	7a7b      	ldrb	r3, [r7, #9]
 8009204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009208:	2b00      	cmp	r3, #0
 800920a:	d022      	beq.n	8009252 <ep9555e_get_status+0x1e2>
                    {
                        uint8_t val = 0;
 800920c:	2300      	movs	r3, #0
 800920e:	723b      	strb	r3, [r7, #8]
                        nres = EP9555E_CHIP_RD(EP9555E_A_STATUS0,&val,1);
 8009210:	f107 0208 	add.w	r2, r7, #8
 8009214:	2301      	movs	r3, #1
 8009216:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800921a:	2078      	movs	r0, #120	; 0x78
 800921c:	f000 fb77 	bl	800990e <ep9555e_read>
 8009220:	61f8      	str	r0, [r7, #28]
                        if(is_vatek_success(nres))
 8009222:	69fb      	ldr	r3, [r7, #28]
 8009224:	2b00      	cmp	r3, #0
 8009226:	db14      	blt.n	8009252 <ep9555e_get_status+0x1e2>
                        {
                            pbsourcesttaus->audio_info.samplerate = ep9xxx_get_audio_samplerate(val);
 8009228:	7a3b      	ldrb	r3, [r7, #8]
 800922a:	4618      	mov	r0, r3
 800922c:	f002 fa6e 	bl	800b70c <ep9xxx_get_audio_samplerate>
 8009230:	4603      	mov	r3, r0
 8009232:	461a      	mov	r2, r3
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	771a      	strb	r2, [r3, #28]
                            if(pbsourcesttaus->audio_info.samplerate == sample_rate_unknown)nres = vatek_unsupport;
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	f993 301c 	ldrsb.w	r3, [r3, #28]
 800923e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009242:	d103      	bne.n	800924c <ep9555e_get_status+0x1dc>
 8009244:	f06f 0301 	mvn.w	r3, #1
 8009248:	61fb      	str	r3, [r7, #28]
 800924a:	e002      	b.n	8009252 <ep9555e_get_status+0x1e2>
                            else pbsourcesttaus->audio_info.channel = channel_stereo;
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	2201      	movs	r2, #1
 8009250:	775a      	strb	r2, [r3, #29]
                        }
                    }
                }
            }
            if(!is_vatek_success(nres))pbsourcesttaus->status = bstatus_invalid;
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	2b00      	cmp	r3, #0
 8009256:	da02      	bge.n	800925e <ep9555e_get_status+0x1ee>
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	22fe      	movs	r2, #254	; 0xfe
 800925c:	701a      	strb	r2, [r3, #0]
        }
    }
    return nres;
 800925e:	69fb      	ldr	r3, [r7, #28]
}
 8009260:	4618      	mov	r0, r3
 8009262:	3720      	adds	r7, #32
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}
 8009268:	0800ee4c 	.word	0x0800ee4c
 800926c:	0800ee88 	.word	0x0800ee88
 8009270:	0001220a 	.word	0x0001220a

08009274 <ep9555e_set_output>:

vatek_result ep9555e_set_output(hbridge_source hsource,int32_t isoutput)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b086      	sub	sp, #24
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
	#define EP9555E_DISABLE_OUTPUT	(OUTPUT_DISABLE_CNTL_SPDIF_DIS | \
									 OUTPUT_DISABLE_CNTL_IIS_DIS | \
									 OUTPUT_DISABLE_CNTL_VOUT_DIS | \
									 OUTPUT_DISABLE_CNTL_I2S_PCM)

	uint8_t val = EP9555E_DISABLE_OUTPUT;
 800927e:	23d1      	movs	r3, #209	; 0xd1
 8009280:	73fb      	strb	r3, [r7, #15]
	vatek_result nres = vatek_success;
 8009282:	2300      	movs	r3, #0
 8009284:	617b      	str	r3, [r7, #20]
	if (isoutput)
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d026      	beq.n	80092da <ep9555e_set_output+0x66>
    {
        Pep9555e_handle pep = (Pep9555e_handle)hsource;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	613b      	str	r3, [r7, #16]
        bridge_status bstatus = bstatus_idle;
 8009290:	2300      	movs	r3, #0
 8009292:	73bb      	strb	r3, [r7, #14]
        nres = ep9555e_check_source_valid(&bstatus);
 8009294:	f107 030e 	add.w	r3, r7, #14
 8009298:	4618      	mov	r0, r3
 800929a:	f000 f841 	bl	8009320 <ep9555e_check_source_valid>
 800929e:	6178      	str	r0, [r7, #20]
        if(is_vatek_success(nres))
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	db19      	blt.n	80092da <ep9555e_set_output+0x66>
        {
            if(bstatus >= bstatus_active)
 80092a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	dd0d      	ble.n	80092ca <ep9555e_set_output+0x56>
            {
                nres = ep9555e_write_output_format(pep);
 80092ae:	6938      	ldr	r0, [r7, #16]
 80092b0:	f000 f8a0 	bl	80093f4 <ep9555e_write_output_format>
 80092b4:	6178      	str	r0, [r7, #20]
                if(is_vatek_success(nres))
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	db03      	blt.n	80092c4 <ep9555e_set_output+0x50>
                    nres = ep9555e_write_output_timing(pep);
 80092bc:	6938      	ldr	r0, [r7, #16]
 80092be:	f000 f90f 	bl	80094e0 <ep9555e_write_output_timing>
 80092c2:	6178      	str	r0, [r7, #20]
                val = EP9555E_EN_OUTPUT;      
 80092c4:	2301      	movs	r3, #1
 80092c6:	73fb      	strb	r3, [r7, #15]
 80092c8:	e007      	b.n	80092da <ep9555e_set_output+0x66>
            }else 
            {
                nres = vatek_badstatus;
 80092ca:	f06f 0304 	mvn.w	r3, #4
 80092ce:	617b      	str	r3, [r7, #20]
                _HAL_LOG(ep9555e,"set output no valid source");
 80092d0:	4a0a      	ldr	r2, [pc, #40]	; (80092fc <ep9555e_set_output+0x88>)
 80092d2:	490b      	ldr	r1, [pc, #44]	; (8009300 <ep9555e_set_output+0x8c>)
 80092d4:	2000      	movs	r0, #0
 80092d6:	f002 fa65 	bl	800b7a4 <vatek_debug_print>
            }
        }
    }
    if(is_vatek_success(nres))
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	db08      	blt.n	80092f2 <ep9555e_set_output+0x7e>
        nres = EP9555E_CHIP_WR(EP9555E_OUTPUT_DISABLE_CNTL,&val,1);      
 80092e0:	f107 020f 	add.w	r2, r7, #15
 80092e4:	2301      	movs	r3, #1
 80092e6:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 80092ea:	2078      	movs	r0, #120	; 0x78
 80092ec:	f000 faad 	bl	800984a <ep9555e_write>
 80092f0:	6178      	str	r0, [r7, #20]
	return nres;
 80092f2:	697b      	ldr	r3, [r7, #20]
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3718      	adds	r7, #24
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}
 80092fc:	0800ee4c 	.word	0x0800ee4c
 8009300:	0800eeac 	.word	0x0800eeac

08009304 <ep9555e_close>:

void ep9555e_close(hbridge_source hsource)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
    Pep9555e_handle pep = (Pep9555e_handle)hsource;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	60fb      	str	r3, [r7, #12]
    free(pep);
 8009310:	68f8      	ldr	r0, [r7, #12]
 8009312:	f004 fdfd 	bl	800df10 <free>
}
 8009316:	bf00      	nop
 8009318:	3710      	adds	r7, #16
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
	...

08009320 <ep9555e_check_source_valid>:

vatek_result ep9555e_check_source_valid(bridge_status* status)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b084      	sub	sp, #16
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
    uint8_t status0 = 0,status1 = 0;
 8009328:	2300      	movs	r3, #0
 800932a:	72fb      	strb	r3, [r7, #11]
 800932c:	2300      	movs	r3, #0
 800932e:	72bb      	strb	r3, [r7, #10]
    vatek_result nres = EP9555E_CHIP_RD(EP9555E_SYS_STATUS0,&status0,1);
 8009330:	f107 020b 	add.w	r2, r7, #11
 8009334:	2301      	movs	r3, #1
 8009336:	f44f 7100 	mov.w	r1, #512	; 0x200
 800933a:	2078      	movs	r0, #120	; 0x78
 800933c:	f000 fae7 	bl	800990e <ep9555e_read>
 8009340:	60f8      	str	r0, [r7, #12]
    if(is_vatek_success(nres))
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2b00      	cmp	r3, #0
 8009346:	db08      	blt.n	800935a <ep9555e_check_source_valid+0x3a>
        nres = EP9555E_CHIP_RD(EP9555E_SYS_STATUS1,&status1,1);
 8009348:	f107 020a 	add.w	r2, r7, #10
 800934c:	2301      	movs	r3, #1
 800934e:	f240 2101 	movw	r1, #513	; 0x201
 8009352:	2078      	movs	r0, #120	; 0x78
 8009354:	f000 fadb 	bl	800990e <ep9555e_read>
 8009358:	60f8      	str	r0, [r7, #12]
    
    *status = bstatus_hw_fail;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	22ff      	movs	r2, #255	; 0xff
 800935e:	701a      	strb	r2, [r3, #0]
    
    if(is_vatek_success(nres))
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2b00      	cmp	r3, #0
 8009364:	db30      	blt.n	80093c8 <ep9555e_check_source_valid+0xa8>
    {
        *status = bstatus_idle;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	701a      	strb	r2, [r3, #0]
        if(status1 & EP9555E_SYS_STATUS1_LINK_ON)
 800936c:	7abb      	ldrb	r3, [r7, #10]
 800936e:	b25b      	sxtb	r3, r3
 8009370:	2b00      	cmp	r3, #0
 8009372:	da29      	bge.n	80093c8 <ep9555e_check_source_valid+0xa8>
        {
            *status = bstatus_invalid;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	22fe      	movs	r2, #254	; 0xfe
 8009378:	701a      	strb	r2, [r3, #0]
            if(status1 & EP9555E_SYS_STATUS1_DE_VALID)
 800937a:	7abb      	ldrb	r3, [r7, #10]
 800937c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009380:	2b00      	cmp	r3, #0
 8009382:	d01c      	beq.n	80093be <ep9555e_check_source_valid+0x9e>
            {
                if(status0 & EP9555E_SYS_STATUS0_HDMI)
 8009384:	7afb      	ldrb	r3, [r7, #11]
 8009386:	f003 0310 	and.w	r3, r3, #16
 800938a:	2b00      	cmp	r3, #0
 800938c:	d011      	beq.n	80093b2 <ep9555e_check_source_valid+0x92>
                {
                    if((status0 & EP9555E_SYS_STATUS0_DECRYPT) &&
 800938e:	7afb      	ldrb	r3, [r7, #11]
 8009390:	f003 0304 	and.w	r3, r3, #4
 8009394:	2b00      	cmp	r3, #0
 8009396:	d008      	beq.n	80093aa <ep9555e_check_source_valid+0x8a>
                        (status0 & EP9555E_SYS_STATUS0_AUTHEN))
 8009398:	7afb      	ldrb	r3, [r7, #11]
 800939a:	f003 0308 	and.w	r3, r3, #8
                    if((status0 & EP9555E_SYS_STATUS0_DECRYPT) &&
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d003      	beq.n	80093aa <ep9555e_check_source_valid+0x8a>
                    {
                        //_HAL_LOG(ep9555e,"source is hdcp descypt");
                        *status = bstatus_active_protect;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2202      	movs	r2, #2
 80093a6:	701a      	strb	r2, [r3, #0]
 80093a8:	e00e      	b.n	80093c8 <ep9555e_check_source_valid+0xa8>
                    }else *status = bstatus_active;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2201      	movs	r2, #1
 80093ae:	701a      	strb	r2, [r3, #0]
 80093b0:	e00a      	b.n	80093c8 <ep9555e_check_source_valid+0xa8>
                }
                else _HAL_LOG(ep9555e,"linked on but not hdmi");
 80093b2:	4a0c      	ldr	r2, [pc, #48]	; (80093e4 <ep9555e_check_source_valid+0xc4>)
 80093b4:	490c      	ldr	r1, [pc, #48]	; (80093e8 <ep9555e_check_source_valid+0xc8>)
 80093b6:	2000      	movs	r0, #0
 80093b8:	f002 f9f4 	bl	800b7a4 <vatek_debug_print>
 80093bc:	e004      	b.n	80093c8 <ep9555e_check_source_valid+0xa8>
            }else _HAL_LOG(ep9555e,"linked on but de invalid");
 80093be:	4a09      	ldr	r2, [pc, #36]	; (80093e4 <ep9555e_check_source_valid+0xc4>)
 80093c0:	490a      	ldr	r1, [pc, #40]	; (80093ec <ep9555e_check_source_valid+0xcc>)
 80093c2:	2000      	movs	r0, #0
 80093c4:	f002 f9ee 	bl	800b7a4 <vatek_debug_print>
        }
    }
    
    if(!is_vatek_success(nres))_HAL_ERR(ep9555e,"check source fail : %d",nres);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	da05      	bge.n	80093da <ep9555e_check_source_valid+0xba>
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	4a04      	ldr	r2, [pc, #16]	; (80093e4 <ep9555e_check_source_valid+0xc4>)
 80093d2:	4907      	ldr	r1, [pc, #28]	; (80093f0 <ep9555e_check_source_valid+0xd0>)
 80093d4:	2002      	movs	r0, #2
 80093d6:	f002 f9e5 	bl	800b7a4 <vatek_debug_print>
    return nres;
 80093da:	68fb      	ldr	r3, [r7, #12]
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3710      	adds	r7, #16
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}
 80093e4:	0800ee4c 	.word	0x0800ee4c
 80093e8:	0800eed0 	.word	0x0800eed0
 80093ec:	0800eef0 	.word	0x0800eef0
 80093f0:	0800ef14 	.word	0x0800ef14

080093f4 <ep9555e_write_output_format>:

vatek_result ep9555e_write_output_format(Pep9555e_handle pep9555e)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b086      	sub	sp, #24
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
    uint8_t val = 0;
 80093fc:	2300      	movs	r3, #0
 80093fe:	73fb      	strb	r3, [r7, #15]
    uint8_t infopr = 0;
 8009400:	2300      	movs	r3, #0
 8009402:	73bb      	strb	r3, [r7, #14]
    uint8_t ncfg = EP9555E_OUTFMT_DEFAULT;
 8009404:	23a0      	movs	r3, #160	; 0xa0
 8009406:	737b      	strb	r3, [r7, #13]
    
    vatek_result nres = EP9555E_CHIP_RD(EP9555E_V_STATUS0,&val,1);
 8009408:	f107 020f 	add.w	r2, r7, #15
 800940c:	2301      	movs	r3, #1
 800940e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8009412:	2078      	movs	r0, #120	; 0x78
 8009414:	f000 fa7b 	bl	800990e <ep9555e_read>
 8009418:	6178      	str	r0, [r7, #20]
    if(is_vatek_success(nres))
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	2b00      	cmp	r3, #0
 800941e:	db08      	blt.n	8009432 <ep9555e_write_output_format+0x3e>
        nres = EP9555E_CHIP_RD(EP9555E_AVI_INFO + 5,&infopr,1);
 8009420:	f107 020e 	add.w	r2, r7, #14
 8009424:	2301      	movs	r3, #1
 8009426:	f640 0105 	movw	r1, #2053	; 0x805
 800942a:	2078      	movs	r0, #120	; 0x78
 800942c:	f000 fa6f 	bl	800990e <ep9555e_read>
 8009430:	6178      	str	r0, [r7, #20]
    
    if(is_vatek_success(nres))
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	2b00      	cmp	r3, #0
 8009436:	db41      	blt.n	80094bc <ep9555e_write_output_format+0xc8>
    {
        bsource_scale outmode = pep9555e->param.scale;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	613b      	str	r3, [r7, #16]
        if(val & EP9555E_V_STATUS0_VIN_FMT_YCC)
 800943e:	7bfb      	ldrb	r3, [r7, #15]
 8009440:	f003 0308 	and.w	r3, r3, #8
 8009444:	2b00      	cmp	r3, #0
 8009446:	d00e      	beq.n	8009466 <ep9555e_write_output_format+0x72>
        {
            ncfg |= EP9555E_MANUAL_VFMT_IN_YCC;
 8009448:	7b7b      	ldrb	r3, [r7, #13]
 800944a:	f043 0310 	orr.w	r3, r3, #16
 800944e:	b2db      	uxtb	r3, r3
 8009450:	737b      	strb	r3, [r7, #13]
            if(val & EP9555E_V_STATUS0_VIN_FMT_422)
 8009452:	7bfb      	ldrb	r3, [r7, #15]
 8009454:	f003 0301 	and.w	r3, r3, #1
 8009458:	2b00      	cmp	r3, #0
 800945a:	d004      	beq.n	8009466 <ep9555e_write_output_format+0x72>
                ncfg |= EP9555E_MANUAL_VFMT_IN422;
 800945c:	7b7b      	ldrb	r3, [r7, #13]
 800945e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009462:	b2db      	uxtb	r3, r3
 8009464:	737b      	strb	r3, [r7, #13]
        }
        
        if(val & EP9555E_V_STATUS0_VIN_FMT_Full_Range)
 8009466:	7bfb      	ldrb	r3, [r7, #15]
 8009468:	f003 0302 	and.w	r3, r3, #2
 800946c:	2b00      	cmp	r3, #0
 800946e:	d004      	beq.n	800947a <ep9555e_write_output_format+0x86>
            ncfg |= EP9555E_MANUAL_VFMT_RGB_range;
 8009470:	7b7b      	ldrb	r3, [r7, #13]
 8009472:	f043 0308 	orr.w	r3, r3, #8
 8009476:	b2db      	uxtb	r3, r3
 8009478:	737b      	strb	r3, [r7, #13]
        if(val & EP9555E_V_STATUS0_VIN_FMT_ITU709)
 800947a:	7bfb      	ldrb	r3, [r7, #15]
 800947c:	f003 0304 	and.w	r3, r3, #4
 8009480:	2b00      	cmp	r3, #0
 8009482:	d004      	beq.n	800948e <ep9555e_write_output_format+0x9a>
            ncfg |= EP9555E_MANUAL_VFMT_CS;
 8009484:	7b7b      	ldrb	r3, [r7, #13]
 8009486:	f043 0304 	orr.w	r3, r3, #4
 800948a:	b2db      	uxtb	r3, r3
 800948c:	737b      	strb	r3, [r7, #13]
        
        if(outmode == sscale_bypass)ncfg |= (infopr & 0xF);
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d10a      	bne.n	80094aa <ep9555e_write_output_format+0xb6>
 8009494:	7bbb      	ldrb	r3, [r7, #14]
 8009496:	b25b      	sxtb	r3, r3
 8009498:	f003 030f 	and.w	r3, r3, #15
 800949c:	b25a      	sxtb	r2, r3
 800949e:	7b7b      	ldrb	r3, [r7, #13]
 80094a0:	b25b      	sxtb	r3, r3
 80094a2:	4313      	orrs	r3, r2
 80094a4:	b25b      	sxtb	r3, r3
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	737b      	strb	r3, [r7, #13]
        nres = EP9555E_CHIP_WR(EP9555E_MANUAL_VFMT_Control,&ncfg,1);
 80094aa:	f107 020d 	add.w	r2, r7, #13
 80094ae:	2301      	movs	r3, #1
 80094b0:	f242 3101 	movw	r1, #8961	; 0x2301
 80094b4:	2078      	movs	r0, #120	; 0x78
 80094b6:	f000 f9c8 	bl	800984a <ep9555e_write>
 80094ba:	6178      	str	r0, [r7, #20]
    }
    
    if(!is_vatek_success(nres))
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	da05      	bge.n	80094ce <ep9555e_write_output_format+0xda>
        _HAL_ERR(ep9555e,"write output format fail : %d",nres);
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	4a04      	ldr	r2, [pc, #16]	; (80094d8 <ep9555e_write_output_format+0xe4>)
 80094c6:	4905      	ldr	r1, [pc, #20]	; (80094dc <ep9555e_write_output_format+0xe8>)
 80094c8:	2002      	movs	r0, #2
 80094ca:	f002 f96b 	bl	800b7a4 <vatek_debug_print>
    return nres;
 80094ce:	697b      	ldr	r3, [r7, #20]
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3718      	adds	r7, #24
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	0800ee4c 	.word	0x0800ee4c
 80094dc:	0800ef34 	.word	0x0800ef34

080094e0 <ep9555e_write_output_timing>:

vatek_result ep9555e_write_output_timing(Pep9555e_handle pep9555e)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b08e      	sub	sp, #56	; 0x38
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
    uint8_t val = 0;
 80094e8:	2300      	movs	r3, #0
 80094ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    Phdmi_video_id pvid = NULL;
 80094ee:	2300      	movs	r3, #0
 80094f0:	637b      	str	r3, [r7, #52]	; 0x34
    hdmi_video_timing vtime;
    uint8_t video_timing[EP9XXX_VTIME_SIZE];
    vatek_result nres = EP9555E_CHIP_RD(EP9555E_V_TIMING,&val,1);
 80094f2:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 80094f6:	2301      	movs	r3, #1
 80094f8:	f240 3101 	movw	r1, #769	; 0x301
 80094fc:	2078      	movs	r0, #120	; 0x78
 80094fe:	f000 fa06 	bl	800990e <ep9555e_read>
 8009502:	6338      	str	r0, [r7, #48]	; 0x30
    if(is_vatek_success(nres))
 8009504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009506:	2b00      	cmp	r3, #0
 8009508:	db24      	blt.n	8009554 <ep9555e_write_output_timing+0x74>
    {
        nres = vatek_unsupport;
 800950a:	f06f 0301 	mvn.w	r3, #1
 800950e:	633b      	str	r3, [r7, #48]	; 0x30
        pvid = hdmi_tool_get_video_id(val);
 8009510:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009514:	4618      	mov	r0, r3
 8009516:	f002 fa35 	bl	800b984 <hdmi_tool_get_video_id>
 800951a:	6378      	str	r0, [r7, #52]	; 0x34
        if(pvid == NULL)_HAL_LOG(ep9555e,"unsupport video code : %d",val);
 800951c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800951e:	2b00      	cmp	r3, #0
 8009520:	d107      	bne.n	8009532 <ep9555e_write_output_timing+0x52>
 8009522:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009526:	4a44      	ldr	r2, [pc, #272]	; (8009638 <ep9555e_write_output_timing+0x158>)
 8009528:	4944      	ldr	r1, [pc, #272]	; (800963c <ep9555e_write_output_timing+0x15c>)
 800952a:	2000      	movs	r0, #0
 800952c:	f002 f93a 	bl	800b7a4 <vatek_debug_print>
 8009530:	e010      	b.n	8009554 <ep9555e_write_output_timing+0x74>
        else
        {
            nres = ep9555e_read_timing(&video_timing[0]);
 8009532:	f107 0310 	add.w	r3, r7, #16
 8009536:	4618      	mov	r0, r3
 8009538:	f000 f94f 	bl	80097da <ep9555e_read_timing>
 800953c:	6338      	str	r0, [r7, #48]	; 0x30
            if(is_vatek_success(nres))
 800953e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009540:	2b00      	cmp	r3, #0
 8009542:	db07      	blt.n	8009554 <ep9555e_write_output_timing+0x74>
                ep9xxx_get_video_timing(&video_timing[0],&vtime);
 8009544:	f107 0220 	add.w	r2, r7, #32
 8009548:	f107 0310 	add.w	r3, r7, #16
 800954c:	4611      	mov	r1, r2
 800954e:	4618      	mov	r0, r3
 8009550:	f001 ff05 	bl	800b35e <ep9xxx_get_video_timing>
        }
    }
    
    if(is_vatek_success(nres))
 8009554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009556:	2b00      	cmp	r3, #0
 8009558:	db1c      	blt.n	8009594 <ep9555e_write_output_timing+0xb4>
    {
        if(pep9555e->param.scale != sscale_bypass)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d018      	beq.n	8009594 <ep9555e_write_output_timing+0xb4>
        {
            video_resolution resolution = pvid->resolution;
 8009562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009564:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8009568:	73fb      	strb	r3, [r7, #15]
            nres = ep9555e_get_current_resolution(pep9555e,&resolution);
 800956a:	f107 030f 	add.w	r3, r7, #15
 800956e:	4619      	mov	r1, r3
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f000 f895 	bl	80096a0 <ep9555e_get_current_resolution>
 8009576:	6338      	str	r0, [r7, #48]	; 0x30
            if(is_vatek_success(nres))
 8009578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800957a:	2b00      	cmp	r3, #0
 800957c:	db0a      	blt.n	8009594 <ep9555e_write_output_timing+0xb4>
                nres = ep9555e_get_scale_timing(resolution,pvid->framerate,&vtime);
 800957e:	f997 000f 	ldrsb.w	r0, [r7, #15]
 8009582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009584:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8009588:	f107 0220 	add.w	r2, r7, #32
 800958c:	4619      	mov	r1, r3
 800958e:	f000 f8ef 	bl	8009770 <ep9555e_get_scale_timing>
 8009592:	6338      	str	r0, [r7, #48]	; 0x30
        }
    }
    
    if(is_vatek_success(nres))
 8009594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009596:	2b00      	cmp	r3, #0
 8009598:	db49      	blt.n	800962e <ep9555e_write_output_timing+0x14e>
    {
        nres = ep9555e_write_chip_uint16(EP9555E_SCALE_ACTIVE_H,vtime.pixel_per_line);
 800959a:	8c3b      	ldrh	r3, [r7, #32]
 800959c:	4619      	mov	r1, r3
 800959e:	f44f 5014 	mov.w	r0, #9472	; 0x2500
 80095a2:	f000 f989 	bl	80098b8 <ep9555e_write_chip_uint16>
 80095a6:	6338      	str	r0, [r7, #48]	; 0x30
        if(is_vatek_success(nres))nres = ep9555e_write_chip_uint16(EP9555E_SCALE_ACTIVE_V,vtime.pixel_per_frame);
 80095a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	db06      	blt.n	80095bc <ep9555e_write_output_timing+0xdc>
 80095ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80095b0:	4619      	mov	r1, r3
 80095b2:	f242 5002 	movw	r0, #9474	; 0x2502
 80095b6:	f000 f97f 	bl	80098b8 <ep9555e_write_chip_uint16>
 80095ba:	6338      	str	r0, [r7, #48]	; 0x30
        if(is_vatek_success(nres))nres = ep9555e_write_chip_uint16(EP9555E_SCALE_H_DELAY,vtime.hfp);
 80095bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095be:	2b00      	cmp	r3, #0
 80095c0:	db06      	blt.n	80095d0 <ep9555e_write_output_timing+0xf0>
 80095c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095c4:	4619      	mov	r1, r3
 80095c6:	f242 5004 	movw	r0, #9476	; 0x2504
 80095ca:	f000 f975 	bl	80098b8 <ep9555e_write_chip_uint16>
 80095ce:	6338      	str	r0, [r7, #48]	; 0x30
        if(is_vatek_success(nres))nres = ep9555e_write_chip_uint16(EP9555E_SCALE_H_WIDTH,vtime.hpw);
 80095d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	db06      	blt.n	80095e4 <ep9555e_write_output_timing+0x104>
 80095d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80095d8:	4619      	mov	r1, r3
 80095da:	f242 5006 	movw	r0, #9478	; 0x2506
 80095de:	f000 f96b 	bl	80098b8 <ep9555e_write_chip_uint16>
 80095e2:	6338      	str	r0, [r7, #48]	; 0x30
        if(is_vatek_success(nres))nres = EP9555E_CHIP_WR(EP9555E_SCALE_V_DELAY,&vtime.vfp,1);
 80095e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	db0a      	blt.n	8009600 <ep9555e_write_output_timing+0x120>
 80095ea:	f107 0320 	add.w	r3, r7, #32
 80095ee:	f103 020a 	add.w	r2, r3, #10
 80095f2:	2301      	movs	r3, #1
 80095f4:	f242 5108 	movw	r1, #9480	; 0x2508
 80095f8:	2078      	movs	r0, #120	; 0x78
 80095fa:	f000 f926 	bl	800984a <ep9555e_write>
 80095fe:	6338      	str	r0, [r7, #48]	; 0x30
        if(is_vatek_success(nres))nres = EP9555E_CHIP_WR(EP9555E_SCALE_V_WIDTH,&vtime.vpw,1);
 8009600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009602:	2b00      	cmp	r3, #0
 8009604:	db0a      	blt.n	800961c <ep9555e_write_output_timing+0x13c>
 8009606:	f107 0320 	add.w	r3, r7, #32
 800960a:	f103 020c 	add.w	r2, r3, #12
 800960e:	2301      	movs	r3, #1
 8009610:	f242 5109 	movw	r1, #9481	; 0x2509
 8009614:	2078      	movs	r0, #120	; 0x78
 8009616:	f000 f918 	bl	800984a <ep9555e_write>
 800961a:	6338      	str	r0, [r7, #48]	; 0x30
        if(!is_vatek_success(nres))_HAL_LOG(ep9555e,"write output timing fail : %d",nres);   
 800961c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800961e:	2b00      	cmp	r3, #0
 8009620:	da05      	bge.n	800962e <ep9555e_write_output_timing+0x14e>
 8009622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009624:	4a04      	ldr	r2, [pc, #16]	; (8009638 <ep9555e_write_output_timing+0x158>)
 8009626:	4906      	ldr	r1, [pc, #24]	; (8009640 <ep9555e_write_output_timing+0x160>)
 8009628:	2000      	movs	r0, #0
 800962a:	f002 f8bb 	bl	800b7a4 <vatek_debug_print>
    }
    return nres;    
 800962e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8009630:	4618      	mov	r0, r3
 8009632:	3738      	adds	r7, #56	; 0x38
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}
 8009638:	0800ee4c 	.word	0x0800ee4c
 800963c:	0800ef5c 	.word	0x0800ef5c
 8009640:	0800ef80 	.word	0x0800ef80

08009644 <ep9555e_write_init>:

vatek_result ep9555e_write_init(Pep9555e_handle pep)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b086      	sub	sp, #24
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
        { EP9555E_OUTPUT_DISABLE_CNTL   ,0xD1 },    //SPDIF, IIS, DE, SYNC, DCLK, D0-2 in tri-state
    };
        
    #define INIT_REGS_NUM   (sizeof(ep9555e_init_regs)/sizeof(ep9555e_reg))

    int32_t i = 0;
 800964c:	2300      	movs	r3, #0
 800964e:	617b      	str	r3, [r7, #20]
    vatek_result nres = vatek_success;
 8009650:	2300      	movs	r3, #0
 8009652:	613b      	str	r3, [r7, #16]

    for(i = 0;i < INIT_REGS_NUM;i++)
 8009654:	2300      	movs	r3, #0
 8009656:	617b      	str	r3, [r7, #20]
 8009658:	e016      	b.n	8009688 <ep9555e_write_init+0x44>
    {
        uint8_t val = ep9555e_init_regs[i].val;
 800965a:	4a10      	ldr	r2, [pc, #64]	; (800969c <ep9555e_write_init+0x58>)
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	4413      	add	r3, r2
 8009662:	789b      	ldrb	r3, [r3, #2]
 8009664:	73fb      	strb	r3, [r7, #15]
        nres = EP9555E_CHIP_WR(ep9555e_init_regs[i].addr,&val,1);
 8009666:	4a0d      	ldr	r2, [pc, #52]	; (800969c <ep9555e_write_init+0x58>)
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800966e:	f107 020f 	add.w	r2, r7, #15
 8009672:	2301      	movs	r3, #1
 8009674:	2078      	movs	r0, #120	; 0x78
 8009676:	f000 f8e8 	bl	800984a <ep9555e_write>
 800967a:	6138      	str	r0, [r7, #16]
        if(!is_vatek_success(nres))break;	
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	2b00      	cmp	r3, #0
 8009680:	db06      	blt.n	8009690 <ep9555e_write_init+0x4c>
    for(i = 0;i < INIT_REGS_NUM;i++)
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	3301      	adds	r3, #1
 8009686:	617b      	str	r3, [r7, #20]
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	2b09      	cmp	r3, #9
 800968c:	d9e5      	bls.n	800965a <ep9555e_write_init+0x16>
 800968e:	e000      	b.n	8009692 <ep9555e_write_init+0x4e>
        if(!is_vatek_success(nres))break;	
 8009690:	bf00      	nop
    }
    return nres;
 8009692:	693b      	ldr	r3, [r7, #16]
}
 8009694:	4618      	mov	r0, r3
 8009696:	3718      	adds	r7, #24
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}
 800969c:	0800fd04 	.word	0x0800fd04

080096a0 <ep9555e_get_current_resolution>:

vatek_result ep9555e_get_current_resolution(Pep9555e_handle pep9555e,video_resolution* resolution)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
    vatek_result nres = vatek_badparam;
 80096aa:	f06f 0302 	mvn.w	r3, #2
 80096ae:	60fb      	str	r3, [r7, #12]
    if(pep9555e->param.scale == sscale_i_2_p)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d126      	bne.n	8009706 <ep9555e_get_current_resolution+0x66>
    {
        if(is_current_resolution(*resolution))
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	f993 3000 	ldrsb.w	r3, [r3]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	db1e      	blt.n	8009700 <ep9555e_get_current_resolution+0x60>
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	f993 3000 	ldrsb.w	r3, [r3]
 80096c8:	2b06      	cmp	r3, #6
 80096ca:	dc19      	bgt.n	8009700 <ep9555e_get_current_resolution+0x60>
        {
            if(*resolution == resolution_1080i)*resolution = resolution_1080p;
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	f993 3000 	ldrsb.w	r3, [r3]
 80096d2:	2b05      	cmp	r3, #5
 80096d4:	d103      	bne.n	80096de <ep9555e_get_current_resolution+0x3e>
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	2206      	movs	r2, #6
 80096da:	701a      	strb	r2, [r3, #0]
 80096dc:	e010      	b.n	8009700 <ep9555e_get_current_resolution+0x60>
            else if(*resolution == resolution_480i)*resolution = resolution_480p;
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	f993 3000 	ldrsb.w	r3, [r3]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d103      	bne.n	80096f0 <ep9555e_get_current_resolution+0x50>
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	2201      	movs	r2, #1
 80096ec:	701a      	strb	r2, [r3, #0]
 80096ee:	e007      	b.n	8009700 <ep9555e_get_current_resolution+0x60>
            else if(*resolution == resolution_576i)*resolution = resolution_576p;
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	f993 3000 	ldrsb.w	r3, [r3]
 80096f6:	2b02      	cmp	r3, #2
 80096f8:	d102      	bne.n	8009700 <ep9555e_get_current_resolution+0x60>
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	2203      	movs	r2, #3
 80096fe:	701a      	strb	r2, [r3, #0]
        }
        nres = vatek_success;
 8009700:	2300      	movs	r3, #0
 8009702:	60fb      	str	r3, [r7, #12]
 8009704:	e02b      	b.n	800975e <ep9555e_get_current_resolution+0xbe>
    }else if(pep9555e->param.scale == sscale_fixed_720p)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	2b04      	cmp	r3, #4
 800970c:	d11c      	bne.n	8009748 <ep9555e_get_current_resolution+0xa8>
    {
        if(*resolution > resolution_720p)
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	f993 3000 	ldrsb.w	r3, [r3]
 8009714:	2b04      	cmp	r3, #4
 8009716:	dd11      	ble.n	800973c <ep9555e_get_current_resolution+0x9c>
        {
            if(*resolution == resolution_480i)*resolution = resolution_480p;
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	f993 3000 	ldrsb.w	r3, [r3]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d103      	bne.n	800972a <ep9555e_get_current_resolution+0x8a>
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	2201      	movs	r2, #1
 8009726:	701a      	strb	r2, [r3, #0]
 8009728:	e00b      	b.n	8009742 <ep9555e_get_current_resolution+0xa2>
            else if(*resolution == resolution_576i)*resolution = resolution_576p;            
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	f993 3000 	ldrsb.w	r3, [r3]
 8009730:	2b02      	cmp	r3, #2
 8009732:	d106      	bne.n	8009742 <ep9555e_get_current_resolution+0xa2>
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	2203      	movs	r2, #3
 8009738:	701a      	strb	r2, [r3, #0]
 800973a:	e002      	b.n	8009742 <ep9555e_get_current_resolution+0xa2>
        }else *resolution = resolution_720p;
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	2204      	movs	r2, #4
 8009740:	701a      	strb	r2, [r3, #0]
        nres = vatek_success;
 8009742:	2300      	movs	r3, #0
 8009744:	60fb      	str	r3, [r7, #12]
 8009746:	e00a      	b.n	800975e <ep9555e_get_current_resolution+0xbe>
    }else if(pep9555e->param.scale != sscale_bypass)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d006      	beq.n	800975e <ep9555e_get_current_resolution+0xbe>
        _HAL_ERR(ep9555e,"unhandle output mode : %d",pep9555e->param.scale);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a04      	ldr	r2, [pc, #16]	; (8009768 <ep9555e_get_current_resolution+0xc8>)
 8009756:	4905      	ldr	r1, [pc, #20]	; (800976c <ep9555e_get_current_resolution+0xcc>)
 8009758:	2002      	movs	r0, #2
 800975a:	f002 f823 	bl	800b7a4 <vatek_debug_print>
    return nres;
 800975e:	68fb      	ldr	r3, [r7, #12]
}
 8009760:	4618      	mov	r0, r3
 8009762:	3710      	adds	r7, #16
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	0800ee4c 	.word	0x0800ee4c
 800976c:	0800efa8 	.word	0x0800efa8

08009770 <ep9555e_get_scale_timing>:

vatek_result ep9555e_get_scale_timing(video_resolution resolution,video_framerate fps,Phdmi_video_timing ptiming)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	4603      	mov	r3, r0
 8009778:	603a      	str	r2, [r7, #0]
 800977a:	71fb      	strb	r3, [r7, #7]
 800977c:	460b      	mov	r3, r1
 800977e:	71bb      	strb	r3, [r7, #6]
    /* 
        follow CEA-861D Table 2 Video Format Timings—Detailed Timing Information 
        hblank = hfp + hfb + hfw 
        vblank = vfp + vfb + vfw
    */
    Phdmi_video_id pvid = hdmi_tool_get_video_id_by_info(resolution,fps,aspectrate_16_9);
 8009780:	f997 1006 	ldrsb.w	r1, [r7, #6]
 8009784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009788:	2201      	movs	r2, #1
 800978a:	4618      	mov	r0, r3
 800978c:	f002 f926 	bl	800b9dc <hdmi_tool_get_video_id_by_info>
 8009790:	60f8      	str	r0, [r7, #12]
    if(pvid == NULL)return vatek_badparam;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d102      	bne.n	800979e <ep9555e_get_scale_timing+0x2e>
 8009798:	f06f 0302 	mvn.w	r3, #2
 800979c:	e004      	b.n	80097a8 <ep9555e_get_scale_timing+0x38>
    else
    {
        hdmi_tool_get_timing(pvid,ptiming);
 800979e:	6839      	ldr	r1, [r7, #0]
 80097a0:	68f8      	ldr	r0, [r7, #12]
 80097a2:	f002 fa0d 	bl	800bbc0 <hdmi_tool_get_timing>
        return vatek_success;
 80097a6:	2300      	movs	r3, #0
    }
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3710      	adds	r7, #16
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <swip_byte>:

void swip_byte(uint8_t* pbuf)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b085      	sub	sp, #20
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
    uint8_t tmp = pbuf[0];
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	73fb      	strb	r3, [r7, #15]
    pbuf[0] = pbuf[1];
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	785a      	ldrb	r2, [r3, #1]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	701a      	strb	r2, [r3, #0]
    pbuf[1] = tmp;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	3301      	adds	r3, #1
 80097ca:	7bfa      	ldrb	r2, [r7, #15]
 80097cc:	701a      	strb	r2, [r3, #0]
}
 80097ce:	bf00      	nop
 80097d0:	3714      	adds	r7, #20
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr

080097da <ep9555e_read_timing>:

vatek_result ep9555e_read_timing(uint8_t* pbuf)
{
 80097da:	b580      	push	{r7, lr}
 80097dc:	b084      	sub	sp, #16
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6078      	str	r0, [r7, #4]
    #define EP9555E_SYNC_H_LEN  8
    #define EP9555E_SYNC_V_LEN  5
    
    vatek_result nres = EP9555E_CHIP_RD(EP9555E_SYNC_TIMING_H,&pbuf[0],EP9555E_SYNC_H_LEN);
 80097e2:	2308      	movs	r3, #8
 80097e4:	687a      	ldr	r2, [r7, #4]
 80097e6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80097ea:	2078      	movs	r0, #120	; 0x78
 80097ec:	f000 f88f 	bl	800990e <ep9555e_read>
 80097f0:	60f8      	str	r0, [r7, #12]
    if(is_vatek_success(nres))nres = EP9555E_CHIP_RD(EP9555E_SYNC_TIMING_V,&pbuf[EP9555E_SYNC_H_LEN],EP9555E_SYNC_V_LEN);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	db09      	blt.n	800980c <ep9555e_read_timing+0x32>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f103 0208 	add.w	r2, r3, #8
 80097fe:	2305      	movs	r3, #5
 8009800:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8009804:	2078      	movs	r0, #120	; 0x78
 8009806:	f000 f882 	bl	800990e <ep9555e_read>
 800980a:	60f8      	str	r0, [r7, #12]
    
    if(is_vatek_success(nres))
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2b00      	cmp	r3, #0
 8009810:	db16      	blt.n	8009840 <ep9555e_read_timing+0x66>
    {
        swip_byte(&pbuf[0]);
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f7ff ffcc 	bl	80097b0 <swip_byte>
        swip_byte(&pbuf[2]);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	3302      	adds	r3, #2
 800981c:	4618      	mov	r0, r3
 800981e:	f7ff ffc7 	bl	80097b0 <swip_byte>
        swip_byte(&pbuf[4]);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	3304      	adds	r3, #4
 8009826:	4618      	mov	r0, r3
 8009828:	f7ff ffc2 	bl	80097b0 <swip_byte>
        swip_byte(&pbuf[6]);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	3306      	adds	r3, #6
 8009830:	4618      	mov	r0, r3
 8009832:	f7ff ffbd 	bl	80097b0 <swip_byte>
        swip_byte(&pbuf[8]);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	3308      	adds	r3, #8
 800983a:	4618      	mov	r0, r3
 800983c:	f7ff ffb8 	bl	80097b0 <swip_byte>
    }
    return nres;
 8009840:	68fb      	ldr	r3, [r7, #12]
}
 8009842:	4618      	mov	r0, r3
 8009844:	3710      	adds	r7, #16
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}

0800984a <ep9555e_write>:

vatek_result ep9555e_write(uint8_t dev, uint16_t reg, uint8_t* pbuf, int32_t len)
{
 800984a:	b580      	push	{r7, lr}
 800984c:	b086      	sub	sp, #24
 800984e:	af00      	add	r7, sp, #0
 8009850:	60ba      	str	r2, [r7, #8]
 8009852:	607b      	str	r3, [r7, #4]
 8009854:	4603      	mov	r3, r0
 8009856:	73fb      	strb	r3, [r7, #15]
 8009858:	460b      	mov	r3, r1
 800985a:	81bb      	strh	r3, [r7, #12]
	uint8_t buf[2];
	vatek_result nres = hal_i2c_start(EP9555E_ADDR_W(dev),0);
 800985c:	7bfb      	ldrb	r3, [r7, #15]
 800985e:	2100      	movs	r1, #0
 8009860:	4618      	mov	r0, r3
 8009862:	f003 fcba 	bl	800d1da <hal_i2c_start>
 8009866:	6178      	str	r0, [r7, #20]
	if (is_vatek_success(nres))
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	2b00      	cmp	r3, #0
 800986c:	db1c      	blt.n	80098a8 <ep9555e_write+0x5e>
	{		
		buf[0] = (uint8_t)(reg >> 8);
 800986e:	89bb      	ldrh	r3, [r7, #12]
 8009870:	0a1b      	lsrs	r3, r3, #8
 8009872:	b29b      	uxth	r3, r3
 8009874:	b2db      	uxtb	r3, r3
 8009876:	743b      	strb	r3, [r7, #16]
		buf[1] = (uint8_t)reg;
 8009878:	89bb      	ldrh	r3, [r7, #12]
 800987a:	b2db      	uxtb	r3, r3
 800987c:	747b      	strb	r3, [r7, #17]
		nres = hal_i2c_write(&buf[0], 2);
 800987e:	f107 0310 	add.w	r3, r7, #16
 8009882:	2102      	movs	r1, #2
 8009884:	4618      	mov	r0, r3
 8009886:	f003 fcc4 	bl	800d212 <hal_i2c_write>
 800988a:	6178      	str	r0, [r7, #20]
        if(is_vatek_success(nres))nres = hal_i2c_write(pbuf, len);
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	2b00      	cmp	r3, #0
 8009890:	db04      	blt.n	800989c <ep9555e_write+0x52>
 8009892:	6879      	ldr	r1, [r7, #4]
 8009894:	68b8      	ldr	r0, [r7, #8]
 8009896:	f003 fcbc 	bl	800d212 <hal_i2c_write>
 800989a:	6178      	str	r0, [r7, #20]
		if (is_vatek_success(nres))nres = hal_i2c_stop();
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	db02      	blt.n	80098a8 <ep9555e_write+0x5e>
 80098a2:	f003 fcec 	bl	800d27e <hal_i2c_stop>
 80098a6:	6178      	str	r0, [r7, #20]
	}
	hal_system_sleep(EP9555E_CMD_DELAY);
 80098a8:	2002      	movs	r0, #2
 80098aa:	f003 fc1f 	bl	800d0ec <hal_system_sleep>
    return nres;
 80098ae:	697b      	ldr	r3, [r7, #20]
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3718      	adds	r7, #24
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <ep9555e_write_chip_uint16>:

vatek_result ep9555e_write_chip_uint16(uint16_t addr,uint16_t val)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	4603      	mov	r3, r0
 80098c0:	460a      	mov	r2, r1
 80098c2:	80fb      	strh	r3, [r7, #6]
 80098c4:	4613      	mov	r3, r2
 80098c6:	80bb      	strh	r3, [r7, #4]
    uint8_t buf = (uint8_t)(val >> 8);
 80098c8:	88bb      	ldrh	r3, [r7, #4]
 80098ca:	0a1b      	lsrs	r3, r3, #8
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	b2db      	uxtb	r3, r3
 80098d0:	72fb      	strb	r3, [r7, #11]
    vatek_result nres = EP9555E_CHIP_WR(addr,&buf,1);
 80098d2:	f107 020b 	add.w	r2, r7, #11
 80098d6:	88f9      	ldrh	r1, [r7, #6]
 80098d8:	2301      	movs	r3, #1
 80098da:	2078      	movs	r0, #120	; 0x78
 80098dc:	f7ff ffb5 	bl	800984a <ep9555e_write>
 80098e0:	60f8      	str	r0, [r7, #12]
    if(is_vatek_success(nres))
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	db0d      	blt.n	8009904 <ep9555e_write_chip_uint16+0x4c>
    {
        addr++;
 80098e8:	88fb      	ldrh	r3, [r7, #6]
 80098ea:	3301      	adds	r3, #1
 80098ec:	80fb      	strh	r3, [r7, #6]
        buf = (uint8_t)val & 0xFF;
 80098ee:	88bb      	ldrh	r3, [r7, #4]
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	72fb      	strb	r3, [r7, #11]
        nres = EP9555E_CHIP_WR(addr,&buf,1);
 80098f4:	f107 020b 	add.w	r2, r7, #11
 80098f8:	88f9      	ldrh	r1, [r7, #6]
 80098fa:	2301      	movs	r3, #1
 80098fc:	2078      	movs	r0, #120	; 0x78
 80098fe:	f7ff ffa4 	bl	800984a <ep9555e_write>
 8009902:	60f8      	str	r0, [r7, #12]
    }
    return nres;
 8009904:	68fb      	ldr	r3, [r7, #12]
}
 8009906:	4618      	mov	r0, r3
 8009908:	3710      	adds	r7, #16
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <ep9555e_read>:


vatek_result ep9555e_read(uint8_t dev, uint16_t reg, uint8_t* pbuf, int32_t len)
{
 800990e:	b580      	push	{r7, lr}
 8009910:	b086      	sub	sp, #24
 8009912:	af00      	add	r7, sp, #0
 8009914:	60ba      	str	r2, [r7, #8]
 8009916:	607b      	str	r3, [r7, #4]
 8009918:	4603      	mov	r3, r0
 800991a:	73fb      	strb	r3, [r7, #15]
 800991c:	460b      	mov	r3, r1
 800991e:	81bb      	strh	r3, [r7, #12]
	uint8_t buf[2];
	vatek_result nres = vatek_success;
 8009920:	2300      	movs	r3, #0
 8009922:	617b      	str	r3, [r7, #20]

    buf[0] = (uint8_t)(reg >> 8);
 8009924:	89bb      	ldrh	r3, [r7, #12]
 8009926:	0a1b      	lsrs	r3, r3, #8
 8009928:	b29b      	uxth	r3, r3
 800992a:	b2db      	uxtb	r3, r3
 800992c:	743b      	strb	r3, [r7, #16]
    buf[1] = (uint8_t)reg;
 800992e:	89bb      	ldrh	r3, [r7, #12]
 8009930:	b2db      	uxtb	r3, r3
 8009932:	747b      	strb	r3, [r7, #17]
    
    nres = hal_i2c_start(EP9555E_ADDR_W(dev),0);
 8009934:	7bfb      	ldrb	r3, [r7, #15]
 8009936:	2100      	movs	r1, #0
 8009938:	4618      	mov	r0, r3
 800993a:	f003 fc4e 	bl	800d1da <hal_i2c_start>
 800993e:	6178      	str	r0, [r7, #20]
	if (is_vatek_success(nres))nres = hal_i2c_write(&buf[0], 2);
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	2b00      	cmp	r3, #0
 8009944:	db06      	blt.n	8009954 <ep9555e_read+0x46>
 8009946:	f107 0310 	add.w	r3, r7, #16
 800994a:	2102      	movs	r1, #2
 800994c:	4618      	mov	r0, r3
 800994e:	f003 fc60 	bl	800d212 <hal_i2c_write>
 8009952:	6178      	str	r0, [r7, #20]
    if (is_vatek_success(nres))nres = hal_i2c_stop();
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	2b00      	cmp	r3, #0
 8009958:	db02      	blt.n	8009960 <ep9555e_read+0x52>
 800995a:	f003 fc90 	bl	800d27e <hal_i2c_stop>
 800995e:	6178      	str	r0, [r7, #20]
    if (is_vatek_success(nres))
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	2b00      	cmp	r3, #0
 8009964:	db16      	blt.n	8009994 <ep9555e_read+0x86>
    {
        nres = hal_i2c_start(EP9555E_ADDR_R(dev),0);
 8009966:	7bfb      	ldrb	r3, [r7, #15]
 8009968:	f043 0301 	orr.w	r3, r3, #1
 800996c:	b2db      	uxtb	r3, r3
 800996e:	2100      	movs	r1, #0
 8009970:	4618      	mov	r0, r3
 8009972:	f003 fc32 	bl	800d1da <hal_i2c_start>
 8009976:	6178      	str	r0, [r7, #20]
        if (is_vatek_success(nres))
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	2b00      	cmp	r3, #0
 800997c:	db0a      	blt.n	8009994 <ep9555e_read+0x86>
        {
            nres = hal_i2c_read(pbuf, len);
 800997e:	6879      	ldr	r1, [r7, #4]
 8009980:	68b8      	ldr	r0, [r7, #8]
 8009982:	f003 fc61 	bl	800d248 <hal_i2c_read>
 8009986:	6178      	str	r0, [r7, #20]
            if (is_vatek_success(nres))nres = hal_i2c_stop();
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	2b00      	cmp	r3, #0
 800998c:	db02      	blt.n	8009994 <ep9555e_read+0x86>
 800998e:	f003 fc76 	bl	800d27e <hal_i2c_stop>
 8009992:	6178      	str	r0, [r7, #20]
        }
    }
    return nres;
 8009994:	697b      	ldr	r3, [r7, #20]
}
 8009996:	4618      	mov	r0, r3
 8009998:	3718      	adds	r7, #24
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}

0800999e <h1_check_support>:
extern vatek_result h1_write_output(sx1804_param output,Pbridge_source psource);
//extern void sa1804a_set_video_info(Phdmi_video_id phdmiinfo,Pbridge_video_info psource,int32_t isclk1001);

static uint8_t reg_val = 0;
vatek_result h1_check_support()
{
 800999e:	b580      	push	{r7, lr}
 80099a0:	af00      	add	r7, sp, #0
    return hal_i2c_check_device(H1_I2C_ADDR);
 80099a2:	20e0      	movs	r0, #224	; 0xe0
 80099a4:	f003 fc0b 	bl	800d1be <hal_i2c_check_device>
 80099a8:	4603      	mov	r3, r0
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	bd80      	pop	{r7, pc}
	...

080099b0 <h1_open>:

vatek_result h1_open(hbridge_source* hsource)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
    Ph1_handle newdrv = (Ph1_handle)malloc(sizeof(h1_handle));
 80099b8:	2004      	movs	r0, #4
 80099ba:	f004 faa1 	bl	800df00 <malloc>
 80099be:	4603      	mov	r3, r0
 80099c0:	60bb      	str	r3, [r7, #8]
    vatek_result nres = vatek_memfail;
 80099c2:	f06f 030a 	mvn.w	r3, #10
 80099c6:	60fb      	str	r3, [r7, #12]
    nres = h1_write(H1_POWER,H1_POWER_ON);
 80099c8:	2101      	movs	r1, #1
 80099ca:	f44f 7080 	mov.w	r0, #256	; 0x100
 80099ce:	f000 fbb7 	bl	800a140 <h1_write>
 80099d2:	60f8      	str	r0, [r7, #12]
    nres = h1_read(H1_POWER,&reg_val);
 80099d4:	4919      	ldr	r1, [pc, #100]	; (8009a3c <h1_open+0x8c>)
 80099d6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80099da:	f000 fbe4 	bl	800a1a6 <h1_read>
 80099de:	60f8      	str	r0, [r7, #12]
    printf("h1_open function H1_POWER = 0x%08x\r\n",reg_val);
 80099e0:	4b16      	ldr	r3, [pc, #88]	; (8009a3c <h1_open+0x8c>)
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	4619      	mov	r1, r3
 80099e6:	4816      	ldr	r0, [pc, #88]	; (8009a40 <h1_open+0x90>)
 80099e8:	f004 fb90 	bl	800e10c <iprintf>
    if(!is_vatek_success(nres)){
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	da05      	bge.n	80099fe <h1_open+0x4e>
    	printf("H1 power on fail %d",nres);
 80099f2:	68f9      	ldr	r1, [r7, #12]
 80099f4:	4813      	ldr	r0, [pc, #76]	; (8009a44 <h1_open+0x94>)
 80099f6:	f004 fb89 	bl	800e10c <iprintf>
    	return nres;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	e01a      	b.n	8009a34 <h1_open+0x84>
    }
    if(newdrv)
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d013      	beq.n	8009a2c <h1_open+0x7c>
    {
        memset(newdrv,0,sizeof(h1_handle));
 8009a04:	2204      	movs	r2, #4
 8009a06:	2100      	movs	r1, #0
 8009a08:	68b8      	ldr	r0, [r7, #8]
 8009a0a:	f004 fa97 	bl	800df3c <memset>
        //newdrv->pi2c = pi2c;
        newdrv->param.scale = sscale_bypass;
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	2200      	movs	r2, #0
 8009a12:	601a      	str	r2, [r3, #0]
        *hsource = newdrv;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	68ba      	ldr	r2, [r7, #8]
 8009a18:	601a      	str	r2, [r3, #0]
        nres = h1_set_output(*hsource,0,NULL);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	2100      	movs	r1, #0
 8009a22:	4618      	mov	r0, r3
 8009a24:	f000 f934 	bl	8009c90 <h1_set_output>
 8009a28:	60f8      	str	r0, [r7, #12]
 8009a2a:	e002      	b.n	8009a32 <h1_open+0x82>
    }
    else
    	printf("open H1 device fail");
 8009a2c:	4806      	ldr	r0, [pc, #24]	; (8009a48 <h1_open+0x98>)
 8009a2e:	f004 fb6d 	bl	800e10c <iprintf>
    return nres;
 8009a32:	68fb      	ldr	r3, [r7, #12]
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3710      	adds	r7, #16
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	20000aa4 	.word	0x20000aa4
 8009a40:	0800f008 	.word	0x0800f008
 8009a44:	0800f030 	.word	0x0800f030
 8009a48:	0800f044 	.word	0x0800f044

08009a4c <h1_config>:

vatek_result h1_config(hbridge_source hsource,Pbavsource_param param)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b082      	sub	sp, #8
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	6039      	str	r1, [r7, #0]
	printf("h1 configuration well");
 8009a56:	4804      	ldr	r0, [pc, #16]	; (8009a68 <h1_config+0x1c>)
 8009a58:	f004 fb58 	bl	800e10c <iprintf>
    return vatek_unsupport;
 8009a5c:	f06f 0301 	mvn.w	r3, #1
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3708      	adds	r7, #8
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}
 8009a68:	0800f058 	.word	0x0800f058

08009a6c <h1_get_status>:
//    psource->signal_flag = VI_BUSWIDTH_16 | VI_SEPARATED_SYNC;
//    if(isclk1001)hdmi_tool_change_base_clock(sbaseclk_1001,psource);
//}

vatek_result h1_get_status(hbridge_source hsource,Pbridge_source pbsourcesttaus)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b086      	sub	sp, #24
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
	uint32_t tick_error = 0;
 8009a76:	2300      	movs	r3, #0
 8009a78:	613b      	str	r3, [r7, #16]
    vatek_result nres = vatek_success;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	617b      	str	r3, [r7, #20]
    memset(pbsourcesttaus,0,sizeof(bridge_source));
 8009a7e:	2220      	movs	r2, #32
 8009a80:	2100      	movs	r1, #0
 8009a82:	6838      	ldr	r0, [r7, #0]
 8009a84:	f004 fa5a 	bl	800df3c <memset>
	//hal_system_sleep(150);
    nres = h1_check_link_on(&pbsourcesttaus->status);
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f000 fb04 	bl	800a098 <h1_check_link_on>
 8009a90:	6178      	str	r0, [r7, #20]

    if(nres != 0){
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d006      	beq.n	8009aa6 <h1_get_status+0x3a>
		hal_system_sleep(100);
 8009a98:	2064      	movs	r0, #100	; 0x64
 8009a9a:	f003 fb27 	bl	800d0ec <hal_system_sleep>
		printf("h1_check_link_on = %d\r\n",nres);
 8009a9e:	6979      	ldr	r1, [r7, #20]
 8009aa0:	4871      	ldr	r0, [pc, #452]	; (8009c68 <h1_get_status+0x1fc>)
 8009aa2:	f004 fb33 	bl	800e10c <iprintf>
    }

    if(is_vatek_success(nres))
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	f2c0 80ca 	blt.w	8009c42 <h1_get_status+0x1d6>
    {
        if(pbsourcesttaus->status >= bstatus_active) //remove so it can pass to next step, and can see the parameter on interface 220110
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	f993 3000 	ldrsb.w	r3, [r3]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	f340 809a 	ble.w	8009bee <h1_get_status+0x182>
        {
            uint8_t vstatus = 0;
 8009aba:	2300      	movs	r3, #0
 8009abc:	72fb      	strb	r3, [r7, #11]
            uint8_t vhdmi = 0x40; //0 20220310
 8009abe:	2340      	movs	r3, #64	; 0x40
 8009ac0:	72bb      	strb	r3, [r7, #10]

    		//hal_system_sleep(150);
            nres = h1_read(H1_VIN_VIC,&vstatus);
 8009ac2:	f107 030b 	add.w	r3, r7, #11
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	f44f 7001 	mov.w	r0, #516	; 0x204
 8009acc:	f000 fb6b 	bl	800a1a6 <h1_read>
 8009ad0:	6178      	str	r0, [r7, #20]

            if(nres != 0){
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d007      	beq.n	8009ae8 <h1_get_status+0x7c>
        		hal_system_sleep(100);
 8009ad8:	2064      	movs	r0, #100	; 0x64
 8009ada:	f003 fb07 	bl	800d0ec <hal_system_sleep>
        		printf("vstatus = %d\r\n",vstatus);
 8009ade:	7afb      	ldrb	r3, [r7, #11]
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	4862      	ldr	r0, [pc, #392]	; (8009c6c <h1_get_status+0x200>)
 8009ae4:	f004 fb12 	bl	800e10c <iprintf>
            }

            if(is_vatek_success(nres)){
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	db16      	blt.n	8009b1c <h1_get_status+0xb0>
        		//hal_system_sleep(150);
            	nres = h1_read(H1_HDMI_FLAG,&vhdmi);
 8009aee:	f107 030a 	add.w	r3, r7, #10
 8009af2:	4619      	mov	r1, r3
 8009af4:	f44f 7082 	mov.w	r0, #260	; 0x104
 8009af8:	f000 fb55 	bl	800a1a6 <h1_read>
 8009afc:	6178      	str	r0, [r7, #20]
                if(nres != 0){
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d00b      	beq.n	8009b1c <h1_get_status+0xb0>
            		hal_system_sleep(100);
 8009b04:	2064      	movs	r0, #100	; 0x64
 8009b06:	f003 faf1 	bl	800d0ec <hal_system_sleep>
            		printf("vhdmi_nres = %d\r\n",nres);
 8009b0a:	6979      	ldr	r1, [r7, #20]
 8009b0c:	4858      	ldr	r0, [pc, #352]	; (8009c70 <h1_get_status+0x204>)
 8009b0e:	f004 fafd 	bl	800e10c <iprintf>
            		printf("vhdmi = 0x%08x\r\n",vhdmi);
 8009b12:	7abb      	ldrb	r3, [r7, #10]
 8009b14:	4619      	mov	r1, r3
 8009b16:	4857      	ldr	r0, [pc, #348]	; (8009c74 <h1_get_status+0x208>)
 8009b18:	f004 faf8 	bl	800e10c <iprintf>
                }
            }
            if(is_vatek_success(nres))
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	db13      	blt.n	8009b4a <h1_get_status+0xde>
            {

                Phdmi_video_id ptime = hdmi_tool_get_video_id(vstatus);                //printf("ptime = 0x%08x------\r\n",ptime);
 8009b22:	7afb      	ldrb	r3, [r7, #11]
 8009b24:	4618      	mov	r0, r3
 8009b26:	f001 ff2d 	bl	800b984 <hdmi_tool_get_video_id>
 8009b2a:	60f8      	str	r0, [r7, #12]

                if(ptime == NULL)
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d103      	bne.n	8009b3a <h1_get_status+0xce>
                {
                	pbsourcesttaus->status = bstatus_invalid;
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	22fe      	movs	r2, #254	; 0xfe
 8009b36:	701a      	strb	r2, [r3, #0]
 8009b38:	e007      	b.n	8009b4a <h1_get_status+0xde>
                }else h1_set_video_info(ptime,pbsourcesttaus,h1_output_bypass,(vhdmi & H1_HDMI_FLAG_PCLK_1001));
 8009b3a:	7abb      	ldrb	r3, [r7, #10]
 8009b3c:	f003 0301 	and.w	r3, r3, #1
 8009b40:	2200      	movs	r2, #0
 8009b42:	6839      	ldr	r1, [r7, #0]
 8009b44:	68f8      	ldr	r0, [r7, #12]
 8009b46:	f000 fa6a 	bl	800a01e <h1_set_video_info>
            }

            if(is_vatek_success(nres))
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	db47      	blt.n	8009be0 <h1_get_status+0x174>
				#define AUDIO_SAMPLE_FREQ_44_1KHZ	0x01
				#define AUDIO_SAMPLE_FREQ_48KHZ		0x02

				//Ph1_handle pdrv = (Ph1_handle)hsource;

				if(is_vatek_success(nres))
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	db44      	blt.n	8009be0 <h1_get_status+0x174>
				{
					if(pbsourcesttaus->status >= bstatus_active)
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	f993 3000 	ldrsb.w	r3, [r3]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	dd35      	ble.n	8009bcc <h1_get_status+0x160>
					{
						uint8_t val = 0;
 8009b60:	2300      	movs	r3, #0
 8009b62:	727b      	strb	r3, [r7, #9]
	            		//hal_system_sleep(150);

						nres = h1_read(H1_AIN_STATUS,&val);
 8009b64:	f107 0309 	add.w	r3, r7, #9
 8009b68:	4619      	mov	r1, r3
 8009b6a:	f240 3002 	movw	r0, #770	; 0x302
 8009b6e:	f000 fb1a 	bl	800a1a6 <h1_read>
 8009b72:	6178      	str	r0, [r7, #20]
		                if(nres != 0){
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d00b      	beq.n	8009b92 <h1_get_status+0x126>
		            		hal_system_sleep(100);
 8009b7a:	2064      	movs	r0, #100	; 0x64
 8009b7c:	f003 fab6 	bl	800d0ec <hal_system_sleep>
		            		printf("H1_AIN_STATUS = %d\r\n",val);
 8009b80:	7a7b      	ldrb	r3, [r7, #9]
 8009b82:	4619      	mov	r1, r3
 8009b84:	483c      	ldr	r0, [pc, #240]	; (8009c78 <h1_get_status+0x20c>)
 8009b86:	f004 fac1 	bl	800e10c <iprintf>
		            		printf("nres %d\r\n",nres);
 8009b8a:	6979      	ldr	r1, [r7, #20]
 8009b8c:	483b      	ldr	r0, [pc, #236]	; (8009c7c <h1_get_status+0x210>)
 8009b8e:	f004 fabd 	bl	800e10c <iprintf>
		                }
						//printf("h1_get_status H1_AIN_STATUS(0x0302) = 0x%08x\r\n",val);
						if(is_vatek_success(nres))
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	db23      	blt.n	8009be0 <h1_get_status+0x174>
						{
							val &= H1_AIN_STATUS_SAMP_FREQ;
 8009b98:	7a7b      	ldrb	r3, [r7, #9]
 8009b9a:	f003 0307 	and.w	r3, r3, #7
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	727b      	strb	r3, [r7, #9]
							if(val == AUDIO_SAMPLE_FREQ_32KHZ)pbsourcesttaus->audio_info.samplerate = sample_rate_32;
 8009ba2:	7a7b      	ldrb	r3, [r7, #9]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d103      	bne.n	8009bb0 <h1_get_status+0x144>
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	2200      	movs	r2, #0
 8009bac:	771a      	strb	r2, [r3, #28]
 8009bae:	e009      	b.n	8009bc4 <h1_get_status+0x158>
							else if(val == AUDIO_SAMPLE_FREQ_44_1KHZ)pbsourcesttaus->audio_info.samplerate = sample_rate_44_1;
 8009bb0:	7a7b      	ldrb	r3, [r7, #9]
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	d103      	bne.n	8009bbe <h1_get_status+0x152>
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	2201      	movs	r2, #1
 8009bba:	771a      	strb	r2, [r3, #28]
 8009bbc:	e002      	b.n	8009bc4 <h1_get_status+0x158>
							else pbsourcesttaus->audio_info.samplerate = sample_rate_48;
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	2202      	movs	r2, #2
 8009bc2:	771a      	strb	r2, [r3, #28]
							pbsourcesttaus->audio_info.channel = channel_stereo;
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	775a      	strb	r2, [r3, #29]
 8009bca:	e009      	b.n	8009be0 <h1_get_status+0x174>
						}
					}else{
						hal_system_sleep(100);
 8009bcc:	2064      	movs	r0, #100	; 0x64
 8009bce:	f003 fa8d 	bl	800d0ec <hal_system_sleep>
						printf("bridge status = %d(idle=0,hw_fail=-1,invalid=-2)\r\n",pbsourcesttaus->status);
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	f993 3000 	ldrsb.w	r3, [r3]
 8009bd8:	4619      	mov	r1, r3
 8009bda:	4829      	ldr	r0, [pc, #164]	; (8009c80 <h1_get_status+0x214>)
 8009bdc:	f004 fa96 	bl	800e10c <iprintf>
						//hal_system_sleep(100);
					}
				}

            }
            if(!is_vatek_success(nres))pbsourcesttaus->status = bstatus_invalid;
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	da2b      	bge.n	8009c3e <h1_get_status+0x1d2>
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	22fe      	movs	r2, #254	; 0xfe
 8009bea:	701a      	strb	r2, [r3, #0]
 8009bec:	e027      	b.n	8009c3e <h1_get_status+0x1d2>

        }else{
    		//hal_system_sleep(150);
        	nres = h1_check_link_on(&pbsourcesttaus->status);
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f000 fa51 	bl	800a098 <h1_check_link_on>
 8009bf6:	6178      	str	r0, [r7, #20]
            if(nres != 0){
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d006      	beq.n	8009c0c <h1_get_status+0x1a0>
        		hal_system_sleep(100);
 8009bfe:	2064      	movs	r0, #100	; 0x64
 8009c00:	f003 fa74 	bl	800d0ec <hal_system_sleep>
        		printf("pbsourcesttaus->status = %d\r\n",nres);
 8009c04:	6979      	ldr	r1, [r7, #20]
 8009c06:	481f      	ldr	r0, [pc, #124]	; (8009c84 <h1_get_status+0x218>)
 8009c08:	f004 fa80 	bl	800e10c <iprintf>
            }

        	if(nres != vatek_success){
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d015      	beq.n	8009c3e <h1_get_status+0x1d2>
				hal_system_sleep(500);
 8009c12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009c16:	f003 fa69 	bl	800d0ec <hal_system_sleep>

				tick_error = vatek_get_tick_ms();
 8009c1a:	f001 fdbb 	bl	800b794 <vatek_get_tick_ms>
 8009c1e:	6138      	str	r0, [r7, #16]
				printf("error occur system clock = 0x%08x\r\n",tick_error);
 8009c20:	6939      	ldr	r1, [r7, #16]
 8009c22:	4819      	ldr	r0, [pc, #100]	; (8009c88 <h1_get_status+0x21c>)
 8009c24:	f004 fa72 	bl	800e10c <iprintf>
				hal_system_sleep(500);
 8009c28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009c2c:	f003 fa5e 	bl	800d0ec <hal_system_sleep>

				printf("H1 status(0=idle,-1=hw_fail,-2=invalid) = %d\r\n",pbsourcesttaus->status);
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	f993 3000 	ldrsb.w	r3, [r3]
 8009c36:	4619      	mov	r1, r3
 8009c38:	4814      	ldr	r0, [pc, #80]	; (8009c8c <h1_get_status+0x220>)
 8009c3a:	f004 fa67 	bl	800e10c <iprintf>
        	}
        }
        return nres;
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	e00e      	b.n	8009c60 <h1_get_status+0x1f4>
    }

    if(nres != 0){
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d009      	beq.n	8009c5c <h1_get_status+0x1f0>
		hal_system_sleep(100);
 8009c48:	2064      	movs	r0, #100	; 0x64
 8009c4a:	f003 fa4f 	bl	800d0ec <hal_system_sleep>
		printf("pbsourcesttaus->status = %d\r\n", pbsourcesttaus->status);
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	f993 3000 	ldrsb.w	r3, [r3]
 8009c54:	4619      	mov	r1, r3
 8009c56:	480b      	ldr	r0, [pc, #44]	; (8009c84 <h1_get_status+0x218>)
 8009c58:	f004 fa58 	bl	800e10c <iprintf>

    }

    return vatek_unsupport;
 8009c5c:	f06f 0301 	mvn.w	r3, #1
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3718      	adds	r7, #24
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}
 8009c68:	0800f090 	.word	0x0800f090
 8009c6c:	0800f0a8 	.word	0x0800f0a8
 8009c70:	0800f0b8 	.word	0x0800f0b8
 8009c74:	0800f0cc 	.word	0x0800f0cc
 8009c78:	0800f0e0 	.word	0x0800f0e0
 8009c7c:	0800f0f8 	.word	0x0800f0f8
 8009c80:	0800f104 	.word	0x0800f104
 8009c84:	0800f138 	.word	0x0800f138
 8009c88:	0800f158 	.word	0x0800f158
 8009c8c:	0800f17c 	.word	0x0800f17c

08009c90 <h1_set_output>:
    }
    return nres;
}

vatek_result h1_set_output(hbridge_source hsource, int32_t isoutput, Pbridge_source psource)//, Pbridge_source psource, remove psource to avoid address overwrite
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b08c      	sub	sp, #48	; 0x30
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	60b9      	str	r1, [r7, #8]
 8009c9a:	607a      	str	r2, [r7, #4]
    vatek_result nres = vatek_success;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    Ph1_handle pdrv = (Ph1_handle)hsource;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	62bb      	str	r3, [r7, #40]	; 0x28
    if(isoutput)
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d026      	beq.n	8009cf8 <h1_set_output+0x68>
//            nres = vatek_badstatus;
//            if(psource->status >= bstatus_active)
//            {
#if 1
                hdmi_video_timing vtime;
                Phdmi_video_id pvid = hdmi_tool_get_video_id_by_info(psource->video_info.resolution,
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f993 0008 	ldrsb.w	r0, [r3, #8]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f993 1009 	ldrsb.w	r1, [r3, #9]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	f001 fe8d 	bl	800b9dc <hdmi_tool_get_video_id_by_info>
 8009cc2:	6278      	str	r0, [r7, #36]	; 0x24
                                                                     psource->video_info.framerate,
                                                                     psource->video_info.aspectrate);
                if(pvid)
 8009cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00c      	beq.n	8009ce4 <h1_set_output+0x54>
                        else _HAL_ERR(sx1804a,"unknown resolution : %d",resolutionscale);
                        pvid = hdmi_tool_get_video_id_by_info(resolutionscale,psource->info.framerate,psource->info.aspectrate);
                    }
                    #endif

                    hdmi_tool_get_timing(pvid,&vtime);
 8009cca:	f107 0314 	add.w	r3, r7, #20
 8009cce:	4619      	mov	r1, r3
 8009cd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009cd2:	f001 ff75 	bl	800bbc0 <hdmi_tool_get_timing>
                    nres = h1_write_output_timing(&vtime,pvid);
 8009cd6:	f107 0314 	add.w	r3, r7, #20
 8009cda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f000 f937 	bl	8009f50 <h1_write_output_timing>
 8009ce2:	62f8      	str	r0, [r7, #44]	; 0x2c
                }
#endif

                if(is_vatek_success(nres)){
 8009ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	db1c      	blt.n	8009d24 <h1_set_output+0x94>
                    nres = h1_write_output(pdrv->param,psource);//NULL , psource
 8009cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cec:	6879      	ldr	r1, [r7, #4]
 8009cee:	6818      	ldr	r0, [r3, #0]
 8009cf0:	f000 f82e 	bl	8009d50 <h1_write_output>
 8009cf4:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009cf6:	e015      	b.n	8009d24 <h1_set_output+0x94>
                }

//            }
//        }
    }else{
    	nres = h1_write(H1_OUT_CNTL,H1_OUT_CNTL_DIS_ALL); /* disable output */
 8009cf8:	21d0      	movs	r1, #208	; 0xd0
 8009cfa:	f44f 7040 	mov.w	r0, #768	; 0x300
 8009cfe:	f000 fa1f 	bl	800a140 <h1_write>
 8009d02:	62f8      	str	r0, [r7, #44]	; 0x2c
    	hal_system_sleep(500);
 8009d04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009d08:	f003 f9f0 	bl	800d0ec <hal_system_sleep>
    	nres = h1_read(H1_OUT_CNTL,&reg_val);
 8009d0c:	4908      	ldr	r1, [pc, #32]	; (8009d30 <h1_set_output+0xa0>)
 8009d0e:	f44f 7040 	mov.w	r0, #768	; 0x300
 8009d12:	f000 fa48 	bl	800a1a6 <h1_read>
 8009d16:	62f8      	str	r0, [r7, #44]	; 0x2c
    	printf("h1_set_output function H1_OUT_CNTL = 0x%08x\r\n",reg_val);
 8009d18:	4b05      	ldr	r3, [pc, #20]	; (8009d30 <h1_set_output+0xa0>)
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	4805      	ldr	r0, [pc, #20]	; (8009d34 <h1_set_output+0xa4>)
 8009d20:	f004 f9f4 	bl	800e10c <iprintf>
    }
   
    return nres;
 8009d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3730      	adds	r7, #48	; 0x30
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	20000aa4 	.word	0x20000aa4
 8009d34:	0800f1ac 	.word	0x0800f1ac

08009d38 <h1_close>:

void h1_close(hbridge_source hsource)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b082      	sub	sp, #8
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
    free(hsource);
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f004 f8e5 	bl	800df10 <free>
}
 8009d46:	bf00      	nop
 8009d48:	3708      	adds	r7, #8
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
	...

08009d50 <h1_write_output>:

vatek_result h1_write_output(sx1804_param output,Pbridge_source psource)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	6039      	str	r1, [r7, #0]
//    #define SX1804A_DEF_OUTPUT  (SX1804A_V_MODE_VOUT_EN | SX1804A_V_MODE_COLOR_YCRCB_422)
//    #define SX1804A_DEF_V_BYPASS (SX1804A_V_IN_DEF_V_INVERT | SX1804A_V_IN_DEF_SCALE_BYPASS)
    uint8_t flag = H1_HDMI_FLAG_BYPASS_MODE;
 8009d5a:	2340      	movs	r3, #64	; 0x40
 8009d5c:	72bb      	strb	r3, [r7, #10]
    vatek_result nres = vatek_success;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	60fb      	str	r3, [r7, #12]

//    nres = h1_write(H1_OUT_CNTL,H1_OUT_CNTL_DIS_ALL); /* disable output */
    output.scale = sscale_bypass;
 8009d62:	2300      	movs	r3, #0
 8009d64:	607b      	str	r3, [r7, #4]
    if(output.scale == sscale_bypass)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d15a      	bne.n	8009e22 <h1_write_output+0xd2>
    {
        if(is_resolution_interlaced(psource->video_info.resolution))
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d009      	beq.n	8009d8a <h1_write_output+0x3a>
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009d7c:	2b02      	cmp	r3, #2
 8009d7e:	d004      	beq.n	8009d8a <h1_write_output+0x3a>
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009d86:	2b05      	cmp	r3, #5
 8009d88:	d115      	bne.n	8009db6 <h1_write_output+0x66>
        {
            flag |= H1_HDMI_FLAG_OUT_INTERLACED;
 8009d8a:	7abb      	ldrb	r3, [r7, #10]
 8009d8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009d90:	72bb      	strb	r3, [r7, #10]
            nres = h1_write(H1_HDMI_FLAG,0x0);//flag
 8009d92:	2100      	movs	r1, #0
 8009d94:	f44f 7082 	mov.w	r0, #260	; 0x104
 8009d98:	f000 f9d2 	bl	800a140 <h1_write>
 8009d9c:	60f8      	str	r0, [r7, #12]
            nres = h1_read(H1_HDMI_FLAG,&reg_val);
 8009d9e:	4964      	ldr	r1, [pc, #400]	; (8009f30 <h1_write_output+0x1e0>)
 8009da0:	f44f 7082 	mov.w	r0, #260	; 0x104
 8009da4:	f000 f9ff 	bl	800a1a6 <h1_read>
 8009da8:	60f8      	str	r0, [r7, #12]
            printf("h1_write_output function H1_HDMI_FLAG(0x0104) = 0x%08x\r\n",reg_val);
 8009daa:	4b61      	ldr	r3, [pc, #388]	; (8009f30 <h1_write_output+0x1e0>)
 8009dac:	781b      	ldrb	r3, [r3, #0]
 8009dae:	4619      	mov	r1, r3
 8009db0:	4860      	ldr	r0, [pc, #384]	; (8009f34 <h1_write_output+0x1e4>)
 8009db2:	f004 f9ab 	bl	800e10c <iprintf>
            if(is_vatek_success(nres))nres = h1_write(pi2c,SX1804A_V_BT656,0x22);   /* interlaced mode      */
        else nres = h1_write(pi2c,SX1804A_V_IN_DEF,SX1804A_DEF_V_BYPASS);//SX1804A_V_IN_DEF_SCALE_BYPASS
#endif
        }

        uint8_t vifmt = 0, vout_fmt = H1_OUT_FMT_422|H1_OUT_FMT_YCC;
 8009db6:	2300      	movs	r3, #0
 8009db8:	727b      	strb	r3, [r7, #9]
 8009dba:	23a0      	movs	r3, #160	; 0xa0
 8009dbc:	72fb      	strb	r3, [r7, #11]
        nres = h1_read(H1_VIN_FMT, &vifmt);
 8009dbe:	f107 0309 	add.w	r3, r7, #9
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	f240 2003 	movw	r0, #515	; 0x203
 8009dc8:	f000 f9ed 	bl	800a1a6 <h1_read>
 8009dcc:	60f8      	str	r0, [r7, #12]
        if(vifmt&H1_VIN_FMT_CS709) vout_fmt |= H1_OUT_FMT_CS709;
 8009dce:	7a7b      	ldrb	r3, [r7, #9]
 8009dd0:	f003 0304 	and.w	r3, r3, #4
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d003      	beq.n	8009de0 <h1_write_output+0x90>
 8009dd8:	7afb      	ldrb	r3, [r7, #11]
 8009dda:	f043 0304 	orr.w	r3, r3, #4
 8009dde:	72fb      	strb	r3, [r7, #11]
        if(psource->video_info.resolution == resolution_480i || psource->video_info.resolution == resolution_576i) vout_fmt |= H1_OUT_FMT_PR2;
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d004      	beq.n	8009df4 <h1_write_output+0xa4>
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009df0:	2b02      	cmp	r3, #2
 8009df2:	d103      	bne.n	8009dfc <h1_write_output+0xac>
 8009df4:	7afb      	ldrb	r3, [r7, #11]
 8009df6:	f043 0301 	orr.w	r3, r3, #1
 8009dfa:	72fb      	strb	r3, [r7, #11]
        nres = h1_write(H1_OUT_FMT, vout_fmt);//vout_fmt
 8009dfc:	7afb      	ldrb	r3, [r7, #11]
 8009dfe:	4619      	mov	r1, r3
 8009e00:	f240 2001 	movw	r0, #513	; 0x201
 8009e04:	f000 f99c 	bl	800a140 <h1_write>
 8009e08:	60f8      	str	r0, [r7, #12]
        nres = h1_read(H1_OUT_FMT,&reg_val);
 8009e0a:	4949      	ldr	r1, [pc, #292]	; (8009f30 <h1_write_output+0x1e0>)
 8009e0c:	f240 2001 	movw	r0, #513	; 0x201
 8009e10:	f000 f9c9 	bl	800a1a6 <h1_read>
 8009e14:	60f8      	str	r0, [r7, #12]
        printf("h1_write_output function H1_OUT_FMT = 0x%08x\r\n",reg_val);
 8009e16:	4b46      	ldr	r3, [pc, #280]	; (8009f30 <h1_write_output+0x1e0>)
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	4846      	ldr	r0, [pc, #280]	; (8009f38 <h1_write_output+0x1e8>)
 8009e1e:	f004 f975 	bl	800e10c <iprintf>
    }


    if(is_vatek_success(nres))
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	db7d      	blt.n	8009f24 <h1_write_output+0x1d4>
    {

//        nres = sx1804a_write(pi2c,SX1804A_POL_CNT,SX1804A_POL_CNT_HS | SX1804A_POL_CNT_VS);
//        if(is_vatek_success(nres))
    	hal_system_sleep(100);
 8009e28:	2064      	movs	r0, #100	; 0x64
 8009e2a:	f003 f95f 	bl	800d0ec <hal_system_sleep>
        nres = h1_write(H1_AOUT_CFG, 0x13);
 8009e2e:	2113      	movs	r1, #19
 8009e30:	f240 3001 	movw	r0, #769	; 0x301
 8009e34:	f000 f984 	bl	800a140 <h1_write>
 8009e38:	60f8      	str	r0, [r7, #12]
        hal_system_sleep(100); //wait to write
 8009e3a:	2064      	movs	r0, #100	; 0x64
 8009e3c:	f003 f956 	bl	800d0ec <hal_system_sleep>
        nres = h1_read(H1_AOUT_CFG,&reg_val);
 8009e40:	493b      	ldr	r1, [pc, #236]	; (8009f30 <h1_write_output+0x1e0>)
 8009e42:	f240 3001 	movw	r0, #769	; 0x301
 8009e46:	f000 f9ae 	bl	800a1a6 <h1_read>
 8009e4a:	60f8      	str	r0, [r7, #12]
        printf("h1_write_output function H1_AOUT_CFG(0x0301) = 0x%08x\r\n",reg_val);
 8009e4c:	4b38      	ldr	r3, [pc, #224]	; (8009f30 <h1_write_output+0x1e0>)
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	4619      	mov	r1, r3
 8009e52:	483a      	ldr	r0, [pc, #232]	; (8009f3c <h1_write_output+0x1ec>)
 8009e54:	f004 f95a 	bl	800e10c <iprintf>

        nres = h1_write(H1_INT_EN,0x00);
 8009e58:	2100      	movs	r1, #0
 8009e5a:	f240 1001 	movw	r0, #257	; 0x101
 8009e5e:	f000 f96f 	bl	800a140 <h1_write>
 8009e62:	60f8      	str	r0, [r7, #12]

        hal_system_sleep(100);
 8009e64:	2064      	movs	r0, #100	; 0x64
 8009e66:	f003 f941 	bl	800d0ec <hal_system_sleep>
        nres = h1_write(H1_OUT_FMT, 0xA4);//vout_fmt
 8009e6a:	21a4      	movs	r1, #164	; 0xa4
 8009e6c:	f240 2001 	movw	r0, #513	; 0x201
 8009e70:	f000 f966 	bl	800a140 <h1_write>
 8009e74:	60f8      	str	r0, [r7, #12]
        hal_system_sleep(100);//wait to write
 8009e76:	2064      	movs	r0, #100	; 0x64
 8009e78:	f003 f938 	bl	800d0ec <hal_system_sleep>
		nres = h1_read(H1_OUT_FMT,&reg_val);
 8009e7c:	492c      	ldr	r1, [pc, #176]	; (8009f30 <h1_write_output+0x1e0>)
 8009e7e:	f240 2001 	movw	r0, #513	; 0x201
 8009e82:	f000 f990 	bl	800a1a6 <h1_read>
 8009e86:	60f8      	str	r0, [r7, #12]
		printf("h1_write_output function H1_OUT_FMT(0x0201) = 0x%08x\r\n",reg_val);
 8009e88:	4b29      	ldr	r3, [pc, #164]	; (8009f30 <h1_write_output+0x1e0>)
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	482c      	ldr	r0, [pc, #176]	; (8009f40 <h1_write_output+0x1f0>)
 8009e90:	f004 f93c 	bl	800e10c <iprintf>

        hal_system_sleep(100);
 8009e94:	2064      	movs	r0, #100	; 0x64
 8009e96:	f003 f929 	bl	800d0ec <hal_system_sleep>
        nres = h1_write(H1_VOUT_CFG, 0x42);
 8009e9a:	2142      	movs	r1, #66	; 0x42
 8009e9c:	f240 2002 	movw	r0, #514	; 0x202
 8009ea0:	f000 f94e 	bl	800a140 <h1_write>
 8009ea4:	60f8      	str	r0, [r7, #12]
        hal_system_sleep(100);//wait to write
 8009ea6:	2064      	movs	r0, #100	; 0x64
 8009ea8:	f003 f920 	bl	800d0ec <hal_system_sleep>
        nres = h1_read(H1_VOUT_CFG,&reg_val);
 8009eac:	4920      	ldr	r1, [pc, #128]	; (8009f30 <h1_write_output+0x1e0>)
 8009eae:	f240 2002 	movw	r0, #514	; 0x202
 8009eb2:	f000 f978 	bl	800a1a6 <h1_read>
 8009eb6:	60f8      	str	r0, [r7, #12]
        printf("h1_write_output function H1_VOUT_CFG(0x0202) = 0x%08x\r\n",reg_val);
 8009eb8:	4b1d      	ldr	r3, [pc, #116]	; (8009f30 <h1_write_output+0x1e0>)
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	4821      	ldr	r0, [pc, #132]	; (8009f44 <h1_write_output+0x1f4>)
 8009ec0:	f004 f924 	bl	800e10c <iprintf>

        hal_system_sleep(100);
 8009ec4:	2064      	movs	r0, #100	; 0x64
 8009ec6:	f003 f911 	bl	800d0ec <hal_system_sleep>
        nres = h1_write(H1_INT_CNTL, 0x02);
 8009eca:	2102      	movs	r1, #2
 8009ecc:	f240 1003 	movw	r0, #259	; 0x103
 8009ed0:	f000 f936 	bl	800a140 <h1_write>
 8009ed4:	60f8      	str	r0, [r7, #12]
        hal_system_sleep(100);//wait to write
 8009ed6:	2064      	movs	r0, #100	; 0x64
 8009ed8:	f003 f908 	bl	800d0ec <hal_system_sleep>
        nres = h1_read(H1_INT_CNTL,&reg_val);
 8009edc:	4914      	ldr	r1, [pc, #80]	; (8009f30 <h1_write_output+0x1e0>)
 8009ede:	f240 1003 	movw	r0, #259	; 0x103
 8009ee2:	f000 f960 	bl	800a1a6 <h1_read>
 8009ee6:	60f8      	str	r0, [r7, #12]
        printf("h1_write_output function H1_INT_CNTL(0x0103) = 0x%08x\r\n",reg_val);
 8009ee8:	4b11      	ldr	r3, [pc, #68]	; (8009f30 <h1_write_output+0x1e0>)
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	4619      	mov	r1, r3
 8009eee:	4816      	ldr	r0, [pc, #88]	; (8009f48 <h1_write_output+0x1f8>)
 8009ef0:	f004 f90c 	bl	800e10c <iprintf>

        hal_system_sleep(100);
 8009ef4:	2064      	movs	r0, #100	; 0x64
 8009ef6:	f003 f8f9 	bl	800d0ec <hal_system_sleep>
        nres = h1_write(H1_OUT_CNTL, 0x00);
 8009efa:	2100      	movs	r1, #0
 8009efc:	f44f 7040 	mov.w	r0, #768	; 0x300
 8009f00:	f000 f91e 	bl	800a140 <h1_write>
 8009f04:	60f8      	str	r0, [r7, #12]
        hal_system_sleep(100);
 8009f06:	2064      	movs	r0, #100	; 0x64
 8009f08:	f003 f8f0 	bl	800d0ec <hal_system_sleep>
        nres = h1_read(H1_OUT_CNTL,&reg_val);
 8009f0c:	4908      	ldr	r1, [pc, #32]	; (8009f30 <h1_write_output+0x1e0>)
 8009f0e:	f44f 7040 	mov.w	r0, #768	; 0x300
 8009f12:	f000 f948 	bl	800a1a6 <h1_read>
 8009f16:	60f8      	str	r0, [r7, #12]
        printf("h1_write_output function H1_OUT_CNTL(0x0300) = 0x%08x\r\n",reg_val);
 8009f18:	4b05      	ldr	r3, [pc, #20]	; (8009f30 <h1_write_output+0x1e0>)
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	480b      	ldr	r0, [pc, #44]	; (8009f4c <h1_write_output+0x1fc>)
 8009f20:	f004 f8f4 	bl	800e10c <iprintf>
    }
    return nres;
 8009f24:	68fb      	ldr	r3, [r7, #12]
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3710      	adds	r7, #16
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	20000aa4 	.word	0x20000aa4
 8009f34:	0800f1dc 	.word	0x0800f1dc
 8009f38:	0800f218 	.word	0x0800f218
 8009f3c:	0800f248 	.word	0x0800f248
 8009f40:	0800f280 	.word	0x0800f280
 8009f44:	0800f2b8 	.word	0x0800f2b8
 8009f48:	0800f2f0 	.word	0x0800f2f0
 8009f4c:	0800f328 	.word	0x0800f328

08009f50 <h1_write_output_timing>:
#if 1
vatek_result h1_write_output_timing(Phdmi_video_timing ptiming,Phdmi_video_id pvid)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b084      	sub	sp, #16
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	6039      	str	r1, [r7, #0]
    //uint16_t addr = SX1804A_V_SCALE;
    uint16_t vtotal = ptiming->pixel_per_frame + ptiming->vbp + ptiming->vfp + ptiming->vpw;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	885a      	ldrh	r2, [r3, #2]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	7adb      	ldrb	r3, [r3, #11]
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	4413      	add	r3, r2
 8009f66:	b29a      	uxth	r2, r3
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	7a9b      	ldrb	r3, [r3, #10]
 8009f6c:	b29b      	uxth	r3, r3
 8009f6e:	4413      	add	r3, r2
 8009f70:	b29a      	uxth	r2, r3
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	7b1b      	ldrb	r3, [r3, #12]
 8009f76:	b29b      	uxth	r3, r3
 8009f78:	4413      	add	r3, r2
 8009f7a:	817b      	strh	r3, [r7, #10]
    vatek_result nres = vatek_success;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	60fb      	str	r3, [r7, #12]

    if(pvid->represent != 0)
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	785b      	ldrb	r3, [r3, #1]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d011      	beq.n	8009fac <h1_write_output_timing+0x5c>
    {
        ptiming->hbp >>= 1;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	88db      	ldrh	r3, [r3, #6]
 8009f8c:	085b      	lsrs	r3, r3, #1
 8009f8e:	b29a      	uxth	r2, r3
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	80da      	strh	r2, [r3, #6]
        ptiming->hfp >>= 1;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	889b      	ldrh	r3, [r3, #4]
 8009f98:	085b      	lsrs	r3, r3, #1
 8009f9a:	b29a      	uxth	r2, r3
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	809a      	strh	r2, [r3, #4]
        ptiming->hpw >>= 1;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	891b      	ldrh	r3, [r3, #8]
 8009fa4:	085b      	lsrs	r3, r3, #1
 8009fa6:	b29a      	uxth	r2, r3
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	811a      	strh	r2, [r3, #8]
    }

//    nres = h1_write(pi2c,addr++,ptiming->vbp);
//    if(is_vatek_success(nres))
    nres = h1_write(H1_VOUT_V_WIDTH,ptiming->vpw);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	7b1b      	ldrb	r3, [r3, #12]
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	f240 200e 	movw	r0, #526	; 0x20e
 8009fb6:	f000 f8c3 	bl	800a140 <h1_write>
 8009fba:	60f8      	str	r0, [r7, #12]

    if(is_vatek_success(nres))
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	db07      	blt.n	8009fd2 <h1_write_output_timing+0x82>
        nres = h1_write_uint16_t(H1_VOUT_V_DELAY,ptiming->hfp);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	889b      	ldrh	r3, [r3, #4]
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	f240 200d 	movw	r0, #525	; 0x20d
 8009fcc:	f000 f894 	bl	800a0f8 <h1_write_uint16_t>
 8009fd0:	60f8      	str	r0, [r7, #12]
//    addr += 2;

    if(is_vatek_success(nres))
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	db07      	blt.n	8009fe8 <h1_write_output_timing+0x98>
        nres = h1_write_uint16_t(H1_VOUT_H_WIDTH,ptiming->hpw);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	891b      	ldrh	r3, [r3, #8]
 8009fdc:	4619      	mov	r1, r3
 8009fde:	f240 200b 	movw	r0, #523	; 0x20b
 8009fe2:	f000 f889 	bl	800a0f8 <h1_write_uint16_t>
 8009fe6:	60f8      	str	r0, [r7, #12]

//    if(is_vatek_success(nres))
//        nres = h1_write_uint16_t(pi2c,addr,ptiming->hbp);
//    addr += 2;

    if(is_vatek_success(nres))
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	db07      	blt.n	8009ffe <h1_write_output_timing+0xae>
        nres = h1_write_uint16_t(H1_VOUT_ACTIVE_H,ptiming->pixel_per_line);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	881b      	ldrh	r3, [r3, #0]
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	f240 2005 	movw	r0, #517	; 0x205
 8009ff8:	f000 f87e 	bl	800a0f8 <h1_write_uint16_t>
 8009ffc:	60f8      	str	r0, [r7, #12]
//    addr += 2;

    if(is_vatek_success(nres))
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2b00      	cmp	r3, #0
 800a002:	db07      	blt.n	800a014 <h1_write_output_timing+0xc4>
        nres = h1_write_uint16_t(H1_VOUT_ACTIVE_V,ptiming->pixel_per_frame);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	885b      	ldrh	r3, [r3, #2]
 800a008:	4619      	mov	r1, r3
 800a00a:	f240 2007 	movw	r0, #519	; 0x207
 800a00e:	f000 f873 	bl	800a0f8 <h1_write_uint16_t>
 800a012:	60f8      	str	r0, [r7, #12]
//    addr += 2;

//    if(is_vatek_success(nres))
//        nres = h1_write_uint16_t(pi2c,addr,vtotal);

    return nres;
 800a014:	68fb      	ldr	r3, [r7, #12]
}
 800a016:	4618      	mov	r0, r3
 800a018:	3710      	adds	r7, #16
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}

0800a01e <h1_set_video_info>:
#endif
void h1_set_video_info(Phdmi_video_id phdmiinfo,Pbridge_source psource,h1_output_mode output,int32_t is1001)
{
 800a01e:	b580      	push	{r7, lr}
 800a020:	b086      	sub	sp, #24
 800a022:	af00      	add	r7, sp, #0
 800a024:	60f8      	str	r0, [r7, #12]
 800a026:	60b9      	str	r1, [r7, #8]
 800a028:	603b      	str	r3, [r7, #0]
 800a02a:	4613      	mov	r3, r2
 800a02c:	71fb      	strb	r3, [r7, #7]
    psource->video_info.resolution = phdmiinfo->resolution;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	721a      	strb	r2, [r3, #8]
    psource->video_info.aspectrate = phdmiinfo->aspectratio;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	729a      	strb	r2, [r3, #10]
    psource->video_info.framerate = phdmiinfo->framerate;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	725a      	strb	r2, [r3, #9]
    psource->video_info.offset_x = 0;
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	2200      	movs	r2, #0
 800a050:	60da      	str	r2, [r3, #12]
    psource->video_info.offset_y = 0;
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	2200      	movs	r2, #0
 800a056:	611a      	str	r2, [r3, #16]
    psource->video_info.pixelclk = phdmiinfo->pixelclk;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	689a      	ldr	r2, [r3, #8]
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	615a      	str	r2, [r3, #20]

    if(phdmiinfo->represent != 0)
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	785b      	ldrb	r3, [r3, #1]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d004      	beq.n	800a072 <h1_set_video_info+0x54>
        psource->video_info.pixelclk >>= 1;
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	695b      	ldr	r3, [r3, #20]
 800a06c:	085a      	lsrs	r2, r3, #1
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	615a      	str	r2, [r3, #20]

    psource->video_info.signal_flag = VI_BUSWIDTH_16 | VI_SEPARATED_SYNC;
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	2250      	movs	r2, #80	; 0x50
 800a076:	619a      	str	r2, [r3, #24]
    Pbridge_video_info v_info = &psource->video_info;
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	3308      	adds	r3, #8
 800a07c:	617b      	str	r3, [r7, #20]
    if(is1001)hdmi_tool_change_base_clock(sbaseclk_1001,&psource->video_info);
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d005      	beq.n	800a090 <h1_set_video_info+0x72>
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	3308      	adds	r3, #8
 800a088:	4619      	mov	r1, r3
 800a08a:	2001      	movs	r0, #1
 800a08c:	f001 fcf6 	bl	800ba7c <hdmi_tool_change_base_clock>
}
 800a090:	bf00      	nop
 800a092:	3718      	adds	r7, #24
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <h1_check_link_on>:

vatek_result h1_check_link_on(bridge_status* bstatus)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b086      	sub	sp, #24
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
    #define H1_HDMI_VALID  (H1_SYS_STATUS2_DE | H1_SYS_STATUS2_LINK)
    int count = 0;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	617b      	str	r3, [r7, #20]

    uint8_t val = 0;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	73fb      	strb	r3, [r7, #15]

    vatek_result nres = h1_read(H1_SYS_STATUS2,&val);
 800a0a8:	f107 030f 	add.w	r3, r7, #15
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	f44f 7083 	mov.w	r0, #262	; 0x106
 800a0b2:	f000 f878 	bl	800a1a6 <h1_read>
 800a0b6:	6138      	str	r0, [r7, #16]

    *bstatus = bstatus_idle;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	701a      	strb	r2, [r3, #0]
    if(is_vatek_success(nres))
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	db14      	blt.n	800a0ee <h1_check_link_on+0x56>
    {
		//printf("val = %d\r\n",val);

		if(val & H1_SYS_STATUS2_HPD)
 800a0c4:	7bfb      	ldrb	r3, [r7, #15]
 800a0c6:	f003 0310 	and.w	r3, r3, #16
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d00c      	beq.n	800a0e8 <h1_check_link_on+0x50>
		{
			if((val & H1_HDMI_VALID) == H1_HDMI_VALID)
 800a0ce:	7bfb      	ldrb	r3, [r7, #15]
 800a0d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a0d4:	2bc0      	cmp	r3, #192	; 0xc0
 800a0d6:	d103      	bne.n	800a0e0 <h1_check_link_on+0x48>
			{
				*bstatus = bstatus_active;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	701a      	strb	r2, [r3, #0]
 800a0de:	e006      	b.n	800a0ee <h1_check_link_on+0x56>
				/* check is hdcp enable ?? bstatus_active_protect */
			}
			else {
		    	*bstatus = bstatus_invalid;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	22fe      	movs	r2, #254	; 0xfe
 800a0e4:	701a      	strb	r2, [r3, #0]
 800a0e6:	e002      	b.n	800a0ee <h1_check_link_on+0x56>
			}
		}
		else {
	    	*bstatus = bstatus_invalid;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	22fe      	movs	r2, #254	; 0xfe
 800a0ec:	701a      	strb	r2, [r3, #0]
		}
    }

    return nres;
 800a0ee:	693b      	ldr	r3, [r7, #16]
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3718      	adds	r7, #24
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <h1_write_uint16_t>:

vatek_result h1_write_uint16_t(uint16_t reg,uint16_t val)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	4603      	mov	r3, r0
 800a100:	460a      	mov	r2, r1
 800a102:	80fb      	strh	r3, [r7, #6]
 800a104:	4613      	mov	r3, r2
 800a106:	80bb      	strh	r3, [r7, #4]
    vatek_result nres = h1_write(reg++,(uint8_t)val);
 800a108:	88fb      	ldrh	r3, [r7, #6]
 800a10a:	1c5a      	adds	r2, r3, #1
 800a10c:	80fa      	strh	r2, [r7, #6]
 800a10e:	88ba      	ldrh	r2, [r7, #4]
 800a110:	b2d2      	uxtb	r2, r2
 800a112:	4611      	mov	r1, r2
 800a114:	4618      	mov	r0, r3
 800a116:	f000 f813 	bl	800a140 <h1_write>
 800a11a:	60f8      	str	r0, [r7, #12]
    if(is_vatek_success(nres))
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	db09      	blt.n	800a136 <h1_write_uint16_t+0x3e>
        nres = h1_write(reg,(uint8_t)(val >> 8));
 800a122:	88bb      	ldrh	r3, [r7, #4]
 800a124:	0a1b      	lsrs	r3, r3, #8
 800a126:	b29b      	uxth	r3, r3
 800a128:	b2da      	uxtb	r2, r3
 800a12a:	88fb      	ldrh	r3, [r7, #6]
 800a12c:	4611      	mov	r1, r2
 800a12e:	4618      	mov	r0, r3
 800a130:	f000 f806 	bl	800a140 <h1_write>
 800a134:	60f8      	str	r0, [r7, #12]
    return nres;
 800a136:	68fb      	ldr	r3, [r7, #12]
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3710      	adds	r7, #16
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <h1_write>:

vatek_result h1_write(uint16_t reg,uint8_t val)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
 800a146:	4603      	mov	r3, r0
 800a148:	460a      	mov	r2, r1
 800a14a:	80fb      	strh	r3, [r7, #6]
 800a14c:	4613      	mov	r3, r2
 800a14e:	717b      	strb	r3, [r7, #5]
	uint8_t buf[2];
	vatek_result nres = hal_i2c_start(H1_I2C_WRITE,0);
 800a150:	2100      	movs	r1, #0
 800a152:	20e0      	movs	r0, #224	; 0xe0
 800a154:	f003 f841 	bl	800d1da <hal_i2c_start>
 800a158:	60f8      	str	r0, [r7, #12]
	if (is_vatek_success(nres))
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	db1d      	blt.n	800a19c <h1_write+0x5c>
	{
		buf[0] = (uint8_t)(reg >> 8);
 800a160:	88fb      	ldrh	r3, [r7, #6]
 800a162:	0a1b      	lsrs	r3, r3, #8
 800a164:	b29b      	uxth	r3, r3
 800a166:	b2db      	uxtb	r3, r3
 800a168:	723b      	strb	r3, [r7, #8]
		buf[1] = (uint8_t)reg;
 800a16a:	88fb      	ldrh	r3, [r7, #6]
 800a16c:	b2db      	uxtb	r3, r3
 800a16e:	727b      	strb	r3, [r7, #9]
		nres = hal_i2c_write(&buf[0], 2);
 800a170:	f107 0308 	add.w	r3, r7, #8
 800a174:	2102      	movs	r1, #2
 800a176:	4618      	mov	r0, r3
 800a178:	f003 f84b 	bl	800d212 <hal_i2c_write>
 800a17c:	60f8      	str	r0, [r7, #12]
        if(is_vatek_success(nres))nres = hal_i2c_write(&val, 1);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2b00      	cmp	r3, #0
 800a182:	db05      	blt.n	800a190 <h1_write+0x50>
 800a184:	1d7b      	adds	r3, r7, #5
 800a186:	2101      	movs	r1, #1
 800a188:	4618      	mov	r0, r3
 800a18a:	f003 f842 	bl	800d212 <hal_i2c_write>
 800a18e:	60f8      	str	r0, [r7, #12]
		if (is_vatek_success(nres))nres = hal_i2c_stop();
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2b00      	cmp	r3, #0
 800a194:	db02      	blt.n	800a19c <h1_write+0x5c>
 800a196:	f003 f872 	bl	800d27e <hal_i2c_stop>
 800a19a:	60f8      	str	r0, [r7, #12]
	}

    return nres;
 800a19c:	68fb      	ldr	r3, [r7, #12]
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3710      	adds	r7, #16
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}

0800a1a6 <h1_read>:

vatek_result h1_read(uint16_t reg,uint8_t* val)
{
 800a1a6:	b580      	push	{r7, lr}
 800a1a8:	b084      	sub	sp, #16
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	6039      	str	r1, [r7, #0]
 800a1b0:	80fb      	strh	r3, [r7, #6]
    vatek_result nres = vatek_success;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	60fb      	str	r3, [r7, #12]

	nres = hal_i2c_start(H1_I2C_WRITE,0);
 800a1b6:	2100      	movs	r1, #0
 800a1b8:	20e0      	movs	r0, #224	; 0xe0
 800a1ba:	f003 f80e 	bl	800d1da <hal_i2c_start>
 800a1be:	60f8      	str	r0, [r7, #12]

	if(is_vatek_success(nres))
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	db24      	blt.n	800a210 <h1_read+0x6a>
	{
		uint8_t buf[2];
		buf[0] = (uint8_t)(reg >> 8);
 800a1c6:	88fb      	ldrh	r3, [r7, #6]
 800a1c8:	0a1b      	lsrs	r3, r3, #8
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	b2db      	uxtb	r3, r3
 800a1ce:	723b      	strb	r3, [r7, #8]
		buf[1] = (uint8_t)reg;
 800a1d0:	88fb      	ldrh	r3, [r7, #6]
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	727b      	strb	r3, [r7, #9]
		nres = hal_i2c_write(&buf[0],2);
 800a1d6:	f107 0308 	add.w	r3, r7, #8
 800a1da:	2102      	movs	r1, #2
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f003 f818 	bl	800d212 <hal_i2c_write>
 800a1e2:	60f8      	str	r0, [r7, #12]

		if(is_vatek_success(nres))
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	db12      	blt.n	800a210 <h1_read+0x6a>
		{
			nres = hal_i2c_start(H1_I2C_READ,1);
 800a1ea:	2101      	movs	r1, #1
 800a1ec:	20e1      	movs	r0, #225	; 0xe1
 800a1ee:	f002 fff4 	bl	800d1da <hal_i2c_start>
 800a1f2:	60f8      	str	r0, [r7, #12]

			if(is_vatek_success(nres)){
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	db04      	blt.n	800a204 <h1_read+0x5e>
				nres = hal_i2c_read(val,1);
 800a1fa:	2101      	movs	r1, #1
 800a1fc:	6838      	ldr	r0, [r7, #0]
 800a1fe:	f003 f823 	bl	800d248 <hal_i2c_read>
 800a202:	60f8      	str	r0, [r7, #12]
			}
			if(is_vatek_success(nres))
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2b00      	cmp	r3, #0
 800a208:	db02      	blt.n	800a210 <h1_read+0x6a>
			   nres = hal_i2c_stop();
 800a20a:	f003 f838 	bl	800d27e <hal_i2c_stop>
 800a20e:	60f8      	str	r0, [r7, #12]
		}
	}
	return nres;
 800a210:	68fb      	ldr	r3, [r7, #12]

}
 800a212:	4618      	mov	r0, r3
 800a214:	3710      	adds	r7, #16
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}

0800a21a <hal_bridge_get_uint32>:
extern void bparam_enum_get(uint8_t* pbbuf, uint8_t* pdata, Pstruct_bridge_param pbparam);
extern void bparam_uint_get(uint8_t* pbbuf, uint8_t* pdata, Pstruct_bridge_param pbparam);
extern void bparam_raw_get(uint8_t* pbbuf,uint8_t* pdata,Pstruct_bridge_param pbparam);

uint32_t hal_bridge_get_uint32(uint32_t value)
{
 800a21a:	b480      	push	{r7}
 800a21c:	b085      	sub	sp, #20
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]
	uint8_t* pbuf = (uint8_t*)&value;
 800a222:	1d3b      	adds	r3, r7, #4
 800a224:	60fb      	str	r3, [r7, #12]
	uint32_t val = (*pbuf++) << 24;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	1c5a      	adds	r2, r3, #1
 800a22a:	60fa      	str	r2, [r7, #12]
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	061b      	lsls	r3, r3, #24
 800a230:	60bb      	str	r3, [r7, #8]
	val |= (*pbuf++) << 16;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	1c5a      	adds	r2, r3, #1
 800a236:	60fa      	str	r2, [r7, #12]
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	041b      	lsls	r3, r3, #16
 800a23c:	461a      	mov	r2, r3
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	4313      	orrs	r3, r2
 800a242:	60bb      	str	r3, [r7, #8]
	val |= (*pbuf++) << 8;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	1c5a      	adds	r2, r3, #1
 800a248:	60fa      	str	r2, [r7, #12]
 800a24a:	781b      	ldrb	r3, [r3, #0]
 800a24c:	021b      	lsls	r3, r3, #8
 800a24e:	461a      	mov	r2, r3
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	4313      	orrs	r3, r2
 800a254:	60bb      	str	r3, [r7, #8]
	val |= (*pbuf);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	461a      	mov	r2, r3
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	4313      	orrs	r3, r2
 800a260:	60bb      	str	r3, [r7, #8]
	return val;
 800a262:	68bb      	ldr	r3, [r7, #8]
}
 800a264:	4618      	mov	r0, r3
 800a266:	3714      	adds	r7, #20
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <hal_bridge_get_result>:

uint32_t hal_bridge_get_result(vatek_result nres)
{
 800a270:	b5b0      	push	{r4, r5, r7, lr}
 800a272:	b08c      	sub	sp, #48	; 0x30
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
	typedef struct _err_table {vatek_result res;uint32_t errcode;}err_table;
    const err_table bridge_err_table[] = 
 800a278:	4b1c      	ldr	r3, [pc, #112]	; (800a2ec <hal_bridge_get_result+0x7c>)
 800a27a:	f107 0408 	add.w	r4, r7, #8
 800a27e:	461d      	mov	r5, r3
 800a280:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a284:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a288:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        {vatek_unsupport,(uint32_t)HALBRIDGE_ERR_UNSUPPORT,},
    };
    
    #define ERR_TABLE_NUMS  (sizeof(bridge_err_table)/sizeof(err_table))
    
	if(is_vatek_success(nres))
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	db05      	blt.n	800a29e <hal_bridge_get_result+0x2e>
		return hal_bridge_get_uint32(nres);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	4618      	mov	r0, r3
 800a296:	f7ff ffc0 	bl	800a21a <hal_bridge_get_uint32>
 800a29a:	4603      	mov	r3, r0
 800a29c:	e022      	b.n	800a2e4 <hal_bridge_get_result+0x74>
	else
	{
		int32_t i = 0;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t err = (uint32_t)HALBRIDGE_ERR_UNKNOWN;
 800a2a2:	f04f 33ff 	mov.w	r3, #4294967295
 800a2a6:	62bb      	str	r3, [r7, #40]	; 0x28
		for(i = 0;i < ERR_TABLE_NUMS;i++)
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a2ac:	e013      	b.n	800a2d6 <hal_bridge_get_result+0x66>
		{
			if(bridge_err_table[i].res == nres)
 800a2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2b0:	00db      	lsls	r3, r3, #3
 800a2b2:	3330      	adds	r3, #48	; 0x30
 800a2b4:	443b      	add	r3, r7
 800a2b6:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800a2ba:	687a      	ldr	r2, [r7, #4]
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d107      	bne.n	800a2d0 <hal_bridge_get_result+0x60>
			{
				err = bridge_err_table[i].errcode;
 800a2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c2:	00db      	lsls	r3, r3, #3
 800a2c4:	3330      	adds	r3, #48	; 0x30
 800a2c6:	443b      	add	r3, r7
 800a2c8:	f853 3c24 	ldr.w	r3, [r3, #-36]
 800a2cc:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 800a2ce:	e005      	b.n	800a2dc <hal_bridge_get_result+0x6c>
		for(i = 0;i < ERR_TABLE_NUMS;i++)
 800a2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2d8:	2b03      	cmp	r3, #3
 800a2da:	d9e8      	bls.n	800a2ae <hal_bridge_get_result+0x3e>
			}
		}
		return hal_bridge_get_uint32(err);
 800a2dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2de:	f7ff ff9c 	bl	800a21a <hal_bridge_get_uint32>
 800a2e2:	4603      	mov	r3, r0
	}
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3730      	adds	r7, #48	; 0x30
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bdb0      	pop	{r4, r5, r7, pc}
 800a2ec:	0800f3c0 	.word	0x0800f3c0

0800a2f0 <map_bridge_to_buffer>:

vatek_result map_bridge_to_buffer(uint8_t* bbuf, uint8_t* bdata, Pstruct_bridge_param params)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b088      	sub	sp, #32
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	60f8      	str	r0, [r7, #12]
 800a2f8:	60b9      	str	r1, [r7, #8]
 800a2fa:	607a      	str	r2, [r7, #4]
	int32_t i = 0;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	61fb      	str	r3, [r7, #28]
	while (params[i].type != BPARAM_TYPE_NULL)
 800a300:	e03d      	b.n	800a37e <map_bridge_to_buffer+0x8e>
	{
		Pstruct_bridge_param pbstruct = &params[i];
 800a302:	69fb      	ldr	r3, [r7, #28]
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	687a      	ldr	r2, [r7, #4]
 800a308:	4413      	add	r3, r2
 800a30a:	61bb      	str	r3, [r7, #24]
		uint8_t* ptrbridge = &bbuf[pbstruct->b_offset];
 800a30c:	69bb      	ldr	r3, [r7, #24]
 800a30e:	78db      	ldrb	r3, [r3, #3]
 800a310:	461a      	mov	r2, r3
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	4413      	add	r3, r2
 800a316:	617b      	str	r3, [r7, #20]
		uint8_t* ptrbuffer = &bdata[pbstruct->s_offset];
 800a318:	69bb      	ldr	r3, [r7, #24]
 800a31a:	789b      	ldrb	r3, [r3, #2]
 800a31c:	461a      	mov	r2, r3
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	4413      	add	r3, r2
 800a322:	613b      	str	r3, [r7, #16]

		if (pbstruct->type == BPARAM_TYPE_STR)bparam_set_str(ptrbuffer, ptrbridge);
 800a324:	69bb      	ldr	r3, [r7, #24]
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	2b03      	cmp	r3, #3
 800a32a:	d104      	bne.n	800a336 <map_bridge_to_buffer+0x46>
 800a32c:	6979      	ldr	r1, [r7, #20]
 800a32e:	6938      	ldr	r0, [r7, #16]
 800a330:	f000 f884 	bl	800a43c <bparam_set_str>
 800a334:	e020      	b.n	800a378 <map_bridge_to_buffer+0x88>
		else if (pbstruct->type == BPARAM_TYPE_ENUM)bparam_enum_get(ptrbridge, ptrbuffer, pbstruct);
 800a336:	69bb      	ldr	r3, [r7, #24]
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	2b02      	cmp	r3, #2
 800a33c:	d105      	bne.n	800a34a <map_bridge_to_buffer+0x5a>
 800a33e:	69ba      	ldr	r2, [r7, #24]
 800a340:	6939      	ldr	r1, [r7, #16]
 800a342:	6978      	ldr	r0, [r7, #20]
 800a344:	f000 f909 	bl	800a55a <bparam_enum_get>
 800a348:	e016      	b.n	800a378 <map_bridge_to_buffer+0x88>
		else if (pbstruct->type == BPARAM_TYPE_UINT)bparam_uint_get(ptrbridge, ptrbuffer, pbstruct);
 800a34a:	69bb      	ldr	r3, [r7, #24]
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	2b01      	cmp	r3, #1
 800a350:	d105      	bne.n	800a35e <map_bridge_to_buffer+0x6e>
 800a352:	69ba      	ldr	r2, [r7, #24]
 800a354:	6939      	ldr	r1, [r7, #16]
 800a356:	6978      	ldr	r0, [r7, #20]
 800a358:	f000 f932 	bl	800a5c0 <bparam_uint_get>
 800a35c:	e00c      	b.n	800a378 <map_bridge_to_buffer+0x88>
        else if (pbstruct->type == BPARAM_TYPE_RAW)bparam_raw_get(ptrbridge,ptrbuffer,pbstruct);
 800a35e:	69bb      	ldr	r3, [r7, #24]
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	2b04      	cmp	r3, #4
 800a364:	d105      	bne.n	800a372 <map_bridge_to_buffer+0x82>
 800a366:	69ba      	ldr	r2, [r7, #24]
 800a368:	6939      	ldr	r1, [r7, #16]
 800a36a:	6978      	ldr	r0, [r7, #20]
 800a36c:	f000 f95b 	bl	800a626 <bparam_raw_get>
 800a370:	e002      	b.n	800a378 <map_bridge_to_buffer+0x88>
		else return vatek_badparam;
 800a372:	f06f 0302 	mvn.w	r3, #2
 800a376:	e00a      	b.n	800a38e <map_bridge_to_buffer+0x9e>
		i++;
 800a378:	69fb      	ldr	r3, [r7, #28]
 800a37a:	3301      	adds	r3, #1
 800a37c:	61fb      	str	r3, [r7, #28]
	while (params[i].type != BPARAM_TYPE_NULL)
 800a37e:	69fb      	ldr	r3, [r7, #28]
 800a380:	009b      	lsls	r3, r3, #2
 800a382:	687a      	ldr	r2, [r7, #4]
 800a384:	4413      	add	r3, r2
 800a386:	781b      	ldrb	r3, [r3, #0]
 800a388:	2bff      	cmp	r3, #255	; 0xff
 800a38a:	d1ba      	bne.n	800a302 <map_bridge_to_buffer+0x12>
	}

	return vatek_success;
 800a38c:	2300      	movs	r3, #0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3720      	adds	r7, #32
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <map_buffer_to_bridge>:

vatek_result map_buffer_to_bridge(uint8_t* bbuf, uint8_t* bdata, Pstruct_bridge_param params)
{
 800a396:	b580      	push	{r7, lr}
 800a398:	b088      	sub	sp, #32
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	60f8      	str	r0, [r7, #12]
 800a39e:	60b9      	str	r1, [r7, #8]
 800a3a0:	607a      	str	r2, [r7, #4]
	int32_t i = 0;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	61fb      	str	r3, [r7, #28]
	while (params[i].type != BPARAM_TYPE_NULL)
 800a3a6:	e03d      	b.n	800a424 <map_buffer_to_bridge+0x8e>
	{
		Pstruct_bridge_param pbstruct = &params[i];
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	009b      	lsls	r3, r3, #2
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	4413      	add	r3, r2
 800a3b0:	61bb      	str	r3, [r7, #24]
		uint8_t* ptrbridge = &bbuf[pbstruct->b_offset];
 800a3b2:	69bb      	ldr	r3, [r7, #24]
 800a3b4:	78db      	ldrb	r3, [r3, #3]
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	4413      	add	r3, r2
 800a3bc:	617b      	str	r3, [r7, #20]
		uint8_t* ptrbuffer = &bdata[pbstruct->s_offset];
 800a3be:	69bb      	ldr	r3, [r7, #24]
 800a3c0:	789b      	ldrb	r3, [r3, #2]
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	4413      	add	r3, r2
 800a3c8:	613b      	str	r3, [r7, #16]

		if (pbstruct->type == BPARAM_TYPE_STR)bparam_set_str(ptrbridge, ptrbuffer);
 800a3ca:	69bb      	ldr	r3, [r7, #24]
 800a3cc:	781b      	ldrb	r3, [r3, #0]
 800a3ce:	2b03      	cmp	r3, #3
 800a3d0:	d104      	bne.n	800a3dc <map_buffer_to_bridge+0x46>
 800a3d2:	6939      	ldr	r1, [r7, #16]
 800a3d4:	6978      	ldr	r0, [r7, #20]
 800a3d6:	f000 f831 	bl	800a43c <bparam_set_str>
 800a3da:	e020      	b.n	800a41e <map_buffer_to_bridge+0x88>
		else if (pbstruct->type == BPARAM_TYPE_ENUM)bparam_enum_put(ptrbridge, ptrbuffer, pbstruct);
 800a3dc:	69bb      	ldr	r3, [r7, #24]
 800a3de:	781b      	ldrb	r3, [r3, #0]
 800a3e0:	2b02      	cmp	r3, #2
 800a3e2:	d105      	bne.n	800a3f0 <map_buffer_to_bridge+0x5a>
 800a3e4:	69ba      	ldr	r2, [r7, #24]
 800a3e6:	6939      	ldr	r1, [r7, #16]
 800a3e8:	6978      	ldr	r0, [r7, #20]
 800a3ea:	f000 f846 	bl	800a47a <bparam_enum_put>
 800a3ee:	e016      	b.n	800a41e <map_buffer_to_bridge+0x88>
		else if (pbstruct->type == BPARAM_TYPE_UINT)bparam_uint_put(ptrbridge, ptrbuffer, pbstruct);
 800a3f0:	69bb      	ldr	r3, [r7, #24]
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d105      	bne.n	800a404 <map_buffer_to_bridge+0x6e>
 800a3f8:	69ba      	ldr	r2, [r7, #24]
 800a3fa:	6939      	ldr	r1, [r7, #16]
 800a3fc:	6978      	ldr	r0, [r7, #20]
 800a3fe:	f000 f875 	bl	800a4ec <bparam_uint_put>
 800a402:	e00c      	b.n	800a41e <map_buffer_to_bridge+0x88>
        else if (pbstruct->type == BPARAM_TYPE_RAW)bparam_raw_put(ptrbridge,ptrbuffer,pbstruct);
 800a404:	69bb      	ldr	r3, [r7, #24]
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	2b04      	cmp	r3, #4
 800a40a:	d105      	bne.n	800a418 <map_buffer_to_bridge+0x82>
 800a40c:	69ba      	ldr	r2, [r7, #24]
 800a40e:	6939      	ldr	r1, [r7, #16]
 800a410:	6978      	ldr	r0, [r7, #20]
 800a412:	f000 f821 	bl	800a458 <bparam_raw_put>
 800a416:	e002      	b.n	800a41e <map_buffer_to_bridge+0x88>
		else return vatek_badparam;
 800a418:	f06f 0302 	mvn.w	r3, #2
 800a41c:	e00a      	b.n	800a434 <map_buffer_to_bridge+0x9e>
        
        i++;
 800a41e:	69fb      	ldr	r3, [r7, #28]
 800a420:	3301      	adds	r3, #1
 800a422:	61fb      	str	r3, [r7, #28]
	while (params[i].type != BPARAM_TYPE_NULL)
 800a424:	69fb      	ldr	r3, [r7, #28]
 800a426:	009b      	lsls	r3, r3, #2
 800a428:	687a      	ldr	r2, [r7, #4]
 800a42a:	4413      	add	r3, r2
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	2bff      	cmp	r3, #255	; 0xff
 800a430:	d1ba      	bne.n	800a3a8 <map_buffer_to_bridge+0x12>
	}
	return vatek_success;
 800a432:	2300      	movs	r3, #0
}
 800a434:	4618      	mov	r0, r3
 800a436:	3720      	adds	r7, #32
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <bparam_set_str>:

void bparam_set_str(uint8_t* pdest, uint8_t* psur)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b082      	sub	sp, #8
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	6039      	str	r1, [r7, #0]
	memcpy(pdest, psur, BPARAM_STR_LEN);
 800a446:	2208      	movs	r2, #8
 800a448:	6839      	ldr	r1, [r7, #0]
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f003 fd68 	bl	800df20 <memcpy>
}
 800a450:	bf00      	nop
 800a452:	3708      	adds	r7, #8
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <bparam_raw_put>:

void bparam_raw_put(uint8_t* pbuf,uint8_t* pdata,Pstruct_bridge_param pbparam)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b084      	sub	sp, #16
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	60f8      	str	r0, [r7, #12]
 800a460:	60b9      	str	r1, [r7, #8]
 800a462:	607a      	str	r2, [r7, #4]
    memcpy(pbuf,pdata,pbparam->typelen);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	785b      	ldrb	r3, [r3, #1]
 800a468:	461a      	mov	r2, r3
 800a46a:	68b9      	ldr	r1, [r7, #8]
 800a46c:	68f8      	ldr	r0, [r7, #12]
 800a46e:	f003 fd57 	bl	800df20 <memcpy>
}
 800a472:	bf00      	nop
 800a474:	3710      	adds	r7, #16
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}

0800a47a <bparam_enum_put>:

void bparam_enum_put(uint8_t* pbbuf, uint8_t* pdata, Pstruct_bridge_param pbparam)
{
 800a47a:	b480      	push	{r7}
 800a47c:	b087      	sub	sp, #28
 800a47e:	af00      	add	r7, sp, #0
 800a480:	60f8      	str	r0, [r7, #12]
 800a482:	60b9      	str	r1, [r7, #8]
 800a484:	607a      	str	r2, [r7, #4]
	int32_t val = 0;
 800a486:	2300      	movs	r3, #0
 800a488:	617b      	str	r3, [r7, #20]
	if (pbparam->typelen == 1)val = (int32_t)(*((int8_t*)pdata));
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	785b      	ldrb	r3, [r3, #1]
 800a48e:	2b01      	cmp	r3, #1
 800a490:	d104      	bne.n	800a49c <bparam_enum_put+0x22>
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	f993 3000 	ldrsb.w	r3, [r3]
 800a498:	617b      	str	r3, [r7, #20]
 800a49a:	e00b      	b.n	800a4b4 <bparam_enum_put+0x3a>
	else if (pbparam->typelen == 2)val = (int32_t)(*((int16_t*)pdata));
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	785b      	ldrb	r3, [r3, #1]
 800a4a0:	2b02      	cmp	r3, #2
 800a4a2:	d104      	bne.n	800a4ae <bparam_enum_put+0x34>
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a4aa:	617b      	str	r3, [r7, #20]
 800a4ac:	e002      	b.n	800a4b4 <bparam_enum_put+0x3a>
	else val = *(int32_t*)pdata;
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	617b      	str	r3, [r7, #20]

	pbbuf[0] = (uint8_t)(val >> 24);
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	161b      	asrs	r3, r3, #24
 800a4b8:	b2da      	uxtb	r2, r3
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	701a      	strb	r2, [r3, #0]
	pbbuf[1] = (uint8_t)(val >> 16);
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	141a      	asrs	r2, r3, #16
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	b2d2      	uxtb	r2, r2
 800a4c8:	701a      	strb	r2, [r3, #0]
	pbbuf[2] = (uint8_t)(val >> 8);
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	121a      	asrs	r2, r3, #8
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	3302      	adds	r3, #2
 800a4d2:	b2d2      	uxtb	r2, r2
 800a4d4:	701a      	strb	r2, [r3, #0]
	pbbuf[3] = (uint8_t)(val);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	3303      	adds	r3, #3
 800a4da:	697a      	ldr	r2, [r7, #20]
 800a4dc:	b2d2      	uxtb	r2, r2
 800a4de:	701a      	strb	r2, [r3, #0]
}
 800a4e0:	bf00      	nop
 800a4e2:	371c      	adds	r7, #28
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <bparam_uint_put>:

void bparam_uint_put(uint8_t* pbbuf, uint8_t* pdata, Pstruct_bridge_param pbparam)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b087      	sub	sp, #28
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	60b9      	str	r1, [r7, #8]
 800a4f6:	607a      	str	r2, [r7, #4]
	uint32_t val = 0;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	617b      	str	r3, [r7, #20]
	if (pbparam->typelen == 1)val = (uint32_t)(*((uint8_t*)pdata));
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	785b      	ldrb	r3, [r3, #1]
 800a500:	2b01      	cmp	r3, #1
 800a502:	d103      	bne.n	800a50c <bparam_uint_put+0x20>
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	617b      	str	r3, [r7, #20]
 800a50a:	e00a      	b.n	800a522 <bparam_uint_put+0x36>
	else if (pbparam->typelen == 2)val = (uint32_t)(*((uint16_t*)pdata));
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	785b      	ldrb	r3, [r3, #1]
 800a510:	2b02      	cmp	r3, #2
 800a512:	d103      	bne.n	800a51c <bparam_uint_put+0x30>
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	881b      	ldrh	r3, [r3, #0]
 800a518:	617b      	str	r3, [r7, #20]
 800a51a:	e002      	b.n	800a522 <bparam_uint_put+0x36>
	else val = *(uint32_t*)pdata;
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	617b      	str	r3, [r7, #20]

	pbbuf[0] = (uint8_t)(val >> 24);
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	0e1b      	lsrs	r3, r3, #24
 800a526:	b2da      	uxtb	r2, r3
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	701a      	strb	r2, [r3, #0]
	pbbuf[1] = (uint8_t)(val >> 16);
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	0c1a      	lsrs	r2, r3, #16
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	3301      	adds	r3, #1
 800a534:	b2d2      	uxtb	r2, r2
 800a536:	701a      	strb	r2, [r3, #0]
	pbbuf[2] = (uint8_t)(val >> 8);
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	0a1a      	lsrs	r2, r3, #8
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	3302      	adds	r3, #2
 800a540:	b2d2      	uxtb	r2, r2
 800a542:	701a      	strb	r2, [r3, #0]
	pbbuf[3] = (uint8_t)(val);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	3303      	adds	r3, #3
 800a548:	697a      	ldr	r2, [r7, #20]
 800a54a:	b2d2      	uxtb	r2, r2
 800a54c:	701a      	strb	r2, [r3, #0]
}
 800a54e:	bf00      	nop
 800a550:	371c      	adds	r7, #28
 800a552:	46bd      	mov	sp, r7
 800a554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a558:	4770      	bx	lr

0800a55a <bparam_enum_get>:

void bparam_enum_get(uint8_t* pbbuf, uint8_t* pdata, Pstruct_bridge_param pbparam)
{
 800a55a:	b480      	push	{r7}
 800a55c:	b087      	sub	sp, #28
 800a55e:	af00      	add	r7, sp, #0
 800a560:	60f8      	str	r0, [r7, #12]
 800a562:	60b9      	str	r1, [r7, #8]
 800a564:	607a      	str	r2, [r7, #4]
	int32_t val = (pbbuf[0] << 24) | (pbbuf[1] << 16) | (pbbuf[2] << 8) | pbbuf[3];
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	061a      	lsls	r2, r3, #24
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	3301      	adds	r3, #1
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	041b      	lsls	r3, r3, #16
 800a574:	431a      	orrs	r2, r3
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	3302      	adds	r3, #2
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	021b      	lsls	r3, r3, #8
 800a57e:	4313      	orrs	r3, r2
 800a580:	68fa      	ldr	r2, [r7, #12]
 800a582:	3203      	adds	r2, #3
 800a584:	7812      	ldrb	r2, [r2, #0]
 800a586:	4313      	orrs	r3, r2
 800a588:	617b      	str	r3, [r7, #20]

	if (pbparam->typelen == 1)*((int8_t*)pdata) = (int8_t)val;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	785b      	ldrb	r3, [r3, #1]
 800a58e:	2b01      	cmp	r3, #1
 800a590:	d104      	bne.n	800a59c <bparam_enum_get+0x42>
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	b25a      	sxtb	r2, r3
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	701a      	strb	r2, [r3, #0]
	else if (pbparam->typelen == 2)*((int16_t*)pdata) = (int16_t)val;
	else *((int32_t*)pdata) = val;
}
 800a59a:	e00b      	b.n	800a5b4 <bparam_enum_get+0x5a>
	else if (pbparam->typelen == 2)*((int16_t*)pdata) = (int16_t)val;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	785b      	ldrb	r3, [r3, #1]
 800a5a0:	2b02      	cmp	r3, #2
 800a5a2:	d104      	bne.n	800a5ae <bparam_enum_get+0x54>
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	b21a      	sxth	r2, r3
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	801a      	strh	r2, [r3, #0]
}
 800a5ac:	e002      	b.n	800a5b4 <bparam_enum_get+0x5a>
	else *((int32_t*)pdata) = val;
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	697a      	ldr	r2, [r7, #20]
 800a5b2:	601a      	str	r2, [r3, #0]
}
 800a5b4:	bf00      	nop
 800a5b6:	371c      	adds	r7, #28
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr

0800a5c0 <bparam_uint_get>:

void bparam_uint_get(uint8_t* pbbuf, uint8_t* pdata, Pstruct_bridge_param pbparam)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b087      	sub	sp, #28
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	60f8      	str	r0, [r7, #12]
 800a5c8:	60b9      	str	r1, [r7, #8]
 800a5ca:	607a      	str	r2, [r7, #4]
	uint32_t val = (pbbuf[0] << 24) | (pbbuf[1] << 16) | (pbbuf[2] << 8) | pbbuf[3];
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	061a      	lsls	r2, r3, #24
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	3301      	adds	r3, #1
 800a5d6:	781b      	ldrb	r3, [r3, #0]
 800a5d8:	041b      	lsls	r3, r3, #16
 800a5da:	431a      	orrs	r2, r3
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	3302      	adds	r3, #2
 800a5e0:	781b      	ldrb	r3, [r3, #0]
 800a5e2:	021b      	lsls	r3, r3, #8
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	68fa      	ldr	r2, [r7, #12]
 800a5e8:	3203      	adds	r2, #3
 800a5ea:	7812      	ldrb	r2, [r2, #0]
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	617b      	str	r3, [r7, #20]

	if (pbparam->typelen == 1)*((uint8_t*)pdata) = (uint8_t)val;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	785b      	ldrb	r3, [r3, #1]
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	d104      	bne.n	800a602 <bparam_uint_get+0x42>
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	b2da      	uxtb	r2, r3
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	701a      	strb	r2, [r3, #0]
	else if (pbparam->typelen == 2)*((uint16_t*)pdata) = (uint16_t)val;
	else *((uint32_t*)pdata) = val;
}
 800a600:	e00b      	b.n	800a61a <bparam_uint_get+0x5a>
	else if (pbparam->typelen == 2)*((uint16_t*)pdata) = (uint16_t)val;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	785b      	ldrb	r3, [r3, #1]
 800a606:	2b02      	cmp	r3, #2
 800a608:	d104      	bne.n	800a614 <bparam_uint_get+0x54>
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	b29a      	uxth	r2, r3
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	801a      	strh	r2, [r3, #0]
}
 800a612:	e002      	b.n	800a61a <bparam_uint_get+0x5a>
	else *((uint32_t*)pdata) = val;
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	697a      	ldr	r2, [r7, #20]
 800a618:	601a      	str	r2, [r3, #0]
}
 800a61a:	bf00      	nop
 800a61c:	371c      	adds	r7, #28
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr

0800a626 <bparam_raw_get>:

void bparam_raw_get(uint8_t* pbbuf,uint8_t* pdata,Pstruct_bridge_param pbparam)
{
 800a626:	b580      	push	{r7, lr}
 800a628:	b084      	sub	sp, #16
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	60f8      	str	r0, [r7, #12]
 800a62e:	60b9      	str	r1, [r7, #8]
 800a630:	607a      	str	r2, [r7, #4]
    memcpy(pdata,pbbuf,pbparam->typelen);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	785b      	ldrb	r3, [r3, #1]
 800a636:	461a      	mov	r2, r3
 800a638:	68f9      	ldr	r1, [r7, #12]
 800a63a:	68b8      	ldr	r0, [r7, #8]
 800a63c:	f003 fc70 	bl	800df20 <memcpy>
}
 800a640:	bf00      	nop
 800a642:	3710      	adds	r7, #16
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <bridge_source_get>:

vatek_result bridge_source_get(Pbridge_handle phandle)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b086      	sub	sp, #24
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
	vatek_result nres = vatek_memfail;
 800a650:	f06f 030a 	mvn.w	r3, #10
 800a654:	617b      	str	r3, [r7, #20]
	int32_t i = 0;
 800a656:	2300      	movs	r3, #0
 800a658:	613b      	str	r3, [r7, #16]
	while(bsource_tables[i].name)
 800a65a:	e053      	b.n	800a704 <bridge_source_get+0xbc>
	{
		nres = bsource_tables[i].check_support();
 800a65c:	4a33      	ldr	r2, [pc, #204]	; (800a72c <bridge_source_get+0xe4>)
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	015b      	lsls	r3, r3, #5
 800a662:	4413      	add	r3, r2
 800a664:	3308      	adds	r3, #8
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4798      	blx	r3
 800a66a:	6178      	str	r0, [r7, #20]
		if(is_vatek_success(nres))
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	db3c      	blt.n	800a6ec <bridge_source_get+0xa4>
		{
			Pbsource_list pnew = (Pbsource_list)malloc(sizeof(bsource_list));
 800a672:	200c      	movs	r0, #12
 800a674:	f003 fc44 	bl	800df00 <malloc>
 800a678:	4603      	mov	r3, r0
 800a67a:	60fb      	str	r3, [r7, #12]
			nres = vatek_memfail;
 800a67c:	f06f 030a 	mvn.w	r3, #10
 800a680:	617b      	str	r3, [r7, #20]
			if(pnew)
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d037      	beq.n	800a6f8 <bridge_source_get+0xb0>
			{
				memset(pnew,0,sizeof(bsource_list));
 800a688:	220c      	movs	r2, #12
 800a68a:	2100      	movs	r1, #0
 800a68c:	68f8      	ldr	r0, [r7, #12]
 800a68e:	f003 fc55 	bl	800df3c <memset>
				nres = bsource_tables[i].open(&pnew->device.hsource);
 800a692:	4a26      	ldr	r2, [pc, #152]	; (800a72c <bridge_source_get+0xe4>)
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	015b      	lsls	r3, r3, #5
 800a698:	4413      	add	r3, r2
 800a69a:	330c      	adds	r3, #12
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	68fa      	ldr	r2, [r7, #12]
 800a6a0:	3204      	adds	r2, #4
 800a6a2:	4610      	mov	r0, r2
 800a6a4:	4798      	blx	r3
 800a6a6:	6178      	str	r0, [r7, #20]
					}
#endif

				}

				if(is_vatek_success(nres))
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	db1a      	blt.n	800a6e4 <bridge_source_get+0x9c>
				{
					pnew->device.driver = (Pbdriver_source)&bsource_tables[i];
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	015b      	lsls	r3, r3, #5
 800a6b2:	4a1e      	ldr	r2, [pc, #120]	; (800a72c <bridge_source_get+0xe4>)
 800a6b4:	441a      	add	r2, r3
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	609a      	str	r2, [r3, #8]
					if(!phandle->source_root)phandle->source_root = pnew;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	69db      	ldr	r3, [r3, #28]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d103      	bne.n	800a6ca <bridge_source_get+0x82>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	68fa      	ldr	r2, [r7, #12]
 800a6c6:	61da      	str	r2, [r3, #28]
 800a6c8:	e003      	b.n	800a6d2 <bridge_source_get+0x8a>
					else phandle->source_last->next = pnew;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6a1b      	ldr	r3, [r3, #32]
 800a6ce:	68fa      	ldr	r2, [r7, #12]
 800a6d0:	601a      	str	r2, [r3, #0]
					phandle->source_last = pnew;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	68fa      	ldr	r2, [r7, #12]
 800a6d6:	621a      	str	r2, [r3, #32]
					phandle->source_count++;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	699b      	ldr	r3, [r3, #24]
 800a6dc:	1c5a      	adds	r2, r3, #1
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	619a      	str	r2, [r3, #24]
 800a6e2:	e009      	b.n	800a6f8 <bridge_source_get+0xb0>
				}else free(pnew);
 800a6e4:	68f8      	ldr	r0, [r7, #12]
 800a6e6:	f003 fc13 	bl	800df10 <free>
 800a6ea:	e005      	b.n	800a6f8 <bridge_source_get+0xb0>
			}
		}else if(nres == vatek_unsupport)nres = vatek_success;
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	f113 0f02 	cmn.w	r3, #2
 800a6f2:	d101      	bne.n	800a6f8 <bridge_source_get+0xb0>
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	617b      	str	r3, [r7, #20]
		if(!is_vatek_success(nres))break;
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	db0a      	blt.n	800a714 <bridge_source_get+0xcc>
		i++;
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	3301      	adds	r3, #1
 800a702:	613b      	str	r3, [r7, #16]
	while(bsource_tables[i].name)
 800a704:	4a09      	ldr	r2, [pc, #36]	; (800a72c <bridge_source_get+0xe4>)
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	015b      	lsls	r3, r3, #5
 800a70a:	4413      	add	r3, r2
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d1a4      	bne.n	800a65c <bridge_source_get+0x14>
 800a712:	e000      	b.n	800a716 <bridge_source_get+0xce>
		if(!is_vatek_success(nres))break;
 800a714:	bf00      	nop
	}

	if(!is_vatek_success(nres))
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	da02      	bge.n	800a722 <bridge_source_get+0xda>
		bridge_source_reset(phandle);
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f000 f807 	bl	800a730 <bridge_source_reset>
	return nres;
 800a722:	697b      	ldr	r3, [r7, #20]
}
 800a724:	4618      	mov	r0, r3
 800a726:	3718      	adds	r7, #24
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}
 800a72c:	0800fd2c 	.word	0x0800fd2c

0800a730 <bridge_source_reset>:

void bridge_source_reset(Pbridge_handle phandle)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b084      	sub	sp, #16
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
	if(phandle->source_root)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	69db      	ldr	r3, [r3, #28]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d015      	beq.n	800a76c <bridge_source_reset+0x3c>
	{
		Pbsource_list ptr = phandle->source_root;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	69db      	ldr	r3, [r3, #28]
 800a744:	60fb      	str	r3, [r7, #12]
		while(ptr)
 800a746:	e00e      	b.n	800a766 <bridge_source_reset+0x36>
		{
			Pbsource_list pnext = ptr->next;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	60bb      	str	r3, [r7, #8]
			ptr->device.driver->close(ptr->device.hsource);
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	689b      	ldr	r3, [r3, #8]
 800a752:	69db      	ldr	r3, [r3, #28]
 800a754:	68fa      	ldr	r2, [r7, #12]
 800a756:	6852      	ldr	r2, [r2, #4]
 800a758:	4610      	mov	r0, r2
 800a75a:	4798      	blx	r3
			free(ptr);
 800a75c:	68f8      	ldr	r0, [r7, #12]
 800a75e:	f003 fbd7 	bl	800df10 <free>
			ptr = pnext;
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	60fb      	str	r3, [r7, #12]
		while(ptr)
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d1ed      	bne.n	800a748 <bridge_source_reset+0x18>
		}
	}

	phandle->source_count = 0;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2200      	movs	r2, #0
 800a770:	619a      	str	r2, [r3, #24]
	phandle->source_root = NULL;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2200      	movs	r2, #0
 800a776:	61da      	str	r2, [r3, #28]
	phandle->source_last = NULL;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2200      	movs	r2, #0
 800a77c:	621a      	str	r2, [r3, #32]
}
 800a77e:	bf00      	nop
 800a780:	3710      	adds	r7, #16
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
	...

0800a788 <bstorage_start>:

vatek_result bstorage_start(Pbridge_handle phandle,Pbflash_command pfcmd)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b084      	sub	sp, #16
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	6039      	str	r1, [r7, #0]
	vatek_result nres = vatek_badstatus;
 800a792:	f06f 0304 	mvn.w	r3, #4
 800a796:	60fb      	str	r3, [r7, #12]
	if(!phandle->storage.section)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d148      	bne.n	800a832 <bstorage_start+0xaa>
	{
		if(pfcmd->bcmd == BFLASH_CNTL_ERASE)
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4a25      	ldr	r2, [pc, #148]	; (800a83c <bstorage_start+0xb4>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d106      	bne.n	800a7b8 <bstorage_start+0x30>
			nres = hal_storage_erase(pfcmd->nsection);
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	685b      	ldr	r3, [r3, #4]
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f002 fd97 	bl	800d2e2 <hal_storage_erase>
 800a7b4:	60f8      	str	r0, [r7, #12]
 800a7b6:	e03c      	b.n	800a832 <bstorage_start+0xaa>
		else if(pfcmd->bcmd == BFLASH_CNTL_READ)
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a20      	ldr	r2, [pc, #128]	; (800a840 <bstorage_start+0xb8>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d11a      	bne.n	800a7f8 <bstorage_start+0x70>
		{
			nres = hal_storage_lock_section(&phandle->storage.section);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	3330      	adds	r3, #48	; 0x30
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f002 fd78 	bl	800d2bc <hal_storage_lock_section>
 800a7cc:	60f8      	str	r0, [r7, #12]
			if(is_vatek_success(nres))
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	db2e      	blt.n	800a832 <bstorage_start+0xaa>
			{
				phandle->storage.pos = 0;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	635a      	str	r2, [r3, #52]	; 0x34
				nres = hal_storage_read(pfcmd->nsection,phandle->storage.section);
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	685a      	ldr	r2, [r3, #4]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	4610      	mov	r0, r2
 800a7e6:	f002 fd95 	bl	800d314 <hal_storage_read>
 800a7ea:	60f8      	str	r0, [r7, #12]
				if(!is_vatek_success(nres))hal_storage_unlock_section();
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	da1f      	bge.n	800a832 <bstorage_start+0xaa>
 800a7f2:	f002 fd6f 	bl	800d2d4 <hal_storage_unlock_section>
 800a7f6:	e01c      	b.n	800a832 <bstorage_start+0xaa>
			}
		}
		else if(pfcmd->bcmd == BFLASH_CNTL_WRITE)
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4a11      	ldr	r2, [pc, #68]	; (800a844 <bstorage_start+0xbc>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d114      	bne.n	800a82c <bstorage_start+0xa4>
		{
			nres = hal_storage_lock_section(&phandle->storage.section);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	3330      	adds	r3, #48	; 0x30
 800a806:	4618      	mov	r0, r3
 800a808:	f002 fd58 	bl	800d2bc <hal_storage_lock_section>
 800a80c:	60f8      	str	r0, [r7, #12]
			if(is_vatek_success(nres))
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2b00      	cmp	r3, #0
 800a812:	db0e      	blt.n	800a832 <bstorage_start+0xaa>
			{
				phandle->storage.pos = 0;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2200      	movs	r2, #0
 800a818:	635a      	str	r2, [r3, #52]	; 0x34
				memset(phandle->storage.section,0,BRIDGE_SECTION_LEN);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a81e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a822:	2100      	movs	r1, #0
 800a824:	4618      	mov	r0, r3
 800a826:	f003 fb89 	bl	800df3c <memset>
 800a82a:	e002      	b.n	800a832 <bstorage_start+0xaa>
			}
		}else nres = vatek_unsupport;
 800a82c:	f06f 0301 	mvn.w	r3, #1
 800a830:	60fb      	str	r3, [r7, #12]
	}
	return nres;
 800a832:	68fb      	ldr	r3, [r7, #12]
}
 800a834:	4618      	mov	r0, r3
 800a836:	3710      	adds	r7, #16
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}
 800a83c:	0f0f0502 	.word	0x0f0f0502
 800a840:	0f0f0501 	.word	0x0f0f0501
 800a844:	0f0f0500 	.word	0x0f0f0500

0800a848 <bstorage_put>:

vatek_result bstorage_put(Pbridge_handle phandle,uint8_t* pbuf,int32_t len)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b088      	sub	sp, #32
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	60f8      	str	r0, [r7, #12]
 800a850:	60b9      	str	r1, [r7, #8]
 800a852:	607a      	str	r2, [r7, #4]
	vatek_result nres = vatek_badstatus;
 800a854:	f06f 0304 	mvn.w	r3, #4
 800a858:	61fb      	str	r3, [r7, #28]
	Pbstorage_handle pstorage = &phandle->storage;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	3328      	adds	r3, #40	; 0x28
 800a85e:	61bb      	str	r3, [r7, #24]
	if(pstorage->section && pstorage->cmd.bcmd == BFLASH_CNTL_WRITE)
 800a860:	69bb      	ldr	r3, [r7, #24]
 800a862:	689b      	ldr	r3, [r3, #8]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d019      	beq.n	800a89c <bstorage_put+0x54>
 800a868:	69bb      	ldr	r3, [r7, #24]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a0e      	ldr	r2, [pc, #56]	; (800a8a8 <bstorage_put+0x60>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d114      	bne.n	800a89c <bstorage_put+0x54>
	{
		uint8_t* ptr = &pstorage->section[pstorage->pos];
 800a872:	69bb      	ldr	r3, [r7, #24]
 800a874:	689b      	ldr	r3, [r3, #8]
 800a876:	69ba      	ldr	r2, [r7, #24]
 800a878:	68d2      	ldr	r2, [r2, #12]
 800a87a:	4413      	add	r3, r2
 800a87c:	617b      	str	r3, [r7, #20]
		memcpy(ptr,pbuf,len);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	461a      	mov	r2, r3
 800a882:	68b9      	ldr	r1, [r7, #8]
 800a884:	6978      	ldr	r0, [r7, #20]
 800a886:	f003 fb4b 	bl	800df20 <memcpy>
		pstorage->pos += len;
 800a88a:	69bb      	ldr	r3, [r7, #24]
 800a88c:	68da      	ldr	r2, [r3, #12]
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	441a      	add	r2, r3
 800a892:	69bb      	ldr	r3, [r7, #24]
 800a894:	60da      	str	r2, [r3, #12]
		nres = (vatek_result)pstorage->pos;
 800a896:	69bb      	ldr	r3, [r7, #24]
 800a898:	68db      	ldr	r3, [r3, #12]
 800a89a:	61fb      	str	r3, [r7, #28]
	}
	return nres;
 800a89c:	69fb      	ldr	r3, [r7, #28]
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3720      	adds	r7, #32
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	0f0f0500 	.word	0x0f0f0500

0800a8ac <bstorage_get>:

vatek_result bstorage_get(Pbridge_handle phandle,uint8_t** pbuf,int32_t len)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b087      	sub	sp, #28
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	60f8      	str	r0, [r7, #12]
 800a8b4:	60b9      	str	r1, [r7, #8]
 800a8b6:	607a      	str	r2, [r7, #4]
	vatek_result nres = vatek_badstatus;
 800a8b8:	f06f 0304 	mvn.w	r3, #4
 800a8bc:	617b      	str	r3, [r7, #20]
	Pbstorage_handle pstorage = &phandle->storage;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	3328      	adds	r3, #40	; 0x28
 800a8c2:	613b      	str	r3, [r7, #16]
	if(pstorage->section && pstorage->cmd.bcmd == BFLASH_CNTL_READ)
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	689b      	ldr	r3, [r3, #8]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d014      	beq.n	800a8f6 <bstorage_get+0x4a>
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a0c      	ldr	r2, [pc, #48]	; (800a904 <bstorage_get+0x58>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d10f      	bne.n	800a8f6 <bstorage_get+0x4a>
	{
		nres = (vatek_result)pstorage->pos;
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	68db      	ldr	r3, [r3, #12]
 800a8da:	617b      	str	r3, [r7, #20]
		*pbuf = &pstorage->section[pstorage->pos];
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	689b      	ldr	r3, [r3, #8]
 800a8e0:	693a      	ldr	r2, [r7, #16]
 800a8e2:	68d2      	ldr	r2, [r2, #12]
 800a8e4:	441a      	add	r2, r3
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	601a      	str	r2, [r3, #0]
		pstorage->pos += len;
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	68da      	ldr	r2, [r3, #12]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	441a      	add	r2, r3
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	60da      	str	r2, [r3, #12]
	}
	return nres;	
 800a8f6:	697b      	ldr	r3, [r7, #20]
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	371c      	adds	r7, #28
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	4770      	bx	lr
 800a904:	0f0f0501 	.word	0x0f0f0501

0800a908 <bstorage_stop>:

vatek_result bstorage_stop(Pbridge_handle phandle)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
	vatek_result nres = vatek_badstatus;
 800a910:	f06f 0304 	mvn.w	r3, #4
 800a914:	60fb      	str	r3, [r7, #12]
	Pbstorage_handle pstorage = &phandle->storage;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	3328      	adds	r3, #40	; 0x28
 800a91a:	60bb      	str	r3, [r7, #8]
	if(pstorage->section)
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	689b      	ldr	r3, [r3, #8]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d01e      	beq.n	800a962 <bstorage_stop+0x5a>
	{
		if(pstorage->cmd.bcmd == BFLASH_CNTL_WRITE)
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4a12      	ldr	r2, [pc, #72]	; (800a974 <bstorage_stop+0x6c>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d117      	bne.n	800a95e <bstorage_stop+0x56>
		{
			if(pstorage->pos == BRIDGE_SECTION_LEN)
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	68db      	ldr	r3, [r3, #12]
 800a932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a936:	d114      	bne.n	800a962 <bstorage_stop+0x5a>
			{
				nres = hal_storage_erase(pstorage->cmd.nsection);
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	4618      	mov	r0, r3
 800a93e:	f002 fcd0 	bl	800d2e2 <hal_storage_erase>
 800a942:	60f8      	str	r0, [r7, #12]
				if(is_vatek_success(nres))
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2b00      	cmp	r3, #0
 800a948:	db0b      	blt.n	800a962 <bstorage_stop+0x5a>
					nres = hal_storage_write(pstorage->cmd.nsection,pstorage->section);
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	685a      	ldr	r2, [r3, #4]
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	689b      	ldr	r3, [r3, #8]
 800a952:	4619      	mov	r1, r3
 800a954:	4610      	mov	r0, r2
 800a956:	f002 fcd0 	bl	800d2fa <hal_storage_write>
 800a95a:	60f8      	str	r0, [r7, #12]
 800a95c:	e001      	b.n	800a962 <bstorage_stop+0x5a>
			}
		}else nres = vatek_success;
 800a95e:	2300      	movs	r3, #0
 800a960:	60fb      	str	r3, [r7, #12]
	}
	bstorage_reset(phandle);
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f000 f808 	bl	800a978 <bstorage_reset>
	return nres;
 800a968:	68fb      	ldr	r3, [r7, #12]
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3710      	adds	r7, #16
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
 800a972:	bf00      	nop
 800a974:	0f0f0500 	.word	0x0f0f0500

0800a978 <bstorage_reset>:

void bstorage_reset(Pbridge_handle phandle)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b084      	sub	sp, #16
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
	Pbstorage_handle pstorage = &phandle->storage;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	3328      	adds	r3, #40	; 0x28
 800a984:	60fb      	str	r3, [r7, #12]
	if(pstorage->section)
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	689b      	ldr	r3, [r3, #8]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d001      	beq.n	800a992 <bstorage_reset+0x1a>
		hal_storage_unlock_section();
 800a98e:	f002 fca1 	bl	800d2d4 <hal_storage_unlock_section>
	memset(pstorage,0,sizeof(bstorage_handle));
 800a992:	2210      	movs	r2, #16
 800a994:	2100      	movs	r1, #0
 800a996:	68f8      	ldr	r0, [r7, #12]
 800a998:	f003 fad0 	bl	800df3c <memset>
}
 800a99c:	bf00      	nop
 800a99e:	3710      	adds	r7, #16
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <cmd_bridge_source>:
extern vatek_result cmdsource_start(hvatek_bridge hbridge,bsource_id source);
extern vatek_result cmdsource_stop(hvatek_bridge hbridge);

static uint32_t tick_start,tick_stop,count_once=0;
vatek_result cmd_bridge_source(hvatek_bridge hbridge, Phid_bridge_cmd pcmd, Phid_bridge_result pres)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b094      	sub	sp, #80	; 0x50
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	60f8      	str	r0, [r7, #12]
 800a9ac:	60b9      	str	r1, [r7, #8]
 800a9ae:	607a      	str	r2, [r7, #4]
    vatek_result nres = vatek_unsupport;
 800a9b0:	f06f 0301 	mvn.w	r3, #1
 800a9b4:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint32_t cmd = hal_bridge_get_uint32(pcmd->cmd);
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f7ff fc2d 	bl	800a21a <hal_bridge_get_uint32>
 800a9c0:	64b8      	str	r0, [r7, #72]	; 0x48
    uint16_t pin_val = 0;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    if(count_once == 0){
 800a9c8:	4b6c      	ldr	r3, [pc, #432]	; (800ab7c <cmd_bridge_source+0x1d8>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d10d      	bne.n	800a9ec <cmd_bridge_source+0x48>
		tick_start = vatek_get_tick_ms();
 800a9d0:	f000 fee0 	bl	800b794 <vatek_get_tick_ms>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	4a6a      	ldr	r2, [pc, #424]	; (800ab80 <cmd_bridge_source+0x1dc>)
 800a9d8:	6013      	str	r3, [r2, #0]
		printf("start system time = 0x%08x\r\n",tick_start);
 800a9da:	4b69      	ldr	r3, [pc, #420]	; (800ab80 <cmd_bridge_source+0x1dc>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	4619      	mov	r1, r3
 800a9e0:	4868      	ldr	r0, [pc, #416]	; (800ab84 <cmd_bridge_source+0x1e0>)
 800a9e2:	f003 fb93 	bl	800e10c <iprintf>
		count_once = 1;
 800a9e6:	4b65      	ldr	r3, [pc, #404]	; (800ab7c <cmd_bridge_source+0x1d8>)
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	601a      	str	r2, [r3, #0]
    }
    if((cmd & 0xFFFFFF00) == BSOURCE_CMD_STATUS)
 800a9ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a9f2:	4a65      	ldr	r2, [pc, #404]	; (800ab88 <cmd_bridge_source+0x1e4>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d131      	bne.n	800aa5c <cmd_bridge_source+0xb8>
    {
        Pbdevice_source psource = cmdsource_get_source(hbridge,cmd & 0xFF);
 800a9f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	4619      	mov	r1, r3
 800a9fe:	68f8      	ldr	r0, [r7, #12]
 800aa00:	f000 f9a8 	bl	800ad54 <cmdsource_get_source>
 800aa04:	63b8      	str	r0, [r7, #56]	; 0x38
        nres = vatek_badparam;
 800aa06:	f06f 0302 	mvn.w	r3, #2
 800aa0a:	64fb      	str	r3, [r7, #76]	; 0x4c
        if(psource)
 800aa0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	f000 80af 	beq.w	800ab72 <cmd_bridge_source+0x1ce>
        {
            bridge_source binfo;
            memset(&binfo,0,sizeof(bridge_source));
 800aa14:	f107 0310 	add.w	r3, r7, #16
 800aa18:	2220      	movs	r2, #32
 800aa1a:	2100      	movs	r1, #0
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f003 fa8d 	bl	800df3c <memset>
            nres = psource->driver->get_status(psource->hsource,&binfo);
 800aa22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	695b      	ldr	r3, [r3, #20]
 800aa28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa2a:	6812      	ldr	r2, [r2, #0]
 800aa2c:	f107 0110 	add.w	r1, r7, #16
 800aa30:	4610      	mov	r0, r2
 800aa32:	4798      	blx	r3
 800aa34:	64f8      	str	r0, [r7, #76]	; 0x4c
            if(is_vatek_success(nres))
 800aa36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	f2c0 809a 	blt.w	800ab72 <cmd_bridge_source+0x1ce>
            {
            	binfo.source_id = (bsource_id)psource->driver->id;
 800aa3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	685b      	ldr	r3, [r3, #4]
 800aa44:	617b      	str	r3, [r7, #20]
            	nres = cmdsource_map_bsource(&binfo,&pres->data.raw[0]);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f103 020c 	add.w	r2, r3, #12
 800aa4c:	f107 0310 	add.w	r3, r7, #16
 800aa50:	4611      	mov	r1, r2
 800aa52:	4618      	mov	r0, r3
 800aa54:	f000 fa10 	bl	800ae78 <cmdsource_map_bsource>
 800aa58:	64f8      	str	r0, [r7, #76]	; 0x4c
 800aa5a:	e08a      	b.n	800ab72 <cmd_bridge_source+0x1ce>
            }

        }
    }
    else if(cmd == BSOURCE_CMD_CNTL)
 800aa5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa5e:	4a4b      	ldr	r2, [pc, #300]	; (800ab8c <cmd_bridge_source+0x1e8>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d154      	bne.n	800ab0e <cmd_bridge_source+0x16a>
    {
        bridge_source_cmd cmd;
        nres = map_bridge_to_buffer(&pcmd->param.raw[0],(uint8_t*)&cmd,_bparam_struct_get(bridge_source_cmd));
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	330c      	adds	r3, #12
 800aa68:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800aa6c:	4a48      	ldr	r2, [pc, #288]	; (800ab90 <cmd_bridge_source+0x1ec>)
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f7ff fc3e 	bl	800a2f0 <map_bridge_to_buffer>
 800aa74:	64f8      	str	r0, [r7, #76]	; 0x4c
        if(is_vatek_success(nres))
 800aa76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	db7a      	blt.n	800ab72 <cmd_bridge_source+0x1ce>
        {
            if(cmd.source_cntl == BSOURCE_CNTL_START)
 800aa7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa7e:	4a45      	ldr	r2, [pc, #276]	; (800ab94 <cmd_bridge_source+0x1f0>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d112      	bne.n	800aaaa <cmd_bridge_source+0x106>
            {
            	if(cmd.source_id == bsource_h1){
 800aa84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa86:	4a44      	ldr	r2, [pc, #272]	; (800ab98 <cmd_bridge_source+0x1f4>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d107      	bne.n	800aa9c <cmd_bridge_source+0xf8>
            		hal_system_sleep(100);
 800aa8c:	2064      	movs	r0, #100	; 0x64
 800aa8e:	f002 fb2d 	bl	800d0ec <hal_system_sleep>
			        nres = hal_gpio_config(HAL_IO_AUDIO_SWITCH, hal_gpio_output);
 800aa92:	2101      	movs	r1, #1
 800aa94:	2020      	movs	r0, #32
 800aa96:	f002 fb5d 	bl	800d154 <hal_gpio_config>
 800aa9a:	64f8      	str	r0, [r7, #76]	; 0x4c

            	}
                nres = cmdsource_start(hbridge,cmd.source_id);
 800aa9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa9e:	4619      	mov	r1, r3
 800aaa0:	68f8      	ldr	r0, [r7, #12]
 800aaa2:	f000 f97e 	bl	800ada2 <cmdsource_start>
 800aaa6:	64f8      	str	r0, [r7, #76]	; 0x4c
 800aaa8:	e063      	b.n	800ab72 <cmd_bridge_source+0x1ce>
			}
            else if(cmd.source_id == bsource_ep9555e || cmd.source_id == bsource_ep9351){ // set ep9555e
 800aaaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaac:	4a3b      	ldr	r2, [pc, #236]	; (800ab9c <cmd_bridge_source+0x1f8>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d003      	beq.n	800aaba <cmd_bridge_source+0x116>
 800aab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aab4:	4a3a      	ldr	r2, [pc, #232]	; (800aba0 <cmd_bridge_source+0x1fc>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d108      	bne.n	800aacc <cmd_bridge_source+0x128>
				if(is_vatek_success(nres))
 800aaba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	db58      	blt.n	800ab72 <cmd_bridge_source+0x1ce>
					nres = hal_gpio_config(HAL_IO_AUDIO_SWITCH,hal_gpio_output); //audio switch enable
 800aac0:	2101      	movs	r1, #1
 800aac2:	2020      	movs	r0, #32
 800aac4:	f002 fb46 	bl	800d154 <hal_gpio_config>
 800aac8:	64f8      	str	r0, [r7, #76]	; 0x4c
				if(is_vatek_success(nres))
 800aaca:	e052      	b.n	800ab72 <cmd_bridge_source+0x1ce>
			}
            else if(cmd.source_cntl == BSOURCE_CNTL_STOP){
 800aacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aace:	4a35      	ldr	r2, [pc, #212]	; (800aba4 <cmd_bridge_source+0x200>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d118      	bne.n	800ab06 <cmd_bridge_source+0x162>
            	tick_stop = vatek_get_tick_ms();
 800aad4:	f000 fe5e 	bl	800b794 <vatek_get_tick_ms>
 800aad8:	4603      	mov	r3, r0
 800aada:	4a33      	ldr	r2, [pc, #204]	; (800aba8 <cmd_bridge_source+0x204>)
 800aadc:	6013      	str	r3, [r2, #0]
            	printf("stop time = 0x%08x\r\n",tick_stop);
 800aade:	4b32      	ldr	r3, [pc, #200]	; (800aba8 <cmd_bridge_source+0x204>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	4619      	mov	r1, r3
 800aae4:	4831      	ldr	r0, [pc, #196]	; (800abac <cmd_bridge_source+0x208>)
 800aae6:	f003 fb11 	bl	800e10c <iprintf>
            	printf("bridge during time = 0x%08x\r\n",(tick_stop-tick_start));
 800aaea:	4b2f      	ldr	r3, [pc, #188]	; (800aba8 <cmd_bridge_source+0x204>)
 800aaec:	681a      	ldr	r2, [r3, #0]
 800aaee:	4b24      	ldr	r3, [pc, #144]	; (800ab80 <cmd_bridge_source+0x1dc>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	1ad3      	subs	r3, r2, r3
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	482e      	ldr	r0, [pc, #184]	; (800abb0 <cmd_bridge_source+0x20c>)
 800aaf8:	f003 fb08 	bl	800e10c <iprintf>
                nres = cmdsource_stop(hbridge);
 800aafc:	68f8      	ldr	r0, [r7, #12]
 800aafe:	f000 f999 	bl	800ae34 <cmdsource_stop>
 800ab02:	64f8      	str	r0, [r7, #76]	; 0x4c
 800ab04:	e035      	b.n	800ab72 <cmd_bridge_source+0x1ce>
            }
            else nres = vatek_badparam;
 800ab06:	f06f 0302 	mvn.w	r3, #2
 800ab0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab0c:	e031      	b.n	800ab72 <cmd_bridge_source+0x1ce>
        }

    }
    else if(cmd == BSOURCE_CMD_GETACTIVE)
 800ab0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab10:	4a28      	ldr	r2, [pc, #160]	; (800abb4 <cmd_bridge_source+0x210>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d12d      	bne.n	800ab72 <cmd_bridge_source+0x1ce>
    {
//    	static uint32_t run_tick = 0;
//    	uint32_t stop_tick = vatek_get_tick_ms() ;
//
//    	if (stop_tick - run_tick >= 100){
			Pbridge_handle pbridge = (Pbridge_handle)hbridge;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	643b      	str	r3, [r7, #64]	; 0x40
			nres = vatek_badstatus;
 800ab1a:	f06f 0304 	mvn.w	r3, #4
 800ab1e:	64fb      	str	r3, [r7, #76]	; 0x4c
			if(pbridge->source_active)
 800ab20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d024      	beq.n	800ab72 <cmd_bridge_source+0x1ce>
			{
				Pbdevice_source pdevice = pbridge->source_active;
 800ab28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab2c:	63fb      	str	r3, [r7, #60]	; 0x3c
				bridge_source binfo;
				memset(&binfo,0,sizeof(bridge_source));
 800ab2e:	f107 0310 	add.w	r3, r7, #16
 800ab32:	2220      	movs	r2, #32
 800ab34:	2100      	movs	r1, #0
 800ab36:	4618      	mov	r0, r3
 800ab38:	f003 fa00 	bl	800df3c <memset>

				nres = pdevice->driver->get_status(pdevice->hsource,&binfo);
 800ab3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab3e:	685b      	ldr	r3, [r3, #4]
 800ab40:	695b      	ldr	r3, [r3, #20]
 800ab42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ab44:	6812      	ldr	r2, [r2, #0]
 800ab46:	f107 0110 	add.w	r1, r7, #16
 800ab4a:	4610      	mov	r0, r2
 800ab4c:	4798      	blx	r3
 800ab4e:	64f8      	str	r0, [r7, #76]	; 0x4c


				if(is_vatek_success(nres))
 800ab50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	db0d      	blt.n	800ab72 <cmd_bridge_source+0x1ce>
				{
					binfo.source_id = (bsource_id)pdevice->driver->id;
 800ab56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	617b      	str	r3, [r7, #20]
					nres = cmdsource_map_bsource(&binfo,&pres->data.raw[0]);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f103 020c 	add.w	r2, r3, #12
 800ab64:	f107 0310 	add.w	r3, r7, #16
 800ab68:	4611      	mov	r1, r2
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f000 f984 	bl	800ae78 <cmdsource_map_bsource>
 800ab70:	64f8      	str	r0, [r7, #76]	; 0x4c
				}
			}
//			run_tick = stop_tick;
    	}
//    }
    return nres;
 800ab72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3750      	adds	r7, #80	; 0x50
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}
 800ab7c:	20000ab0 	.word	0x20000ab0
 800ab80:	20000aa8 	.word	0x20000aa8
 800ab84:	0800f41c 	.word	0x0800f41c
 800ab88:	04f10200 	.word	0x04f10200
 800ab8c:	04f10101 	.word	0x04f10101
 800ab90:	0800fdcc 	.word	0x0800fdcc
 800ab94:	fa00a501 	.word	0xfa00a501
 800ab98:	7fa01400 	.word	0x7fa01400
 800ab9c:	7fa01100 	.word	0x7fa01100
 800aba0:	7fa01200 	.word	0x7fa01200
 800aba4:	fa00a502 	.word	0xfa00a502
 800aba8:	20000aac 	.word	0x20000aac
 800abac:	0800f43c 	.word	0x0800f43c
 800abb0:	0800f454 	.word	0x0800f454
 800abb4:	04f10102 	.word	0x04f10102

0800abb8 <cmd_bridge_device>:

vatek_result cmd_bridge_device(hvatek_bridge hbridge, Phid_bridge_cmd pcmd, Phid_bridge_result pres)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b08e      	sub	sp, #56	; 0x38
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	60f8      	str	r0, [r7, #12]
 800abc0:	60b9      	str	r1, [r7, #8]
 800abc2:	607a      	str	r2, [r7, #4]
	vatek_result nres = vatek_success;
 800abc4:	2300      	movs	r3, #0
 800abc6:	637b      	str	r3, [r7, #52]	; 0x34
    Pbridge_handle pbridge = (Pbridge_handle)hbridge;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t cmd =  hal_bridge_get_uint32(pcmd->cmd);
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	4618      	mov	r0, r3
 800abd2:	f7ff fb22 	bl	800a21a <hal_bridge_get_uint32>
 800abd6:	62b8      	str	r0, [r7, #40]	; 0x28
    Pbstorage_handle pstorage = &pbridge->storage;
 800abd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abda:	3328      	adds	r3, #40	; 0x28
 800abdc:	627b      	str	r3, [r7, #36]	; 0x24
	Pbflash_command pfcmd = &pstorage->cmd;
 800abde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe0:	623b      	str	r3, [r7, #32]
	
	if(cmd == BDEVICE_CMD_GET_INFO)
 800abe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe4:	4a3f      	ldr	r2, [pc, #252]	; (800ace4 <cmd_bridge_device+0x12c>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d108      	bne.n	800abfc <cmd_bridge_device+0x44>
		nres = map_buffer_to_bridge(&pres->data.raw[0],(uint8_t*)&pbridge->info,_bparam_struct_get(bdevice_info));
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	330c      	adds	r3, #12
 800abee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800abf0:	4a3d      	ldr	r2, [pc, #244]	; (800ace8 <cmd_bridge_device+0x130>)
 800abf2:	4618      	mov	r0, r3
 800abf4:	f7ff fbcf 	bl	800a396 <map_buffer_to_bridge>
 800abf8:	6378      	str	r0, [r7, #52]	; 0x34
 800abfa:	e06e      	b.n	800acda <cmd_bridge_device+0x122>
	else if(cmd == BDEVICE_CMD_BFLASH_START)
 800abfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abfe:	4a3b      	ldr	r2, [pc, #236]	; (800acec <cmd_bridge_device+0x134>)
 800ac00:	4293      	cmp	r3, r2
 800ac02:	d113      	bne.n	800ac2c <cmd_bridge_device+0x74>
	{
		bflash_command fcmd;
        nres = map_bridge_to_buffer(&pcmd->param.raw[0],(uint8_t*)&fcmd,_bparam_struct_get(bflash_command));
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	330c      	adds	r3, #12
 800ac08:	f107 0118 	add.w	r1, r7, #24
 800ac0c:	4a38      	ldr	r2, [pc, #224]	; (800acf0 <cmd_bridge_device+0x138>)
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f7ff fb6e 	bl	800a2f0 <map_bridge_to_buffer>
 800ac14:	6378      	str	r0, [r7, #52]	; 0x34
		if(is_vatek_success(nres))
 800ac16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	db5e      	blt.n	800acda <cmd_bridge_device+0x122>
			nres = bstorage_start(pbridge,&fcmd);
 800ac1c:	f107 0318 	add.w	r3, r7, #24
 800ac20:	4619      	mov	r1, r3
 800ac22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac24:	f7ff fdb0 	bl	800a788 <bstorage_start>
 800ac28:	6378      	str	r0, [r7, #52]	; 0x34
 800ac2a:	e056      	b.n	800acda <cmd_bridge_device+0x122>
	}else if(cmd == BDEVICE_CMD_BFLASH_POS)
 800ac2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac2e:	4a31      	ldr	r2, [pc, #196]	; (800acf4 <cmd_bridge_device+0x13c>)
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d139      	bne.n	800aca8 <cmd_bridge_device+0xf0>
	{
		int32_t rlen = BSTORAGE_SECTION_LEN - pstorage->pos;
 800ac34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac36:	68db      	ldr	r3, [r3, #12]
 800ac38:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800ac3c:	633b      	str	r3, [r7, #48]	; 0x30
        nres = vatek_badparam;
 800ac3e:	f06f 0302 	mvn.w	r3, #2
 800ac42:	637b      	str	r3, [r7, #52]	; 0x34
		if(pfcmd->bcmd == BFLASH_CNTL_WRITE || pfcmd->bcmd == BFLASH_CNTL_READ)
 800ac44:	6a3b      	ldr	r3, [r7, #32]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4a2b      	ldr	r2, [pc, #172]	; (800acf8 <cmd_bridge_device+0x140>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d004      	beq.n	800ac58 <cmd_bridge_device+0xa0>
 800ac4e:	6a3b      	ldr	r3, [r7, #32]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	4a2a      	ldr	r2, [pc, #168]	; (800acfc <cmd_bridge_device+0x144>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d140      	bne.n	800acda <cmd_bridge_device+0x122>
		{
			if(rlen > BRIDGE_PARAM_MAX_LEN)rlen = BRIDGE_PARAM_MAX_LEN;
 800ac58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac5a:	2b34      	cmp	r3, #52	; 0x34
 800ac5c:	dd01      	ble.n	800ac62 <cmd_bridge_device+0xaa>
 800ac5e:	2334      	movs	r3, #52	; 0x34
 800ac60:	633b      	str	r3, [r7, #48]	; 0x30
			if(pfcmd->bcmd == BFLASH_CNTL_WRITE)
 800ac62:	6a3b      	ldr	r3, [r7, #32]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	4a24      	ldr	r2, [pc, #144]	; (800acf8 <cmd_bridge_device+0x140>)
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d108      	bne.n	800ac7e <cmd_bridge_device+0xc6>
				nres = bstorage_put(pbridge,&pcmd->param.raw[0],rlen);
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	330c      	adds	r3, #12
 800ac70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac72:	4619      	mov	r1, r3
 800ac74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac76:	f7ff fde7 	bl	800a848 <bstorage_put>
 800ac7a:	6378      	str	r0, [r7, #52]	; 0x34
 800ac7c:	e02d      	b.n	800acda <cmd_bridge_device+0x122>
			else 
			{
				uint8_t* ptrbuf = NULL;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	617b      	str	r3, [r7, #20]
				nres = bstorage_get(pbridge,&ptrbuf,rlen);
 800ac82:	f107 0314 	add.w	r3, r7, #20
 800ac86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac88:	4619      	mov	r1, r3
 800ac8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac8c:	f7ff fe0e 	bl	800a8ac <bstorage_get>
 800ac90:	6378      	str	r0, [r7, #52]	; 0x34
				if(is_vatek_success(nres))
 800ac92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	db20      	blt.n	800acda <cmd_bridge_device+0x122>
					memcpy(&pres->data.raw[0],ptrbuf,rlen);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	330c      	adds	r3, #12
 800ac9c:	6979      	ldr	r1, [r7, #20]
 800ac9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aca0:	4618      	mov	r0, r3
 800aca2:	f003 f93d 	bl	800df20 <memcpy>
 800aca6:	e018      	b.n	800acda <cmd_bridge_device+0x122>
			}
		}
	}else if(cmd == BDEVICE_CMD_BFLASH_END)
 800aca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acaa:	4a15      	ldr	r2, [pc, #84]	; (800ad00 <cmd_bridge_device+0x148>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d111      	bne.n	800acd4 <cmd_bridge_device+0x11c>
	{
		nres = vatek_badparam;
 800acb0:	f06f 0302 	mvn.w	r3, #2
 800acb4:	637b      	str	r3, [r7, #52]	; 0x34
		if(pfcmd->bcmd == BFLASH_CNTL_WRITE || pfcmd->bcmd == BFLASH_CNTL_READ)
 800acb6:	6a3b      	ldr	r3, [r7, #32]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4a0f      	ldr	r2, [pc, #60]	; (800acf8 <cmd_bridge_device+0x140>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d004      	beq.n	800acca <cmd_bridge_device+0x112>
 800acc0:	6a3b      	ldr	r3, [r7, #32]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4a0d      	ldr	r2, [pc, #52]	; (800acfc <cmd_bridge_device+0x144>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d107      	bne.n	800acda <cmd_bridge_device+0x122>
			nres = bstorage_stop(pbridge);
 800acca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800accc:	f7ff fe1c 	bl	800a908 <bstorage_stop>
 800acd0:	6378      	str	r0, [r7, #52]	; 0x34
 800acd2:	e002      	b.n	800acda <cmd_bridge_device+0x122>
	}
	else nres = vatek_unsupport;
 800acd4:	f06f 0301 	mvn.w	r3, #1
 800acd8:	637b      	str	r3, [r7, #52]	; 0x34
    return nres;
 800acda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3738      	adds	r7, #56	; 0x38
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}
 800ace4:	04f00800 	.word	0x04f00800
 800ace8:	0800fe1c 	.word	0x0800fe1c
 800acec:	04f00201 	.word	0x04f00201
 800acf0:	0800fe10 	.word	0x0800fe10
 800acf4:	04f00202 	.word	0x04f00202
 800acf8:	0f0f0500 	.word	0x0f0f0500
 800acfc:	0f0f0501 	.word	0x0f0f0501
 800ad00:	04f00203 	.word	0x04f00203

0800ad04 <cmd_bridge_demod>:

vatek_result cmd_bridge_demod(hvatek_bridge hbridge, Phid_bridge_cmd pcmd, Phid_bridge_result pres)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b086      	sub	sp, #24
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	60f8      	str	r0, [r7, #12]
 800ad0c:	60b9      	str	r1, [r7, #8]
 800ad0e:	607a      	str	r2, [r7, #4]
    vatek_result nres = vatek_unsupport;
 800ad10:	f06f 0301 	mvn.w	r3, #1
 800ad14:	617b      	str	r3, [r7, #20]
    uint32_t cmd = hal_bridge_get_uint32(pcmd->cmd);
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	685b      	ldr	r3, [r3, #4]
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f7ff fa7d 	bl	800a21a <hal_bridge_get_uint32>
 800ad20:	6138      	str	r0, [r7, #16]
    }else if(cmd == BDEMOD_CMD_STOP)
    {

    }

    return nres;
 800ad22:	697b      	ldr	r3, [r7, #20]
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3718      	adds	r7, #24
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <cmd_bridge_rfmixer>:

vatek_result cmd_bridge_rfmixer(hvatek_bridge hbridge, Phid_bridge_cmd pcmd, Phid_bridge_result pres)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b086      	sub	sp, #24
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	60f8      	str	r0, [r7, #12]
 800ad34:	60b9      	str	r1, [r7, #8]
 800ad36:	607a      	str	r2, [r7, #4]
    vatek_result nres = vatek_unsupport;
 800ad38:	f06f 0301 	mvn.w	r3, #1
 800ad3c:	617b      	str	r3, [r7, #20]
    uint32_t cmd = hal_bridge_get_uint32(pcmd->cmd);
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	4618      	mov	r0, r3
 800ad44:	f7ff fa69 	bl	800a21a <hal_bridge_get_uint32>
 800ad48:	6138      	str	r0, [r7, #16]
    return nres;
 800ad4a:	697b      	ldr	r3, [r7, #20]
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3718      	adds	r7, #24
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <cmdsource_get_source>:

Pbdevice_source cmdsource_get_source(hvatek_bridge hbridge,int32_t idx)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b086      	sub	sp, #24
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	6039      	str	r1, [r7, #0]
    bpointer bptr = NULL;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	60fb      	str	r3, [r7, #12]
    vatek_source_get_first(hbridge,&bptr);
 800ad62:	f107 030c 	add.w	r3, r7, #12
 800ad66:	4619      	mov	r1, r3
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f001 f9d6 	bl	800c11a <vatek_source_get_first>
    int32_t pos = 0;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	617b      	str	r3, [r7, #20]
    while(bptr)
 800ad72:	e00e      	b.n	800ad92 <cmdsource_get_source+0x3e>
    {
        Pbdevice_source pdevice = vatek_source_get_next(&bptr);
 800ad74:	f107 030c 	add.w	r3, r7, #12
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f001 f9df 	bl	800c13c <vatek_source_get_next>
 800ad7e:	6138      	str	r0, [r7, #16]
        if(pos == idx)return pdevice;
 800ad80:	697a      	ldr	r2, [r7, #20]
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d101      	bne.n	800ad8c <cmdsource_get_source+0x38>
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	e006      	b.n	800ad9a <cmdsource_get_source+0x46>
        pos++;
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	3301      	adds	r3, #1
 800ad90:	617b      	str	r3, [r7, #20]
    while(bptr)
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d1ed      	bne.n	800ad74 <cmdsource_get_source+0x20>
    }
    return NULL;
 800ad98:	2300      	movs	r3, #0
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3718      	adds	r7, #24
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}

0800ada2 <cmdsource_start>:

vatek_result cmdsource_start(hvatek_bridge hbridge,bsource_id source)
{
 800ada2:	b580      	push	{r7, lr}
 800ada4:	b086      	sub	sp, #24
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
 800adaa:	6039      	str	r1, [r7, #0]
    Pbridge_handle pbridge = (Pbridge_handle)hbridge;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	613b      	str	r3, [r7, #16]
    vatek_result nres = vatek_badparam;
 800adb0:	f06f 0302 	mvn.w	r3, #2
 800adb4:	617b      	str	r3, [r7, #20]
    if(!pbridge->source_active)
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d135      	bne.n	800ae2a <cmdsource_start+0x88>
    {
        bpointer bptr = NULL;
 800adbe:	2300      	movs	r3, #0
 800adc0:	60bb      	str	r3, [r7, #8]
        vatek_source_get_first(hbridge,&bptr);
 800adc2:	f107 0308 	add.w	r3, r7, #8
 800adc6:	4619      	mov	r1, r3
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f001 f9a6 	bl	800c11a <vatek_source_get_first>

        while(bptr)
 800adce:	e027      	b.n	800ae20 <cmdsource_start+0x7e>
        {
            Pbdevice_source pdevice = vatek_source_get_next(&bptr);
 800add0:	f107 0308 	add.w	r3, r7, #8
 800add4:	4618      	mov	r0, r3
 800add6:	f001 f9b1 	bl	800c13c <vatek_source_get_next>
 800adda:	60f8      	str	r0, [r7, #12]
            if(pdevice->driver->id == source)
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	685b      	ldr	r3, [r3, #4]
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	683a      	ldr	r2, [r7, #0]
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d10f      	bne.n	800ae08 <cmdsource_start+0x66>
            {
                nres = pdevice->driver->set_open(pdevice->hsource,1);
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	685b      	ldr	r3, [r3, #4]
 800adec:	699b      	ldr	r3, [r3, #24]
 800adee:	68fa      	ldr	r2, [r7, #12]
 800adf0:	6812      	ldr	r2, [r2, #0]
 800adf2:	2101      	movs	r1, #1
 800adf4:	4610      	mov	r0, r2
 800adf6:	4798      	blx	r3
 800adf8:	6178      	str	r0, [r7, #20]
                if(is_vatek_success(nres))
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	db0c      	blt.n	800ae1a <cmdsource_start+0x78>
                    pbridge->source_active = pdevice;
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	68fa      	ldr	r2, [r7, #12]
 800ae04:	625a      	str	r2, [r3, #36]	; 0x24
 800ae06:	e008      	b.n	800ae1a <cmdsource_start+0x78>
            }
            else nres = pdevice->driver->set_open(pdevice->hsource,0);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	699b      	ldr	r3, [r3, #24]
 800ae0e:	68fa      	ldr	r2, [r7, #12]
 800ae10:	6812      	ldr	r2, [r2, #0]
 800ae12:	2100      	movs	r1, #0
 800ae14:	4610      	mov	r0, r2
 800ae16:	4798      	blx	r3
 800ae18:	6178      	str	r0, [r7, #20]
            if(!is_vatek_success(nres))break;
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	db03      	blt.n	800ae28 <cmdsource_start+0x86>
        while(bptr)
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d1d4      	bne.n	800add0 <cmdsource_start+0x2e>
 800ae26:	e000      	b.n	800ae2a <cmdsource_start+0x88>
            if(!is_vatek_success(nres))break;
 800ae28:	bf00      	nop
        }
    }
    return nres;
 800ae2a:	697b      	ldr	r3, [r7, #20]
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3718      	adds	r7, #24
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}

0800ae34 <cmdsource_stop>:

vatek_result cmdsource_stop(hvatek_bridge hbridge)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b086      	sub	sp, #24
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
    Pbridge_handle pbridge = (Pbridge_handle)hbridge;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	613b      	str	r3, [r7, #16]
    vatek_result nres = vatek_badparam;
 800ae40:	f06f 0302 	mvn.w	r3, #2
 800ae44:	617b      	str	r3, [r7, #20]
    if(pbridge->source_active)
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d00e      	beq.n	800ae6c <cmdsource_stop+0x38>
    {
        Pbdevice_source pdevice = pbridge->source_active;
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae52:	60fb      	str	r3, [r7, #12]
        nres = pdevice->driver->set_open(pdevice->hsource,0);
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	699b      	ldr	r3, [r3, #24]
 800ae5a:	68fa      	ldr	r2, [r7, #12]
 800ae5c:	6812      	ldr	r2, [r2, #0]
 800ae5e:	2100      	movs	r1, #0
 800ae60:	4610      	mov	r0, r2
 800ae62:	4798      	blx	r3
 800ae64:	6178      	str	r0, [r7, #20]
        pbridge->source_active = NULL;
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	625a      	str	r2, [r3, #36]	; 0x24
    }
    return nres;  
 800ae6c:	697b      	ldr	r3, [r7, #20]
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3718      	adds	r7, #24
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}
	...

0800ae78 <cmdsource_map_bsource>:

vatek_result cmdsource_map_bsource(Pbridge_source psource,uint8_t* buf)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b084      	sub	sp, #16
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
 800ae80:	6039      	str	r1, [r7, #0]
    vatek_result nres = map_buffer_to_bridge(&buf[0],(uint8_t*)&psource->video_info,_bparam_struct_get(bridge_video_info));
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	3308      	adds	r3, #8
 800ae86:	4a0f      	ldr	r2, [pc, #60]	; (800aec4 <cmdsource_map_bsource+0x4c>)
 800ae88:	4619      	mov	r1, r3
 800ae8a:	6838      	ldr	r0, [r7, #0]
 800ae8c:	f7ff fa83 	bl	800a396 <map_buffer_to_bridge>
 800ae90:	60f8      	str	r0, [r7, #12]
    if(is_vatek_success(nres))
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	db07      	blt.n	800aea8 <cmdsource_map_bsource+0x30>
        nres = map_buffer_to_bridge(&buf[0],(uint8_t*)&psource->audio_info,_bparam_struct_get(bridge_audio_info));
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	331c      	adds	r3, #28
 800ae9c:	4a0a      	ldr	r2, [pc, #40]	; (800aec8 <cmdsource_map_bsource+0x50>)
 800ae9e:	4619      	mov	r1, r3
 800aea0:	6838      	ldr	r0, [r7, #0]
 800aea2:	f7ff fa78 	bl	800a396 <map_buffer_to_bridge>
 800aea6:	60f8      	str	r0, [r7, #12]
    if(is_vatek_success(nres))
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	db05      	blt.n	800aeba <cmdsource_map_bsource+0x42>
        nres = map_buffer_to_bridge(&buf[0],(uint8_t*)psource,_bparam_struct_get(bridge_source));
 800aeae:	4a07      	ldr	r2, [pc, #28]	; (800aecc <cmdsource_map_bsource+0x54>)
 800aeb0:	6879      	ldr	r1, [r7, #4]
 800aeb2:	6838      	ldr	r0, [r7, #0]
 800aeb4:	f7ff fa6f 	bl	800a396 <map_buffer_to_bridge>
 800aeb8:	60f8      	str	r0, [r7, #12]
    return nres;
 800aeba:	68fb      	ldr	r3, [r7, #12]
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3710      	adds	r7, #16
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}
 800aec4:	0800fde4 	.word	0x0800fde4
 800aec8:	0800fe04 	.word	0x0800fe04
 800aecc:	0800fdd8 	.word	0x0800fdd8

0800aed0 <cmd_mod>:
#define BRIDGE_MOD_GETADDR(cmd)             hal_bridge_get_uint32(cmd->param.mod.address)
#define BRIDGE_MOD_GETLEN(cmd)              hal_bridge_get_uint32(cmd->param.mod.len)
#define BRIDGE_MOD_GETDATATYPE(cmd)         hal_bridge_get_uint32(cmd->param.mod.datatype)

vatek_result cmd_mod(hvatek_bridge hbridge, Phid_bridge_cmd pcmd, Phid_bridge_result pres)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b08c      	sub	sp, #48	; 0x30
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	60f8      	str	r0, [r7, #12]
 800aed8:	60b9      	str	r1, [r7, #8]
 800aeda:	607a      	str	r2, [r7, #4]
	vatek_result nres = vatek_success;
 800aedc:	2300      	movs	r3, #0
 800aede:	62fb      	str	r3, [r7, #44]	; 0x2c
	Pbridge_mod_param modparam = &pcmd->param.mod;
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	330c      	adds	r3, #12
 800aee4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t usbcmd = hal_bridge_get_uint32(pcmd->cmd);
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	685b      	ldr	r3, [r3, #4]
 800aeea:	4618      	mov	r0, r3
 800aeec:	f7ff f995 	bl	800a21a <hal_bridge_get_uint32>
 800aef0:	6278      	str	r0, [r7, #36]	; 0x24
	uint32_t modidx = BRIDGE_MOD_GETIDX(pcmd);
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	695b      	ldr	r3, [r3, #20]
 800aef6:	4618      	mov	r0, r3
 800aef8:	f7ff f98f 	bl	800a21a <hal_bridge_get_uint32>
 800aefc:	6238      	str	r0, [r7, #32]
	uint32_t modaddr = BRIDGE_MOD_GETADDR(pcmd);
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	68db      	ldr	r3, [r3, #12]
 800af02:	4618      	mov	r0, r3
 800af04:	f7ff f989 	bl	800a21a <hal_bridge_get_uint32>
 800af08:	61f8      	str	r0, [r7, #28]
	uint32_t modlen = BRIDGE_MOD_GETLEN(pcmd);
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	691b      	ldr	r3, [r3, #16]
 800af0e:	4618      	mov	r0, r3
 800af10:	f7ff f983 	bl	800a21a <hal_bridge_get_uint32>
 800af14:	61b8      	str	r0, [r7, #24]
	uint32_t modtype = BRIDGE_MOD_GETDATATYPE(pcmd);
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	699b      	ldr	r3, [r3, #24]
 800af1a:	4618      	mov	r0, r3
 800af1c:	f7ff f97d 	bl	800a21a <hal_bridge_get_uint32>
 800af20:	6178      	str	r0, [r7, #20]

	if (usbcmd == MODULATOR_CMD_GETNUMS)pres->result = hal_bridge_get_uint32(1);
 800af22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af24:	4a31      	ldr	r2, [pc, #196]	; (800afec <cmd_mod+0x11c>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d107      	bne.n	800af3a <cmd_mod+0x6a>
 800af2a:	2001      	movs	r0, #1
 800af2c:	f7ff f975 	bl	800a21a <hal_bridge_get_uint32>
 800af30:	4603      	mov	r3, r0
 800af32:	461a      	mov	r2, r3
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	609a      	str	r2, [r3, #8]
 800af38:	e052      	b.n	800afe0 <cmd_mod+0x110>
	else 
	{
		if (modidx == 0)
 800af3a:	6a3b      	ldr	r3, [r7, #32]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d147      	bne.n	800afd0 <cmd_mod+0x100>
		{
			if (usbcmd == MODULATOR_CMD_OPEN)pres->result = hal_bridge_get_uint32(HALBRIDGE_ERR_SUCCESS);
 800af40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af46:	d107      	bne.n	800af58 <cmd_mod+0x88>
 800af48:	2000      	movs	r0, #0
 800af4a:	f7ff f966 	bl	800a21a <hal_bridge_get_uint32>
 800af4e:	4603      	mov	r3, r0
 800af50:	461a      	mov	r2, r3
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	609a      	str	r2, [r3, #8]
 800af56:	e043      	b.n	800afe0 <cmd_mod+0x110>
			else if (usbcmd == MODULATOR_CMD_CLOSE)pres->result = hal_bridge_get_uint32(HALBRIDGE_ERR_SUCCESS);
 800af58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af5a:	4a25      	ldr	r2, [pc, #148]	; (800aff0 <cmd_mod+0x120>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d107      	bne.n	800af70 <cmd_mod+0xa0>
 800af60:	2000      	movs	r0, #0
 800af62:	f7ff f95a 	bl	800a21a <hal_bridge_get_uint32>
 800af66:	4603      	mov	r3, r0
 800af68:	461a      	mov	r2, r3
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	609a      	str	r2, [r3, #8]
 800af6e:	e037      	b.n	800afe0 <cmd_mod+0x110>
			else if (usbcmd == MODULATOR_CMD_TRANSFER)
 800af70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af72:	4a20      	ldr	r2, [pc, #128]	; (800aff4 <cmd_mod+0x124>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d133      	bne.n	800afe0 <cmd_mod+0x110>
			{
				if (modlen <= BRIDGE_MOD_BUFFER_LEN / 4)
 800af78:	69bb      	ldr	r3, [r7, #24]
 800af7a:	2b08      	cmp	r3, #8
 800af7c:	d830      	bhi.n	800afe0 <cmd_mod+0x110>
				{
					nres = bridge_bulk_cmd(modtype, modaddr, &modparam->buffer[0], modlen);
 800af7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af80:	f103 0210 	add.w	r2, r3, #16
 800af84:	69bb      	ldr	r3, [r7, #24]
 800af86:	69f9      	ldr	r1, [r7, #28]
 800af88:	6978      	ldr	r0, [r7, #20]
 800af8a:	f000 f883 	bl	800b094 <bridge_bulk_cmd>
 800af8e:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (is_vatek_success(nres))
 800af90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af92:	2b00      	cmp	r3, #0
 800af94:	db13      	blt.n	800afbe <cmd_mod+0xee>
                    {
                        if(!MOD_DATA_IS_WRITE(modtype))memcpy(&pres->data.mod, modparam, sizeof(bridge_mod_param));
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	f003 0301 	and.w	r3, r3, #1
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d106      	bne.n	800afae <cmd_mod+0xde>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	330c      	adds	r3, #12
 800afa4:	2230      	movs	r2, #48	; 0x30
 800afa6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800afa8:	4618      	mov	r0, r3
 800afaa:	f002 ffb9 	bl	800df20 <memcpy>
                        pres->result = hal_bridge_get_uint32((uint32_t)HALBRIDGE_ERR_SUCCESS);
 800afae:	2000      	movs	r0, #0
 800afb0:	f7ff f933 	bl	800a21a <hal_bridge_get_uint32>
 800afb4:	4603      	mov	r3, r0
 800afb6:	461a      	mov	r2, r3
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	609a      	str	r2, [r3, #8]
 800afbc:	e010      	b.n	800afe0 <cmd_mod+0x110>
                    }
					else pres->result = hal_bridge_get_uint32((uint32_t)HALBRIDGE_ERR_HWFAIL);
 800afbe:	f06f 0005 	mvn.w	r0, #5
 800afc2:	f7ff f92a 	bl	800a21a <hal_bridge_get_uint32>
 800afc6:	4603      	mov	r3, r0
 800afc8:	461a      	mov	r2, r3
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	609a      	str	r2, [r3, #8]
 800afce:	e007      	b.n	800afe0 <cmd_mod+0x110>
				}
			}
		}
		else pres->result = hal_bridge_get_uint32((uint32_t)HALBRIDGE_ERR_BADPARAM);
 800afd0:	f06f 0002 	mvn.w	r0, #2
 800afd4:	f7ff f921 	bl	800a21a <hal_bridge_get_uint32>
 800afd8:	4603      	mov	r3, r0
 800afda:	461a      	mov	r2, r3
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	609a      	str	r2, [r3, #8]
	}
	return nres;
 800afe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3730      	adds	r7, #48	; 0x30
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}
 800afea:	bf00      	nop
 800afec:	02000003 	.word	0x02000003
 800aff0:	02000001 	.word	0x02000001
 800aff4:	02000002 	.word	0x02000002

0800aff8 <bridge_i2c_read>:

vatek_result bridge_i2c_read(uint8_t dev, uint8_t* pbuf, uint32_t len)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b086      	sub	sp, #24
 800affc:	af00      	add	r7, sp, #0
 800affe:	4603      	mov	r3, r0
 800b000:	60b9      	str	r1, [r7, #8]
 800b002:	607a      	str	r2, [r7, #4]
 800b004:	73fb      	strb	r3, [r7, #15]
	vatek_result res = hal_i2c_start(dev,0);
 800b006:	7bfb      	ldrb	r3, [r7, #15]
 800b008:	2100      	movs	r1, #0
 800b00a:	4618      	mov	r0, r3
 800b00c:	f002 f8e5 	bl	800d1da <hal_i2c_start>
 800b010:	6178      	str	r0, [r7, #20]
	if (is_vatek_success(res))
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	2b00      	cmp	r3, #0
 800b016:	db0b      	blt.n	800b030 <bridge_i2c_read+0x38>
	{
		res = hal_i2c_read(pbuf, (int32_t)len);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	4619      	mov	r1, r3
 800b01c:	68b8      	ldr	r0, [r7, #8]
 800b01e:	f002 f913 	bl	800d248 <hal_i2c_read>
 800b022:	6178      	str	r0, [r7, #20]
		if (is_vatek_success(res))res = hal_i2c_stop();
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	2b00      	cmp	r3, #0
 800b028:	db02      	blt.n	800b030 <bridge_i2c_read+0x38>
 800b02a:	f002 f928 	bl	800d27e <hal_i2c_stop>
 800b02e:	6178      	str	r0, [r7, #20]
	}

	if (!is_vatek_success(res))return vatek_hwfail;
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	2b00      	cmp	r3, #0
 800b034:	da02      	bge.n	800b03c <bridge_i2c_read+0x44>
 800b036:	f06f 0305 	mvn.w	r3, #5
 800b03a:	e000      	b.n	800b03e <bridge_i2c_read+0x46>
	return vatek_success;
 800b03c:	2300      	movs	r3, #0
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3718      	adds	r7, #24
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}

0800b046 <bridge_i2c_write>:

vatek_result bridge_i2c_write(uint8_t dev, uint8_t* pbuf, uint32_t len)
{
 800b046:	b580      	push	{r7, lr}
 800b048:	b086      	sub	sp, #24
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	4603      	mov	r3, r0
 800b04e:	60b9      	str	r1, [r7, #8]
 800b050:	607a      	str	r2, [r7, #4]
 800b052:	73fb      	strb	r3, [r7, #15]
	vatek_result res = hal_i2c_start(dev,0);
 800b054:	7bfb      	ldrb	r3, [r7, #15]
 800b056:	2100      	movs	r1, #0
 800b058:	4618      	mov	r0, r3
 800b05a:	f002 f8be 	bl	800d1da <hal_i2c_start>
 800b05e:	6178      	str	r0, [r7, #20]
	if (is_vatek_success(res))
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	2b00      	cmp	r3, #0
 800b064:	db0b      	blt.n	800b07e <bridge_i2c_write+0x38>
	{
		res = hal_i2c_write(pbuf, (int32_t)len);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	4619      	mov	r1, r3
 800b06a:	68b8      	ldr	r0, [r7, #8]
 800b06c:	f002 f8d1 	bl	800d212 <hal_i2c_write>
 800b070:	6178      	str	r0, [r7, #20]
		if (is_vatek_success(res))res = hal_i2c_stop();
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	2b00      	cmp	r3, #0
 800b076:	db02      	blt.n	800b07e <bridge_i2c_write+0x38>
 800b078:	f002 f901 	bl	800d27e <hal_i2c_stop>
 800b07c:	6178      	str	r0, [r7, #20]
	}

	if (!is_vatek_success(res))return vatek_hwfail;
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	2b00      	cmp	r3, #0
 800b082:	da02      	bge.n	800b08a <bridge_i2c_write+0x44>
 800b084:	f06f 0305 	mvn.w	r3, #5
 800b088:	e000      	b.n	800b08c <bridge_i2c_write+0x46>
	else return vatek_success;
 800b08a:	2300      	movs	r3, #0
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3718      	adds	r7, #24
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}

0800b094 <bridge_bulk_cmd>:
extern vatek_result internal_i2c_write(uint8_t cmd, uint32_t addr, uint8_t* value);
extern vatek_result internal_i2c_code_read(uint8_t cmd, uint32_t addr, uint8_t* value);
extern vatek_result internal_i2c_code_write(uint8_t cmd, uint32_t addr, uint8_t* value);

vatek_result bridge_bulk_cmd(uint32_t type, uint32_t addr, uint8_t* pbuf, uint32_t len)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b08a      	sub	sp, #40	; 0x28
 800b098:	af00      	add	r7, sp, #0
 800b09a:	60f8      	str	r0, [r7, #12]
 800b09c:	60b9      	str	r1, [r7, #8]
 800b09e:	607a      	str	r2, [r7, #4]
 800b0a0:	603b      	str	r3, [r7, #0]
	uint8_t cmd = I2C_MEM_WRITE_TAG;
 800b0a2:	2307      	movs	r3, #7
 800b0a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t* wbuf = (uint8_t*)pbuf;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	623b      	str	r3, [r7, #32]
	uint32_t waddr = addr;
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	61fb      	str	r3, [r7, #28]
	int32_t wlen = len;
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	61bb      	str	r3, [r7, #24]
	vatek_result nres = vatek_success;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	617b      	str	r3, [r7, #20]
	fpinternal_operation bulktransfer = NULL;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	613b      	str	r3, [r7, #16]

    if (MOD_DATA_IS_WRITE(type))
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	f003 0301 	and.w	r3, r3, #1
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d015      	beq.n	800b0f2 <bridge_bulk_cmd+0x5e>
    {
        bulktransfer = internal_i2c_write;
 800b0c6:	4b24      	ldr	r3, [pc, #144]	; (800b158 <bridge_bulk_cmd+0xc4>)
 800b0c8:	613b      	str	r3, [r7, #16]
        cmd = I2C_MEM_WRITE_TAG;
 800b0ca:	2307      	movs	r3, #7
 800b0cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (MOD_DATA_IS_REG(type))cmd = I2C_REG_WRITE_TAG;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d003      	beq.n	800b0e2 <bridge_bulk_cmd+0x4e>
 800b0da:	2306      	movs	r3, #6
 800b0dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b0e0:	e030      	b.n	800b144 <bridge_bulk_cmd+0xb0>
        else if (MOD_DATA_IS_CODE(type))bulktransfer = internal_i2c_code_write;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d02b      	beq.n	800b144 <bridge_bulk_cmd+0xb0>
 800b0ec:	4b1b      	ldr	r3, [pc, #108]	; (800b15c <bridge_bulk_cmd+0xc8>)
 800b0ee:	613b      	str	r3, [r7, #16]
 800b0f0:	e028      	b.n	800b144 <bridge_bulk_cmd+0xb0>
    }
    else 
    {
        cmd = I2C_MEM_READ_TAG;
 800b0f2:	2305      	movs	r3, #5
 800b0f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        bulktransfer = internal_i2c_read;
 800b0f8:	4b19      	ldr	r3, [pc, #100]	; (800b160 <bridge_bulk_cmd+0xcc>)
 800b0fa:	613b      	str	r3, [r7, #16]
        if (MOD_DATA_IS_REG(type))cmd = I2C_REG_READ_TAG;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b102:	2b00      	cmp	r3, #0
 800b104:	d003      	beq.n	800b10e <bridge_bulk_cmd+0x7a>
 800b106:	2304      	movs	r3, #4
 800b108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b10c:	e01a      	b.n	800b144 <bridge_bulk_cmd+0xb0>
        else if (MOD_DATA_IS_CODE(type))bulktransfer = internal_i2c_code_read;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b114:	2b00      	cmp	r3, #0
 800b116:	d015      	beq.n	800b144 <bridge_bulk_cmd+0xb0>
 800b118:	4b12      	ldr	r3, [pc, #72]	; (800b164 <bridge_bulk_cmd+0xd0>)
 800b11a:	613b      	str	r3, [r7, #16]
    }

    while (wlen)
 800b11c:	e012      	b.n	800b144 <bridge_bulk_cmd+0xb0>
    {
        nres = bulktransfer(cmd, waddr, wbuf);
 800b11e:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	6a3a      	ldr	r2, [r7, #32]
 800b126:	69f9      	ldr	r1, [r7, #28]
 800b128:	4798      	blx	r3
 800b12a:	6178      	str	r0, [r7, #20]
        if (!is_vatek_success(nres))break;
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	db0c      	blt.n	800b14c <bridge_bulk_cmd+0xb8>
        wlen--;
 800b132:	69bb      	ldr	r3, [r7, #24]
 800b134:	3b01      	subs	r3, #1
 800b136:	61bb      	str	r3, [r7, #24]
        waddr++;
 800b138:	69fb      	ldr	r3, [r7, #28]
 800b13a:	3301      	adds	r3, #1
 800b13c:	61fb      	str	r3, [r7, #28]
        wbuf += 4;
 800b13e:	6a3b      	ldr	r3, [r7, #32]
 800b140:	3304      	adds	r3, #4
 800b142:	623b      	str	r3, [r7, #32]
    while (wlen)
 800b144:	69bb      	ldr	r3, [r7, #24]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d1e9      	bne.n	800b11e <bridge_bulk_cmd+0x8a>
 800b14a:	e000      	b.n	800b14e <bridge_bulk_cmd+0xba>
        if (!is_vatek_success(nres))break;
 800b14c:	bf00      	nop
    }
	return nres;
 800b14e:	697b      	ldr	r3, [r7, #20]
}
 800b150:	4618      	mov	r0, r3
 800b152:	3728      	adds	r7, #40	; 0x28
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}
 800b158:	0800b1e1 	.word	0x0800b1e1
 800b15c:	0800b2f1 	.word	0x0800b2f1
 800b160:	0800b169 	.word	0x0800b169
 800b164:	0800b251 	.word	0x0800b251

0800b168 <internal_i2c_read>:

vatek_result internal_i2c_read(uint8_t cmd, uint32_t addr, uint8_t* value)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b088      	sub	sp, #32
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	4603      	mov	r3, r0
 800b170:	60b9      	str	r1, [r7, #8]
 800b172:	607a      	str	r2, [r7, #4]
 800b174:	73fb      	strb	r3, [r7, #15]
	vatek_result nres = vatek_hwfail;
 800b176:	f06f 0305 	mvn.w	r3, #5
 800b17a:	61fb      	str	r3, [r7, #28]
	uint8_t modulator_buffer[TURNKEY_MODULATOR_BUFFER_LEN];
	modulator_buffer[0] = 0x04;
 800b17c:	2304      	movs	r3, #4
 800b17e:	743b      	strb	r3, [r7, #16]
	modulator_buffer[1] = (uint8_t)(addr & 0xFF);
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	b2db      	uxtb	r3, r3
 800b184:	747b      	strb	r3, [r7, #17]
	modulator_buffer[2] = (uint8_t)((addr >> 8) & 0xFF);
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	0a1b      	lsrs	r3, r3, #8
 800b18a:	b2db      	uxtb	r3, r3
 800b18c:	74bb      	strb	r3, [r7, #18]
	modulator_buffer[3] = (uint8_t)((addr >> 16) & 0xFF);
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	0c1b      	lsrs	r3, r3, #16
 800b192:	b2db      	uxtb	r3, r3
 800b194:	74fb      	strb	r3, [r7, #19]
	modulator_buffer[4] = cmd;
 800b196:	7bfb      	ldrb	r3, [r7, #15]
 800b198:	753b      	strb	r3, [r7, #20]

	nres = bridge_i2c_write(I2C_DEVADDR_WRITE, &modulator_buffer[0], 5);
 800b19a:	f107 0310 	add.w	r3, r7, #16
 800b19e:	2205      	movs	r2, #5
 800b1a0:	4619      	mov	r1, r3
 800b1a2:	2020      	movs	r0, #32
 800b1a4:	f7ff ff4f 	bl	800b046 <bridge_i2c_write>
 800b1a8:	61f8      	str	r0, [r7, #28]
	if (is_vatek_success(nres))
 800b1aa:	69fb      	ldr	r3, [r7, #28]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	db12      	blt.n	800b1d6 <internal_i2c_read+0x6e>
	{
		modulator_buffer[0] = 0;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	743b      	strb	r3, [r7, #16]
		nres = bridge_i2c_write(I2C_DEVADDR_WRITE, &modulator_buffer[0], 1);
 800b1b4:	f107 0310 	add.w	r3, r7, #16
 800b1b8:	2201      	movs	r2, #1
 800b1ba:	4619      	mov	r1, r3
 800b1bc:	2020      	movs	r0, #32
 800b1be:	f7ff ff42 	bl	800b046 <bridge_i2c_write>
 800b1c2:	61f8      	str	r0, [r7, #28]
		if (is_vatek_success(nres))nres = bridge_i2c_read(I2C_DEVADDR_READ | 1, &value[0], 4);
 800b1c4:	69fb      	ldr	r3, [r7, #28]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	db05      	blt.n	800b1d6 <internal_i2c_read+0x6e>
 800b1ca:	2204      	movs	r2, #4
 800b1cc:	6879      	ldr	r1, [r7, #4]
 800b1ce:	2021      	movs	r0, #33	; 0x21
 800b1d0:	f7ff ff12 	bl	800aff8 <bridge_i2c_read>
 800b1d4:	61f8      	str	r0, [r7, #28]
	}

	return nres;
 800b1d6:	69fb      	ldr	r3, [r7, #28]
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3720      	adds	r7, #32
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}

0800b1e0 <internal_i2c_write>:

vatek_result internal_i2c_write(uint8_t cmd, uint32_t addr, uint8_t* value)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b088      	sub	sp, #32
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	60b9      	str	r1, [r7, #8]
 800b1ea:	607a      	str	r2, [r7, #4]
 800b1ec:	73fb      	strb	r3, [r7, #15]
	vatek_result nres = vatek_hwfail;
 800b1ee:	f06f 0305 	mvn.w	r3, #5
 800b1f2:	61fb      	str	r3, [r7, #28]
	uint8_t modulator_buffer[TURNKEY_MODULATOR_BUFFER_LEN];

	modulator_buffer[0] = 0x00;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	743b      	strb	r3, [r7, #16]
	modulator_buffer[1] = *value++;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	1c5a      	adds	r2, r3, #1
 800b1fc:	607a      	str	r2, [r7, #4]
 800b1fe:	781b      	ldrb	r3, [r3, #0]
 800b200:	747b      	strb	r3, [r7, #17]
	modulator_buffer[2] = *value++;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	1c5a      	adds	r2, r3, #1
 800b206:	607a      	str	r2, [r7, #4]
 800b208:	781b      	ldrb	r3, [r3, #0]
 800b20a:	74bb      	strb	r3, [r7, #18]
	modulator_buffer[3] = *value++;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	1c5a      	adds	r2, r3, #1
 800b210:	607a      	str	r2, [r7, #4]
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	74fb      	strb	r3, [r7, #19]
	modulator_buffer[4] = *value;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	753b      	strb	r3, [r7, #20]


	modulator_buffer[5] = (uint8_t)(addr & 0xFF);
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	b2db      	uxtb	r3, r3
 800b220:	757b      	strb	r3, [r7, #21]
	modulator_buffer[6] = (uint8_t)((addr >> 8) & 0xFF);
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	0a1b      	lsrs	r3, r3, #8
 800b226:	b2db      	uxtb	r3, r3
 800b228:	75bb      	strb	r3, [r7, #22]
	modulator_buffer[7] = (uint8_t)((addr >> 16) & 0xFF);
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	0c1b      	lsrs	r3, r3, #16
 800b22e:	b2db      	uxtb	r3, r3
 800b230:	75fb      	strb	r3, [r7, #23]
	modulator_buffer[8] = cmd;
 800b232:	7bfb      	ldrb	r3, [r7, #15]
 800b234:	763b      	strb	r3, [r7, #24]

	nres = bridge_i2c_write(I2C_DEVADDR_WRITE, &modulator_buffer[0], 9);
 800b236:	f107 0310 	add.w	r3, r7, #16
 800b23a:	2209      	movs	r2, #9
 800b23c:	4619      	mov	r1, r3
 800b23e:	2020      	movs	r0, #32
 800b240:	f7ff ff01 	bl	800b046 <bridge_i2c_write>
 800b244:	61f8      	str	r0, [r7, #28]
	return nres;
 800b246:	69fb      	ldr	r3, [r7, #28]
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3720      	adds	r7, #32
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <internal_i2c_code_read>:

vatek_result internal_i2c_code_read(uint8_t cmd, uint32_t addr, uint8_t* value)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b08a      	sub	sp, #40	; 0x28
 800b254:	af00      	add	r7, sp, #0
 800b256:	4603      	mov	r3, r0
 800b258:	60b9      	str	r1, [r7, #8]
 800b25a:	607a      	str	r2, [r7, #4]
 800b25c:	73fb      	strb	r3, [r7, #15]
	vatek_result nres = vatek_hwfail;
 800b25e:	f06f 0305 	mvn.w	r3, #5
 800b262:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t modulator_buffer[TURNKEY_MODULATOR_BUFFER_LEN];

	modulator_buffer[0] = 0x04;
 800b264:	2304      	movs	r3, #4
 800b266:	763b      	strb	r3, [r7, #24]
	modulator_buffer[1] = (uint8_t)(addr & 0xFF);
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	b2db      	uxtb	r3, r3
 800b26c:	767b      	strb	r3, [r7, #25]
	modulator_buffer[2] = (uint8_t)((addr >> 8) & 0xFF);
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	0a1b      	lsrs	r3, r3, #8
 800b272:	b2db      	uxtb	r3, r3
 800b274:	76bb      	strb	r3, [r7, #26]
	modulator_buffer[3] = (uint8_t)((addr >> 16) & 0xFF);
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	0c1b      	lsrs	r3, r3, #16
 800b27a:	b2db      	uxtb	r3, r3
 800b27c:	76fb      	strb	r3, [r7, #27]
	modulator_buffer[4] = cmd;
 800b27e:	7bfb      	ldrb	r3, [r7, #15]
 800b280:	773b      	strb	r3, [r7, #28]

	nres = bridge_i2c_write(I2C_DEVADDR_WRITE, &modulator_buffer[0], 5);
 800b282:	f107 0318 	add.w	r3, r7, #24
 800b286:	2205      	movs	r2, #5
 800b288:	4619      	mov	r1, r3
 800b28a:	2020      	movs	r0, #32
 800b28c:	f7ff fedb 	bl	800b046 <bridge_i2c_write>
 800b290:	6278      	str	r0, [r7, #36]	; 0x24
	if (is_vatek_success(nres))
 800b292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b294:	2b00      	cmp	r3, #0
 800b296:	db26      	blt.n	800b2e6 <internal_i2c_code_read+0x96>
	{
		modulator_buffer[0] = 0;
 800b298:	2300      	movs	r3, #0
 800b29a:	763b      	strb	r3, [r7, #24]
		nres = bridge_i2c_write(I2C_DEVADDR_WRITE, &modulator_buffer[0], 1);
 800b29c:	f107 0318 	add.w	r3, r7, #24
 800b2a0:	2201      	movs	r2, #1
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	2020      	movs	r0, #32
 800b2a6:	f7ff fece 	bl	800b046 <bridge_i2c_write>
 800b2aa:	6278      	str	r0, [r7, #36]	; 0x24
		if (is_vatek_success(nres))
 800b2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	db19      	blt.n	800b2e6 <internal_i2c_code_read+0x96>
		{
			uint8_t bufval[4];
			nres = bridge_i2c_read(I2C_DEVADDR_READ, &bufval[0], 4);
 800b2b2:	f107 0314 	add.w	r3, r7, #20
 800b2b6:	2204      	movs	r2, #4
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	2021      	movs	r0, #33	; 0x21
 800b2bc:	f7ff fe9c 	bl	800aff8 <bridge_i2c_read>
 800b2c0:	6278      	str	r0, [r7, #36]	; 0x24

			if (is_vatek_success(nres))
 800b2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	db0e      	blt.n	800b2e6 <internal_i2c_code_read+0x96>
			{
				value[0] = bufval[3];
 800b2c8:	7dfa      	ldrb	r2, [r7, #23]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	701a      	strb	r2, [r3, #0]
				value[1] = bufval[2];
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	3301      	adds	r3, #1
 800b2d2:	7dba      	ldrb	r2, [r7, #22]
 800b2d4:	701a      	strb	r2, [r3, #0]
				value[2] = bufval[1];
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	3302      	adds	r3, #2
 800b2da:	7d7a      	ldrb	r2, [r7, #21]
 800b2dc:	701a      	strb	r2, [r3, #0]
				value[3] = bufval[0];
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	3303      	adds	r3, #3
 800b2e2:	7d3a      	ldrb	r2, [r7, #20]
 800b2e4:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	return nres;
 800b2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3728      	adds	r7, #40	; 0x28
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}

0800b2f0 <internal_i2c_code_write>:

vatek_result internal_i2c_code_write(uint8_t cmd, uint32_t addr, uint8_t* value)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b088      	sub	sp, #32
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	60b9      	str	r1, [r7, #8]
 800b2fa:	607a      	str	r2, [r7, #4]
 800b2fc:	73fb      	strb	r3, [r7, #15]
	vatek_result nres = vatek_success;
 800b2fe:	2300      	movs	r3, #0
 800b300:	61fb      	str	r3, [r7, #28]
	uint8_t modulator_buffer[TURNKEY_MODULATOR_BUFFER_LEN];

	modulator_buffer[0] = 0x00;
 800b302:	2300      	movs	r3, #0
 800b304:	743b      	strb	r3, [r7, #16]
	modulator_buffer[4] = *value++;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	1c5a      	adds	r2, r3, #1
 800b30a:	607a      	str	r2, [r7, #4]
 800b30c:	781b      	ldrb	r3, [r3, #0]
 800b30e:	753b      	strb	r3, [r7, #20]
	modulator_buffer[3] = *value++;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	1c5a      	adds	r2, r3, #1
 800b314:	607a      	str	r2, [r7, #4]
 800b316:	781b      	ldrb	r3, [r3, #0]
 800b318:	74fb      	strb	r3, [r7, #19]
	modulator_buffer[2] = *value++;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	1c5a      	adds	r2, r3, #1
 800b31e:	607a      	str	r2, [r7, #4]
 800b320:	781b      	ldrb	r3, [r3, #0]
 800b322:	74bb      	strb	r3, [r7, #18]
	modulator_buffer[1] = *value;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	781b      	ldrb	r3, [r3, #0]
 800b328:	747b      	strb	r3, [r7, #17]


	modulator_buffer[5] = (uint8_t)(addr & 0xFF);
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	b2db      	uxtb	r3, r3
 800b32e:	757b      	strb	r3, [r7, #21]
	modulator_buffer[6] = (uint8_t)((addr >> 8) & 0xFF);
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	0a1b      	lsrs	r3, r3, #8
 800b334:	b2db      	uxtb	r3, r3
 800b336:	75bb      	strb	r3, [r7, #22]
	modulator_buffer[7] = (uint8_t)((addr >> 16) & 0xFF);
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	0c1b      	lsrs	r3, r3, #16
 800b33c:	b2db      	uxtb	r3, r3
 800b33e:	75fb      	strb	r3, [r7, #23]
	modulator_buffer[8] = cmd;
 800b340:	7bfb      	ldrb	r3, [r7, #15]
 800b342:	763b      	strb	r3, [r7, #24]

	nres = bridge_i2c_write(I2C_DEVADDR_WRITE, &modulator_buffer[0], 9);
 800b344:	f107 0310 	add.w	r3, r7, #16
 800b348:	2209      	movs	r2, #9
 800b34a:	4619      	mov	r1, r3
 800b34c:	2020      	movs	r0, #32
 800b34e:	f7ff fe7a 	bl	800b046 <bridge_i2c_write>
 800b352:	61f8      	str	r0, [r7, #28]
	return nres;
 800b354:	69fb      	ldr	r3, [r7, #28]
}
 800b356:	4618      	mov	r0, r3
 800b358:	3720      	adds	r7, #32
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}

0800b35e <ep9xxx_get_video_timing>:
#include <driver/av/tools/ep9xxx_tool.h>

void ep9xxx_get_video_timing(uint8_t* vtimebuf,Phdmi_video_timing ptiming)
{
 800b35e:	b480      	push	{r7}
 800b360:	b083      	sub	sp, #12
 800b362:	af00      	add	r7, sp, #0
 800b364:	6078      	str	r0, [r7, #4]
 800b366:	6039      	str	r1, [r7, #0]
    #define TIME_VFP(a)             (a[10])							//V sync offset
    #define TIME_VBP(a)             (a[11])							//V Back Porch
    #define TIME_VPW(a)             (a[12] & 0x7F)					//V sync pulse width		
    #define TIME_INT(a)             (a[12] >> 7)
    
    ptiming->pixel_per_line = TIME_APPL(vtimebuf);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	3301      	adds	r3, #1
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	021b      	lsls	r3, r3, #8
 800b370:	b21b      	sxth	r3, r3
 800b372:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b376:	b21a      	sxth	r2, r3
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	b21b      	sxth	r3, r3
 800b37e:	4313      	orrs	r3, r2
 800b380:	b21b      	sxth	r3, r3
 800b382:	b29a      	uxth	r2, r3
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	801a      	strh	r2, [r3, #0]
    ptiming->pixel_per_frame = TIME_ALPF(vtimebuf);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	3309      	adds	r3, #9
 800b38c:	781b      	ldrb	r3, [r3, #0]
 800b38e:	021b      	lsls	r3, r3, #8
 800b390:	b21b      	sxth	r3, r3
 800b392:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b396:	b21a      	sxth	r2, r3
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	3308      	adds	r3, #8
 800b39c:	781b      	ldrb	r3, [r3, #0]
 800b39e:	b21b      	sxth	r3, r3
 800b3a0:	4313      	orrs	r3, r2
 800b3a2:	b21b      	sxth	r3, r3
 800b3a4:	b29a      	uxth	r2, r3
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	805a      	strh	r2, [r3, #2]
    ptiming->hfp = TIME_HFP(vtimebuf);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	3303      	adds	r3, #3
 800b3ae:	781b      	ldrb	r3, [r3, #0]
 800b3b0:	021b      	lsls	r3, r3, #8
 800b3b2:	b21b      	sxth	r3, r3
 800b3b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b3b8:	b21a      	sxth	r2, r3
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	3302      	adds	r3, #2
 800b3be:	781b      	ldrb	r3, [r3, #0]
 800b3c0:	b21b      	sxth	r3, r3
 800b3c2:	4313      	orrs	r3, r2
 800b3c4:	b21b      	sxth	r3, r3
 800b3c6:	b29a      	uxth	r2, r3
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	809a      	strh	r2, [r3, #4]
    ptiming->hbp = TIME_HFP(vtimebuf);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	3303      	adds	r3, #3
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	021b      	lsls	r3, r3, #8
 800b3d4:	b21b      	sxth	r3, r3
 800b3d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b3da:	b21a      	sxth	r2, r3
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	3302      	adds	r3, #2
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	b21b      	sxth	r3, r3
 800b3e4:	4313      	orrs	r3, r2
 800b3e6:	b21b      	sxth	r3, r3
 800b3e8:	b29a      	uxth	r2, r3
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	80da      	strh	r2, [r3, #6]
    ptiming->hpw = TIME_HPW(vtimebuf);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	3307      	adds	r3, #7
 800b3f2:	781b      	ldrb	r3, [r3, #0]
 800b3f4:	021b      	lsls	r3, r3, #8
 800b3f6:	b21b      	sxth	r3, r3
 800b3f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b3fc:	b21a      	sxth	r2, r3
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	3306      	adds	r3, #6
 800b402:	781b      	ldrb	r3, [r3, #0]
 800b404:	b21b      	sxth	r3, r3
 800b406:	4313      	orrs	r3, r2
 800b408:	b21b      	sxth	r3, r3
 800b40a:	b29a      	uxth	r2, r3
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	811a      	strh	r2, [r3, #8]
    ptiming->vfp = TIME_VFP(vtimebuf);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	7a9a      	ldrb	r2, [r3, #10]
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	729a      	strb	r2, [r3, #10]
    ptiming->vbp = TIME_VBP(vtimebuf);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	7ada      	ldrb	r2, [r3, #11]
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	72da      	strb	r2, [r3, #11]
    ptiming->vpw = TIME_VPW(vtimebuf);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	330c      	adds	r3, #12
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b42a:	b2da      	uxtb	r2, r3
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	731a      	strb	r2, [r3, #12]
    ptiming->_int = TIME_INT(vtimebuf);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	330c      	adds	r3, #12
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	09db      	lsrs	r3, r3, #7
 800b438:	b2da      	uxtb	r2, r3
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	735a      	strb	r2, [r3, #13]
    
}
 800b43e:	bf00      	nop
 800b440:	370c      	adds	r7, #12
 800b442:	46bd      	mov	sp, r7
 800b444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b448:	4770      	bx	lr
	...

0800b44c <ep9xxx_get_video_from_timing>:
#define HFP_1080_60_30      (88 + HFP_CHECK_RANGE)  /* 1080P60 same as 1080P30 */
#define HFP_1080_50_25      (528 + HFP_CHECK_RANGE) /* 1080P50 same as 1080P25 */
#define HFP_1080P_24        (638 + HFP_CHECK_RANGE) 

vatek_result ep9xxx_get_video_from_timing(uint8_t* pvbuf,uint8_t vcode,Phdmi_video_id* pvideo)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b08c      	sub	sp, #48	; 0x30
 800b450:	af02      	add	r7, sp, #8
 800b452:	60f8      	str	r0, [r7, #12]
 800b454:	460b      	mov	r3, r1
 800b456:	607a      	str	r2, [r7, #4]
 800b458:	72fb      	strb	r3, [r7, #11]
    hdmi_video_timing vtime;
    int32_t vid = -1;
 800b45a:	f04f 33ff 	mov.w	r3, #4294967295
 800b45e:	627b      	str	r3, [r7, #36]	; 0x24
    vatek_result nres = vatek_badstatus;
 800b460:	f06f 0304 	mvn.w	r3, #4
 800b464:	623b      	str	r3, [r7, #32]
    ep9xxx_get_video_timing(pvbuf,&vtime); 
 800b466:	f107 0310 	add.w	r3, r7, #16
 800b46a:	4619      	mov	r1, r3
 800b46c:	68f8      	ldr	r0, [r7, #12]
 800b46e:	f7ff ff76 	bl	800b35e <ep9xxx_get_video_timing>
    
    hdmi_tool_timing_printf(&vtime);
 800b472:	f107 0310 	add.w	r3, r7, #16
 800b476:	4618      	mov	r0, r3
 800b478:	f000 fc2e 	bl	800bcd8 <hdmi_tool_timing_printf>
    
    if(vtime.pixel_per_line == 720)
 800b47c:	8a3b      	ldrh	r3, [r7, #16]
 800b47e:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 800b482:	d13e      	bne.n	800b502 <ep9xxx_get_video_from_timing+0xb6>
    {
        if(!vtime._int)
 800b484:	7f7b      	ldrb	r3, [r7, #29]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d134      	bne.n	800b4f4 <ep9xxx_get_video_from_timing+0xa8>
        {
            if(vtime.pixel_per_frame == 480)
 800b48a:	8a7b      	ldrh	r3, [r7, #18]
 800b48c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800b490:	d112      	bne.n	800b4b8 <ep9xxx_get_video_from_timing+0x6c>
            {
                if(vcode == VID_480P_59_4_3)vid = VID_480P_59_4_3;
 800b492:	7afb      	ldrb	r3, [r7, #11]
 800b494:	2b02      	cmp	r3, #2
 800b496:	d102      	bne.n	800b49e <ep9xxx_get_video_from_timing+0x52>
 800b498:	2302      	movs	r3, #2
 800b49a:	627b      	str	r3, [r7, #36]	; 0x24
 800b49c:	e0ed      	b.n	800b67a <ep9xxx_get_video_from_timing+0x22e>
                else if(vcode == VID_480P_59_16_9)vid = VID_480P_59_16_9;
 800b49e:	7afb      	ldrb	r3, [r7, #11]
 800b4a0:	2b03      	cmp	r3, #3
 800b4a2:	d102      	bne.n	800b4aa <ep9xxx_get_video_from_timing+0x5e>
 800b4a4:	2303      	movs	r3, #3
 800b4a6:	627b      	str	r3, [r7, #36]	; 0x24
 800b4a8:	e0e7      	b.n	800b67a <ep9xxx_get_video_from_timing+0x22e>
                else  _HAL_LOG(eptool,"480p unmatch vcodec : %d",vcode);
 800b4aa:	7afb      	ldrb	r3, [r7, #11]
 800b4ac:	4a88      	ldr	r2, [pc, #544]	; (800b6d0 <ep9xxx_get_video_from_timing+0x284>)
 800b4ae:	4989      	ldr	r1, [pc, #548]	; (800b6d4 <ep9xxx_get_video_from_timing+0x288>)
 800b4b0:	2000      	movs	r0, #0
 800b4b2:	f000 f977 	bl	800b7a4 <vatek_debug_print>
 800b4b6:	e0e0      	b.n	800b67a <ep9xxx_get_video_from_timing+0x22e>
            }
            else if(vtime.pixel_per_frame == 576)
 800b4b8:	8a7b      	ldrh	r3, [r7, #18]
 800b4ba:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800b4be:	d112      	bne.n	800b4e6 <ep9xxx_get_video_from_timing+0x9a>
            {
                if(vcode == VID_576P_50_4_3)vid = VID_576P_50_4_3;
 800b4c0:	7afb      	ldrb	r3, [r7, #11]
 800b4c2:	2b11      	cmp	r3, #17
 800b4c4:	d102      	bne.n	800b4cc <ep9xxx_get_video_from_timing+0x80>
 800b4c6:	2311      	movs	r3, #17
 800b4c8:	627b      	str	r3, [r7, #36]	; 0x24
 800b4ca:	e0d6      	b.n	800b67a <ep9xxx_get_video_from_timing+0x22e>
                else if(vcode == VID_576P_50_16_9)vid = VID_576P_50_16_9;
 800b4cc:	7afb      	ldrb	r3, [r7, #11]
 800b4ce:	2b12      	cmp	r3, #18
 800b4d0:	d102      	bne.n	800b4d8 <ep9xxx_get_video_from_timing+0x8c>
 800b4d2:	2312      	movs	r3, #18
 800b4d4:	627b      	str	r3, [r7, #36]	; 0x24
 800b4d6:	e0d0      	b.n	800b67a <ep9xxx_get_video_from_timing+0x22e>
                else  _HAL_LOG(eptool,"576p unmatch vcodec : %d",vcode);
 800b4d8:	7afb      	ldrb	r3, [r7, #11]
 800b4da:	4a7d      	ldr	r2, [pc, #500]	; (800b6d0 <ep9xxx_get_video_from_timing+0x284>)
 800b4dc:	497e      	ldr	r1, [pc, #504]	; (800b6d8 <ep9xxx_get_video_from_timing+0x28c>)
 800b4de:	2000      	movs	r0, #0
 800b4e0:	f000 f960 	bl	800b7a4 <vatek_debug_print>
 800b4e4:	e0c9      	b.n	800b67a <ep9xxx_get_video_from_timing+0x22e>
            }
            else _HAL_LOG(eptool,"bad frame height : %d",vtime.pixel_per_frame);
 800b4e6:	8a7b      	ldrh	r3, [r7, #18]
 800b4e8:	4a79      	ldr	r2, [pc, #484]	; (800b6d0 <ep9xxx_get_video_from_timing+0x284>)
 800b4ea:	497c      	ldr	r1, [pc, #496]	; (800b6dc <ep9xxx_get_video_from_timing+0x290>)
 800b4ec:	2000      	movs	r0, #0
 800b4ee:	f000 f959 	bl	800b7a4 <vatek_debug_print>
 800b4f2:	e0c2      	b.n	800b67a <ep9xxx_get_video_from_timing+0x22e>
        }else _HAL_LOG(eptool,"unsupport i with %d",vtime.pixel_per_line);
 800b4f4:	8a3b      	ldrh	r3, [r7, #16]
 800b4f6:	4a76      	ldr	r2, [pc, #472]	; (800b6d0 <ep9xxx_get_video_from_timing+0x284>)
 800b4f8:	4979      	ldr	r1, [pc, #484]	; (800b6e0 <ep9xxx_get_video_from_timing+0x294>)
 800b4fa:	2000      	movs	r0, #0
 800b4fc:	f000 f952 	bl	800b7a4 <vatek_debug_print>
 800b500:	e0bb      	b.n	800b67a <ep9xxx_get_video_from_timing+0x22e>
    }else if(vtime.pixel_per_line == 1440)
 800b502:	8a3b      	ldrh	r3, [r7, #16]
 800b504:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 800b508:	d13d      	bne.n	800b586 <ep9xxx_get_video_from_timing+0x13a>
    {
        if(vtime._int)
 800b50a:	7f7b      	ldrb	r3, [r7, #29]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d033      	beq.n	800b578 <ep9xxx_get_video_from_timing+0x12c>
        {
            if(vtime.pixel_per_frame == 240)
 800b510:	8a7b      	ldrh	r3, [r7, #18]
 800b512:	2bf0      	cmp	r3, #240	; 0xf0
 800b514:	d112      	bne.n	800b53c <ep9xxx_get_video_from_timing+0xf0>
            {
                if(vcode == VID_480I_59_4_3)vid = VID_480I_59_4_3;
 800b516:	7afb      	ldrb	r3, [r7, #11]
 800b518:	2b06      	cmp	r3, #6
 800b51a:	d102      	bne.n	800b522 <ep9xxx_get_video_from_timing+0xd6>
 800b51c:	2306      	movs	r3, #6
 800b51e:	627b      	str	r3, [r7, #36]	; 0x24
 800b520:	e0ab      	b.n	800b67a <ep9xxx_get_video_from_timing+0x22e>
                else if(vcode == VID_480I_59_16_9)vid = VID_480I_59_16_9;
 800b522:	7afb      	ldrb	r3, [r7, #11]
 800b524:	2b07      	cmp	r3, #7
 800b526:	d102      	bne.n	800b52e <ep9xxx_get_video_from_timing+0xe2>
 800b528:	2307      	movs	r3, #7
 800b52a:	627b      	str	r3, [r7, #36]	; 0x24
 800b52c:	e0a5      	b.n	800b67a <ep9xxx_get_video_from_timing+0x22e>
                else _HAL_LOG(eptool,"480i unmatch vcodec : %d",vcode);
 800b52e:	7afb      	ldrb	r3, [r7, #11]
 800b530:	4a67      	ldr	r2, [pc, #412]	; (800b6d0 <ep9xxx_get_video_from_timing+0x284>)
 800b532:	496c      	ldr	r1, [pc, #432]	; (800b6e4 <ep9xxx_get_video_from_timing+0x298>)
 800b534:	2000      	movs	r0, #0
 800b536:	f000 f935 	bl	800b7a4 <vatek_debug_print>
 800b53a:	e09e      	b.n	800b67a <ep9xxx_get_video_from_timing+0x22e>
            }
            else if(vtime.pixel_per_frame == 288)
 800b53c:	8a7b      	ldrh	r3, [r7, #18]
 800b53e:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 800b542:	d112      	bne.n	800b56a <ep9xxx_get_video_from_timing+0x11e>
            {
                if(vcode == VID_576I_50_4_3)vid = VID_576I_50_4_3;
 800b544:	7afb      	ldrb	r3, [r7, #11]
 800b546:	2b15      	cmp	r3, #21
 800b548:	d102      	bne.n	800b550 <ep9xxx_get_video_from_timing+0x104>
 800b54a:	2315      	movs	r3, #21
 800b54c:	627b      	str	r3, [r7, #36]	; 0x24
 800b54e:	e094      	b.n	800b67a <ep9xxx_get_video_from_timing+0x22e>
                else if(vcode == VID_576I_50_16_9) vid = VID_576I_50_16_9;
 800b550:	7afb      	ldrb	r3, [r7, #11]
 800b552:	2b16      	cmp	r3, #22
 800b554:	d102      	bne.n	800b55c <ep9xxx_get_video_from_timing+0x110>
 800b556:	2316      	movs	r3, #22
 800b558:	627b      	str	r3, [r7, #36]	; 0x24
 800b55a:	e08e      	b.n	800b67a <ep9xxx_get_video_from_timing+0x22e>
                else _HAL_LOG(eptool,"576i unmatch vcodec : %d",vcode);
 800b55c:	7afb      	ldrb	r3, [r7, #11]
 800b55e:	4a5c      	ldr	r2, [pc, #368]	; (800b6d0 <ep9xxx_get_video_from_timing+0x284>)
 800b560:	4961      	ldr	r1, [pc, #388]	; (800b6e8 <ep9xxx_get_video_from_timing+0x29c>)
 800b562:	2000      	movs	r0, #0
 800b564:	f000 f91e 	bl	800b7a4 <vatek_debug_print>
 800b568:	e087      	b.n	800b67a <ep9xxx_get_video_from_timing+0x22e>
            }
            else _HAL_LOG(eptool,"bad frame height : %d",vtime.pixel_per_frame);
 800b56a:	8a7b      	ldrh	r3, [r7, #18]
 800b56c:	4a58      	ldr	r2, [pc, #352]	; (800b6d0 <ep9xxx_get_video_from_timing+0x284>)
 800b56e:	495b      	ldr	r1, [pc, #364]	; (800b6dc <ep9xxx_get_video_from_timing+0x290>)
 800b570:	2000      	movs	r0, #0
 800b572:	f000 f917 	bl	800b7a4 <vatek_debug_print>
 800b576:	e080      	b.n	800b67a <ep9xxx_get_video_from_timing+0x22e>
        }else  _HAL_LOG(eptool,"1440 unsupport none i with %d",vtime.pixel_per_line);
 800b578:	8a3b      	ldrh	r3, [r7, #16]
 800b57a:	4a55      	ldr	r2, [pc, #340]	; (800b6d0 <ep9xxx_get_video_from_timing+0x284>)
 800b57c:	495b      	ldr	r1, [pc, #364]	; (800b6ec <ep9xxx_get_video_from_timing+0x2a0>)
 800b57e:	2000      	movs	r0, #0
 800b580:	f000 f910 	bl	800b7a4 <vatek_debug_print>
 800b584:	e079      	b.n	800b67a <ep9xxx_get_video_from_timing+0x22e>
    }
    else if(vtime.pixel_per_line == 1280)
 800b586:	8a3b      	ldrh	r3, [r7, #16]
 800b588:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800b58c:	d112      	bne.n	800b5b4 <ep9xxx_get_video_from_timing+0x168>
    {
        if(!vtime._int)
 800b58e:	7f7b      	ldrb	r3, [r7, #29]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d108      	bne.n	800b5a6 <ep9xxx_get_video_from_timing+0x15a>
        {
            if(vtime.hfp <= HFP_720P_60)vid = VID_720P_60;
 800b594:	8abb      	ldrh	r3, [r7, #20]
 800b596:	2b78      	cmp	r3, #120	; 0x78
 800b598:	d802      	bhi.n	800b5a0 <ep9xxx_get_video_from_timing+0x154>
 800b59a:	2304      	movs	r3, #4
 800b59c:	627b      	str	r3, [r7, #36]	; 0x24
 800b59e:	e06c      	b.n	800b67a <ep9xxx_get_video_from_timing+0x22e>
            else vid = VID_720P_50;
 800b5a0:	2313      	movs	r3, #19
 800b5a2:	627b      	str	r3, [r7, #36]	; 0x24
 800b5a4:	e069      	b.n	800b67a <ep9xxx_get_video_from_timing+0x22e>
        }else _HAL_LOG(eptool,"1280 unsupport i with %d",vtime.pixel_per_line);
 800b5a6:	8a3b      	ldrh	r3, [r7, #16]
 800b5a8:	4a49      	ldr	r2, [pc, #292]	; (800b6d0 <ep9xxx_get_video_from_timing+0x284>)
 800b5aa:	4951      	ldr	r1, [pc, #324]	; (800b6f0 <ep9xxx_get_video_from_timing+0x2a4>)
 800b5ac:	2000      	movs	r0, #0
 800b5ae:	f000 f8f9 	bl	800b7a4 <vatek_debug_print>
 800b5b2:	e062      	b.n	800b67a <ep9xxx_get_video_from_timing+0x22e>
    }else if(vtime.pixel_per_line == 1920)
 800b5b4:	8a3b      	ldrh	r3, [r7, #16]
 800b5b6:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 800b5ba:	d158      	bne.n	800b66e <ep9xxx_get_video_from_timing+0x222>
    {
        if(vtime._int)
 800b5bc:	7f7b      	ldrb	r3, [r7, #29]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d014      	beq.n	800b5ec <ep9xxx_get_video_from_timing+0x1a0>
        {
            if(vtime.hbp < HFP_1080_60_30)vid = VID_1080I_60;
 800b5c2:	8afb      	ldrh	r3, [r7, #22]
 800b5c4:	2b61      	cmp	r3, #97	; 0x61
 800b5c6:	d802      	bhi.n	800b5ce <ep9xxx_get_video_from_timing+0x182>
 800b5c8:	2305      	movs	r3, #5
 800b5ca:	627b      	str	r3, [r7, #36]	; 0x24
 800b5cc:	e055      	b.n	800b67a <ep9xxx_get_video_from_timing+0x22e>
            else if(vtime.hbp < HFP_1080_50_25)vid = VID_1080I_50;
 800b5ce:	8afb      	ldrh	r3, [r7, #22]
 800b5d0:	f240 2219 	movw	r2, #537	; 0x219
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d802      	bhi.n	800b5de <ep9xxx_get_video_from_timing+0x192>
 800b5d8:	2314      	movs	r3, #20
 800b5da:	627b      	str	r3, [r7, #36]	; 0x24
 800b5dc:	e04d      	b.n	800b67a <ep9xxx_get_video_from_timing+0x22e>
            else _HAL_LOG(eptool,"1080i unsupport hfp : %d",vtime.hfp);
 800b5de:	8abb      	ldrh	r3, [r7, #20]
 800b5e0:	4a3b      	ldr	r2, [pc, #236]	; (800b6d0 <ep9xxx_get_video_from_timing+0x284>)
 800b5e2:	4944      	ldr	r1, [pc, #272]	; (800b6f4 <ep9xxx_get_video_from_timing+0x2a8>)
 800b5e4:	2000      	movs	r0, #0
 800b5e6:	f000 f8dd 	bl	800b7a4 <vatek_debug_print>
 800b5ea:	e046      	b.n	800b67a <ep9xxx_get_video_from_timing+0x22e>
            
        }else
        {
            if(vtime.hfp <= HFP_1080_60_30)
 800b5ec:	8abb      	ldrh	r3, [r7, #20]
 800b5ee:	2b62      	cmp	r3, #98	; 0x62
 800b5f0:	d818      	bhi.n	800b624 <ep9xxx_get_video_from_timing+0x1d8>
            {
				if(vcode == 0xFF)
 800b5f2:	7afb      	ldrb	r3, [r7, #11]
 800b5f4:	2bff      	cmp	r3, #255	; 0xff
 800b5f6:	d102      	bne.n	800b5fe <ep9xxx_get_video_from_timing+0x1b2>
				{
					vid = VID_1080P_60;
 800b5f8:	2310      	movs	r3, #16
 800b5fa:	627b      	str	r3, [r7, #36]	; 0x24
 800b5fc:	e03d      	b.n	800b67a <ep9xxx_get_video_from_timing+0x22e>
				}else
				{
					if(vcode == VID_1080P_60)vid = VID_1080P_60;
 800b5fe:	7afb      	ldrb	r3, [r7, #11]
 800b600:	2b10      	cmp	r3, #16
 800b602:	d102      	bne.n	800b60a <ep9xxx_get_video_from_timing+0x1be>
 800b604:	2310      	movs	r3, #16
 800b606:	627b      	str	r3, [r7, #36]	; 0x24
 800b608:	e037      	b.n	800b67a <ep9xxx_get_video_from_timing+0x22e>
					else if(vcode == VID_1080P_30)vid = VID_1080P_30;
 800b60a:	7afb      	ldrb	r3, [r7, #11]
 800b60c:	2b22      	cmp	r3, #34	; 0x22
 800b60e:	d102      	bne.n	800b616 <ep9xxx_get_video_from_timing+0x1ca>
 800b610:	2322      	movs	r3, #34	; 0x22
 800b612:	627b      	str	r3, [r7, #36]	; 0x24
 800b614:	e031      	b.n	800b67a <ep9xxx_get_video_from_timing+0x22e>
					else _HAL_LOG(eptool,"1080p 60 nmatch vcodec : %d",vcode);					
 800b616:	7afb      	ldrb	r3, [r7, #11]
 800b618:	4a2d      	ldr	r2, [pc, #180]	; (800b6d0 <ep9xxx_get_video_from_timing+0x284>)
 800b61a:	4937      	ldr	r1, [pc, #220]	; (800b6f8 <ep9xxx_get_video_from_timing+0x2ac>)
 800b61c:	2000      	movs	r0, #0
 800b61e:	f000 f8c1 	bl	800b7a4 <vatek_debug_print>
 800b622:	e02a      	b.n	800b67a <ep9xxx_get_video_from_timing+0x22e>
				}
            }
            else if(vtime.hfp <= HFP_1080_50_25)
 800b624:	8abb      	ldrh	r3, [r7, #20]
 800b626:	f240 221a 	movw	r2, #538	; 0x21a
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d818      	bhi.n	800b660 <ep9xxx_get_video_from_timing+0x214>
            {
				if(vcode == 0xFF)
 800b62e:	7afb      	ldrb	r3, [r7, #11]
 800b630:	2bff      	cmp	r3, #255	; 0xff
 800b632:	d102      	bne.n	800b63a <ep9xxx_get_video_from_timing+0x1ee>
				{
					vid = VID_1080P_50;
 800b634:	231f      	movs	r3, #31
 800b636:	627b      	str	r3, [r7, #36]	; 0x24
 800b638:	e01f      	b.n	800b67a <ep9xxx_get_video_from_timing+0x22e>
				}else
				{
					if(vcode == VID_1080P_50)vid = VID_1080P_50;
 800b63a:	7afb      	ldrb	r3, [r7, #11]
 800b63c:	2b1f      	cmp	r3, #31
 800b63e:	d102      	bne.n	800b646 <ep9xxx_get_video_from_timing+0x1fa>
 800b640:	231f      	movs	r3, #31
 800b642:	627b      	str	r3, [r7, #36]	; 0x24
 800b644:	e019      	b.n	800b67a <ep9xxx_get_video_from_timing+0x22e>
					else if(vcode == VID_1080P_25)vid = VID_1080P_25;
 800b646:	7afb      	ldrb	r3, [r7, #11]
 800b648:	2b21      	cmp	r3, #33	; 0x21
 800b64a:	d102      	bne.n	800b652 <ep9xxx_get_video_from_timing+0x206>
 800b64c:	2321      	movs	r3, #33	; 0x21
 800b64e:	627b      	str	r3, [r7, #36]	; 0x24
 800b650:	e013      	b.n	800b67a <ep9xxx_get_video_from_timing+0x22e>
					else _HAL_LOG(eptool,"1080p50 unmatch vcodec : %d",vcode);	
 800b652:	7afb      	ldrb	r3, [r7, #11]
 800b654:	4a1e      	ldr	r2, [pc, #120]	; (800b6d0 <ep9xxx_get_video_from_timing+0x284>)
 800b656:	4929      	ldr	r1, [pc, #164]	; (800b6fc <ep9xxx_get_video_from_timing+0x2b0>)
 800b658:	2000      	movs	r0, #0
 800b65a:	f000 f8a3 	bl	800b7a4 <vatek_debug_print>
 800b65e:	e00c      	b.n	800b67a <ep9xxx_get_video_from_timing+0x22e>
				}
            }
            else if(vtime.hfp <= HFP_1080P_24)vid = VID_1080P_24;
 800b660:	8abb      	ldrh	r3, [r7, #20]
 800b662:	f5b3 7f22 	cmp.w	r3, #648	; 0x288
 800b666:	d808      	bhi.n	800b67a <ep9xxx_get_video_from_timing+0x22e>
 800b668:	2320      	movs	r3, #32
 800b66a:	627b      	str	r3, [r7, #36]	; 0x24
 800b66c:	e005      	b.n	800b67a <ep9xxx_get_video_from_timing+0x22e>
        }
    }else _HAL_LOG(eptool,"1920 unknown frame width : %d",vtime.pixel_per_line);
 800b66e:	8a3b      	ldrh	r3, [r7, #16]
 800b670:	4a17      	ldr	r2, [pc, #92]	; (800b6d0 <ep9xxx_get_video_from_timing+0x284>)
 800b672:	4923      	ldr	r1, [pc, #140]	; (800b700 <ep9xxx_get_video_from_timing+0x2b4>)
 800b674:	2000      	movs	r0, #0
 800b676:	f000 f895 	bl	800b7a4 <vatek_debug_print>
    
    if(vid == vcode || vcode == 0xFF)
 800b67a:	7afb      	ldrb	r3, [r7, #11]
 800b67c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b67e:	429a      	cmp	r2, r3
 800b680:	d002      	beq.n	800b688 <ep9xxx_get_video_from_timing+0x23c>
 800b682:	7afb      	ldrb	r3, [r7, #11]
 800b684:	2bff      	cmp	r3, #255	; 0xff
 800b686:	d115      	bne.n	800b6b4 <ep9xxx_get_video_from_timing+0x268>
    {
        *pvideo = hdmi_tool_get_video_id(vid & 0xFF);
 800b688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b68a:	b2db      	uxtb	r3, r3
 800b68c:	4618      	mov	r0, r3
 800b68e:	f000 f979 	bl	800b984 <hdmi_tool_get_video_id>
 800b692:	4602      	mov	r2, r0
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	601a      	str	r2, [r3, #0]
        if(*pvideo == NULL)_HAL_LOG(eptool,"unsupport vid : %d",vid);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d106      	bne.n	800b6ae <ep9xxx_get_video_from_timing+0x262>
 800b6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a2:	4a0b      	ldr	r2, [pc, #44]	; (800b6d0 <ep9xxx_get_video_from_timing+0x284>)
 800b6a4:	4917      	ldr	r1, [pc, #92]	; (800b704 <ep9xxx_get_video_from_timing+0x2b8>)
 800b6a6:	2000      	movs	r0, #0
 800b6a8:	f000 f87c 	bl	800b7a4 <vatek_debug_print>
 800b6ac:	e00a      	b.n	800b6c4 <ep9xxx_get_video_from_timing+0x278>
        else nres = vatek_success;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	623b      	str	r3, [r7, #32]
        if(*pvideo == NULL)_HAL_LOG(eptool,"unsupport vid : %d",vid);
 800b6b2:	e007      	b.n	800b6c4 <ep9xxx_get_video_from_timing+0x278>
    }else _HAL_LOG(eptool,"get video format fail : %d - %d",vid,vcode);
 800b6b4:	7afb      	ldrb	r3, [r7, #11]
 800b6b6:	9300      	str	r3, [sp, #0]
 800b6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ba:	4a05      	ldr	r2, [pc, #20]	; (800b6d0 <ep9xxx_get_video_from_timing+0x284>)
 800b6bc:	4912      	ldr	r1, [pc, #72]	; (800b708 <ep9xxx_get_video_from_timing+0x2bc>)
 800b6be:	2000      	movs	r0, #0
 800b6c0:	f000 f870 	bl	800b7a4 <vatek_debug_print>
    
    return nres;
 800b6c4:	6a3b      	ldr	r3, [r7, #32]
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3728      	adds	r7, #40	; 0x28
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}
 800b6ce:	bf00      	nop
 800b6d0:	0800f4b0 	.word	0x0800f4b0
 800b6d4:	0800f4b8 	.word	0x0800f4b8
 800b6d8:	0800f4dc 	.word	0x0800f4dc
 800b6dc:	0800f500 	.word	0x0800f500
 800b6e0:	0800f520 	.word	0x0800f520
 800b6e4:	0800f53c 	.word	0x0800f53c
 800b6e8:	0800f560 	.word	0x0800f560
 800b6ec:	0800f584 	.word	0x0800f584
 800b6f0:	0800f5ac 	.word	0x0800f5ac
 800b6f4:	0800f5d0 	.word	0x0800f5d0
 800b6f8:	0800f5f4 	.word	0x0800f5f4
 800b6fc:	0800f618 	.word	0x0800f618
 800b700:	0800f63c 	.word	0x0800f63c
 800b704:	0800f664 	.word	0x0800f664
 800b708:	0800f680 	.word	0x0800f680

0800b70c <ep9xxx_get_audio_samplerate>:

audio_samplerate ep9xxx_get_audio_samplerate(uint8_t value)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b084      	sub	sp, #16
 800b710:	af00      	add	r7, sp, #0
 800b712:	4603      	mov	r3, r0
 800b714:	71fb      	strb	r3, [r7, #7]
    value &= 0x7;
 800b716:	79fb      	ldrb	r3, [r7, #7]
 800b718:	f003 0307 	and.w	r3, r3, #7
 800b71c:	71fb      	strb	r3, [r7, #7]
    audio_samplerate asamplerate = sample_rate_unknown;
 800b71e:	23ff      	movs	r3, #255	; 0xff
 800b720:	73fb      	strb	r3, [r7, #15]
    if(value == EP9XXX_AUDIO_32KHZ)asamplerate = sample_rate_32;
 800b722:	79fb      	ldrb	r3, [r7, #7]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d102      	bne.n	800b72e <ep9xxx_get_audio_samplerate+0x22>
 800b728:	2300      	movs	r3, #0
 800b72a:	73fb      	strb	r3, [r7, #15]
 800b72c:	e00a      	b.n	800b744 <ep9xxx_get_audio_samplerate+0x38>
    else if(value == EP9XXX_AUDIO_44_1KHZ)asamplerate = sample_rate_44_1;
 800b72e:	79fb      	ldrb	r3, [r7, #7]
 800b730:	2b01      	cmp	r3, #1
 800b732:	d102      	bne.n	800b73a <ep9xxx_get_audio_samplerate+0x2e>
 800b734:	2301      	movs	r3, #1
 800b736:	73fb      	strb	r3, [r7, #15]
 800b738:	e004      	b.n	800b744 <ep9xxx_get_audio_samplerate+0x38>
    else if(value == EP9XXX_AUDIO_48KHZ)asamplerate = sample_rate_48;
 800b73a:	79fb      	ldrb	r3, [r7, #7]
 800b73c:	2b02      	cmp	r3, #2
 800b73e:	d101      	bne.n	800b744 <ep9xxx_get_audio_samplerate+0x38>
 800b740:	2302      	movs	r3, #2
 800b742:	73fb      	strb	r3, [r7, #15]
    
    if(asamplerate == sample_rate_unknown)
 800b744:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b74c:	d105      	bne.n	800b75a <ep9xxx_get_audio_samplerate+0x4e>
        _HAL_LOG(eptool,"unsupport audio sample rate : %d",value);
 800b74e:	79fb      	ldrb	r3, [r7, #7]
 800b750:	4a05      	ldr	r2, [pc, #20]	; (800b768 <ep9xxx_get_audio_samplerate+0x5c>)
 800b752:	4906      	ldr	r1, [pc, #24]	; (800b76c <ep9xxx_get_audio_samplerate+0x60>)
 800b754:	2000      	movs	r0, #0
 800b756:	f000 f825 	bl	800b7a4 <vatek_debug_print>
    return asamplerate;
 800b75a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3710      	adds	r7, #16
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}
 800b766:	bf00      	nop
 800b768:	0800f4b0 	.word	0x0800f4b0
 800b76c:	0800f6a8 	.word	0x0800f6a8

0800b770 <chip_operation_wait>:
#define HAL_I2CCHIP_RDADDR		(HAL_I2CCHIP_WRADDR | 1)

static uint8_t hali2c_cmd[9];
static vatek_debug_level haldbg_level = debug_level_warning;

void chip_operation_wait() { int32_t i = 100; while (i--); }
 800b770:	b480      	push	{r7}
 800b772:	b083      	sub	sp, #12
 800b774:	af00      	add	r7, sp, #0
 800b776:	2364      	movs	r3, #100	; 0x64
 800b778:	607b      	str	r3, [r7, #4]
 800b77a:	bf00      	nop
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	1e5a      	subs	r2, r3, #1
 800b780:	607a      	str	r2, [r7, #4]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d1fa      	bne.n	800b77c <chip_operation_wait+0xc>
 800b786:	bf00      	nop
 800b788:	bf00      	nop
 800b78a:	370c      	adds	r7, #12
 800b78c:	46bd      	mov	sp, r7
 800b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b792:	4770      	bx	lr

0800b794 <vatek_get_tick_ms>:

extern vatek_result chip_write_buffer_word(Pstm32_i2c pi2c, int32_t addr, uint32_t val);
extern vatek_result chip_read_buffer_word(Pstm32_i2c pi2c, int32_t addr, uint32_t* val);

uint32_t vatek_get_tick_ms(void)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	af00      	add	r7, sp, #0
	return hal_system_get_tick();
 800b798:	f001 fcb3 	bl	800d102 <hal_system_get_tick>
 800b79c:	4603      	mov	r3, r0
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	bd80      	pop	{r7, pc}
	...

0800b7a4 <vatek_debug_print>:
{
	haldbg_level = level;
}

_HAL_WEAK(void,vatek_debug_print)(vatek_debug_level level,const char* fmt,...)
{
 800b7a4:	b40e      	push	{r1, r2, r3}
 800b7a6:	b580      	push	{r7, lr}
 800b7a8:	b085      	sub	sp, #20
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	71fb      	strb	r3, [r7, #7]
	if(level >= haldbg_level)
 800b7b0:	4b09      	ldr	r3, [pc, #36]	; (800b7d8 <vatek_debug_print+0x34>)
 800b7b2:	781b      	ldrb	r3, [r3, #0]
 800b7b4:	79fa      	ldrb	r2, [r7, #7]
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d306      	bcc.n	800b7c8 <vatek_debug_print+0x24>
	{
		va_list arg;
		va_start(arg, fmt);
 800b7ba:	f107 0320 	add.w	r3, r7, #32
 800b7be:	60fb      	str	r3, [r7, #12]
		vprintf(fmt, arg);
 800b7c0:	68f9      	ldr	r1, [r7, #12]
 800b7c2:	69f8      	ldr	r0, [r7, #28]
 800b7c4:	f002 fd98 	bl	800e2f8 <viprintf>
		va_end(arg);
	}
}
 800b7c8:	bf00      	nop
 800b7ca:	3714      	adds	r7, #20
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b7d2:	b003      	add	sp, #12
 800b7d4:	4770      	bx	lr
 800b7d6:	bf00      	nop
 800b7d8:	20000162 	.word	0x20000162

0800b7dc <vatek_chip_read_register>:

vatek_result vatek_chip_read_register(hvatek_chip hchip, int32_t addr, uint32_t* val)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b084      	sub	sp, #16
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	60f8      	str	r0, [r7, #12]
 800b7e4:	60b9      	str	r1, [r7, #8]
 800b7e6:	607a      	str	r2, [r7, #4]
	return chip_i2c_send_read((Pstm32_i2c)hchip,HAL_I2CCHIP_READ,addr,val);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	68ba      	ldr	r2, [r7, #8]
 800b7ec:	2104      	movs	r1, #4
 800b7ee:	68f8      	ldr	r0, [r7, #12]
 800b7f0:	f000 f816 	bl	800b820 <chip_i2c_send_read>
 800b7f4:	4603      	mov	r3, r0
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3710      	adds	r7, #16
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}

0800b7fe <vatek_chip_read_memory>:
{
	return chip_i2c_send_write((Pstm32_i2c)hchip,HAL_I2CCHIP_WRITE,addr,val);
}

vatek_result vatek_chip_read_memory(hvatek_chip hchip, int32_t addr, uint32_t* val)
{
 800b7fe:	b580      	push	{r7, lr}
 800b800:	b084      	sub	sp, #16
 800b802:	af00      	add	r7, sp, #0
 800b804:	60f8      	str	r0, [r7, #12]
 800b806:	60b9      	str	r1, [r7, #8]
 800b808:	607a      	str	r2, [r7, #4]
	return chip_i2c_send_read((Pstm32_i2c)hchip,HAL_I2CCMD_READ,addr,val);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	68ba      	ldr	r2, [r7, #8]
 800b80e:	2105      	movs	r1, #5
 800b810:	68f8      	ldr	r0, [r7, #12]
 800b812:	f000 f805 	bl	800b820 <chip_i2c_send_read>
 800b816:	4603      	mov	r3, r0
}
 800b818:	4618      	mov	r0, r3
 800b81a:	3710      	adds	r7, #16
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}

0800b820 <chip_i2c_send_read>:
	}
	return res;
}

vatek_result chip_i2c_send_read(Pstm32_i2c pi2c,uint8_t cmd,int32_t addr,uint32_t* val)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b086      	sub	sp, #24
 800b824:	af00      	add	r7, sp, #0
 800b826:	60f8      	str	r0, [r7, #12]
 800b828:	607a      	str	r2, [r7, #4]
 800b82a:	603b      	str	r3, [r7, #0]
 800b82c:	460b      	mov	r3, r1
 800b82e:	72fb      	strb	r3, [r7, #11]
	vatek_result res = vatek_success;
 800b830:	2300      	movs	r3, #0
 800b832:	617b      	str	r3, [r7, #20]
	hali2c_cmd[0] = 0x04;					/* i2c_ip buffer position*/
 800b834:	4b25      	ldr	r3, [pc, #148]	; (800b8cc <chip_i2c_send_read+0xac>)
 800b836:	2204      	movs	r2, #4
 800b838:	701a      	strb	r2, [r3, #0]
	hali2c_cmd[1] = (uint8_t)addr;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	b2da      	uxtb	r2, r3
 800b83e:	4b23      	ldr	r3, [pc, #140]	; (800b8cc <chip_i2c_send_read+0xac>)
 800b840:	705a      	strb	r2, [r3, #1]
	hali2c_cmd[2] = (uint8_t)(addr >> 8);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	121b      	asrs	r3, r3, #8
 800b846:	b2da      	uxtb	r2, r3
 800b848:	4b20      	ldr	r3, [pc, #128]	; (800b8cc <chip_i2c_send_read+0xac>)
 800b84a:	709a      	strb	r2, [r3, #2]
	hali2c_cmd[3] = (uint8_t)(addr >> 16);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	141b      	asrs	r3, r3, #16
 800b850:	b2da      	uxtb	r2, r3
 800b852:	4b1e      	ldr	r3, [pc, #120]	; (800b8cc <chip_i2c_send_read+0xac>)
 800b854:	70da      	strb	r2, [r3, #3]
	hali2c_cmd[4] = cmd;
 800b856:	4a1d      	ldr	r2, [pc, #116]	; (800b8cc <chip_i2c_send_read+0xac>)
 800b858:	7afb      	ldrb	r3, [r7, #11]
 800b85a:	7113      	strb	r3, [r2, #4]

	res = chip_i2c_write(pi2c, &hali2c_cmd[0], 5);
 800b85c:	2205      	movs	r2, #5
 800b85e:	491b      	ldr	r1, [pc, #108]	; (800b8cc <chip_i2c_send_read+0xac>)
 800b860:	68f8      	ldr	r0, [r7, #12]
 800b862:	f000 f835 	bl	800b8d0 <chip_i2c_write>
 800b866:	6178      	str	r0, [r7, #20]
	if (is_vatek_success(res))
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	db13      	blt.n	800b896 <chip_i2c_send_read+0x76>
	{
		chip_operation_wait();
 800b86e:	f7ff ff7f 	bl	800b770 <chip_operation_wait>
		hali2c_cmd[0] = 0;
 800b872:	4b16      	ldr	r3, [pc, #88]	; (800b8cc <chip_i2c_send_read+0xac>)
 800b874:	2200      	movs	r2, #0
 800b876:	701a      	strb	r2, [r3, #0]
		res = chip_i2c_write(pi2c, &hali2c_cmd[0], 1);
 800b878:	2201      	movs	r2, #1
 800b87a:	4914      	ldr	r1, [pc, #80]	; (800b8cc <chip_i2c_send_read+0xac>)
 800b87c:	68f8      	ldr	r0, [r7, #12]
 800b87e:	f000 f827 	bl	800b8d0 <chip_i2c_write>
 800b882:	6178      	str	r0, [r7, #20]
		if (is_vatek_success(res))
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	2b00      	cmp	r3, #0
 800b888:	db05      	blt.n	800b896 <chip_i2c_send_read+0x76>
			res = chip_i2c_read(pi2c, &hali2c_cmd[0], 4);
 800b88a:	2204      	movs	r2, #4
 800b88c:	490f      	ldr	r1, [pc, #60]	; (800b8cc <chip_i2c_send_read+0xac>)
 800b88e:	68f8      	ldr	r0, [r7, #12]
 800b890:	f000 f84b 	bl	800b92a <chip_i2c_read>
 800b894:	6178      	str	r0, [r7, #20]
	}

	if (is_vatek_success(res))
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	db11      	blt.n	800b8c0 <chip_i2c_send_read+0xa0>
		*val = hali2c_cmd[0] | (hali2c_cmd[1] << 8) | (hali2c_cmd[2] << 16) | (hali2c_cmd[3] << 24);
 800b89c:	4b0b      	ldr	r3, [pc, #44]	; (800b8cc <chip_i2c_send_read+0xac>)
 800b89e:	781b      	ldrb	r3, [r3, #0]
 800b8a0:	461a      	mov	r2, r3
 800b8a2:	4b0a      	ldr	r3, [pc, #40]	; (800b8cc <chip_i2c_send_read+0xac>)
 800b8a4:	785b      	ldrb	r3, [r3, #1]
 800b8a6:	021b      	lsls	r3, r3, #8
 800b8a8:	431a      	orrs	r2, r3
 800b8aa:	4b08      	ldr	r3, [pc, #32]	; (800b8cc <chip_i2c_send_read+0xac>)
 800b8ac:	789b      	ldrb	r3, [r3, #2]
 800b8ae:	041b      	lsls	r3, r3, #16
 800b8b0:	431a      	orrs	r2, r3
 800b8b2:	4b06      	ldr	r3, [pc, #24]	; (800b8cc <chip_i2c_send_read+0xac>)
 800b8b4:	78db      	ldrb	r3, [r3, #3]
 800b8b6:	061b      	lsls	r3, r3, #24
 800b8b8:	4313      	orrs	r3, r2
 800b8ba:	461a      	mov	r2, r3
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	601a      	str	r2, [r3, #0]
	return res;
 800b8c0:	697b      	ldr	r3, [r7, #20]
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3718      	adds	r7, #24
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}
 800b8ca:	bf00      	nop
 800b8cc:	20000ab4 	.word	0x20000ab4

0800b8d0 <chip_i2c_write>:

	return chip_i2c_write(pi2c, &hali2c_cmd[0], 9);
}

vatek_result chip_i2c_write(Pstm32_i2c pi2c, uint8_t* pbuf, int32_t len)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b086      	sub	sp, #24
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	60f8      	str	r0, [r7, #12]
 800b8d8:	60b9      	str	r1, [r7, #8]
 800b8da:	607a      	str	r2, [r7, #4]
	vatek_result res = pi2c->start(pi2c->hi2c, HAL_I2CCHIP_WRADDR,0);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	689b      	ldr	r3, [r3, #8]
 800b8e0:	68fa      	ldr	r2, [r7, #12]
 800b8e2:	6810      	ldr	r0, [r2, #0]
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	2120      	movs	r1, #32
 800b8e8:	4798      	blx	r3
 800b8ea:	6178      	str	r0, [r7, #20]
	if (is_vatek_success(res))
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	db11      	blt.n	800b916 <chip_i2c_write+0x46>
	{
		res = pi2c->write(pi2c->hi2c, pbuf, len);
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	68db      	ldr	r3, [r3, #12]
 800b8f6:	68fa      	ldr	r2, [r7, #12]
 800b8f8:	6810      	ldr	r0, [r2, #0]
 800b8fa:	687a      	ldr	r2, [r7, #4]
 800b8fc:	68b9      	ldr	r1, [r7, #8]
 800b8fe:	4798      	blx	r3
 800b900:	6178      	str	r0, [r7, #20]
		if (is_vatek_success(res))res = pi2c->stop(pi2c->hi2c);
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	2b00      	cmp	r3, #0
 800b906:	db06      	blt.n	800b916 <chip_i2c_write+0x46>
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	695b      	ldr	r3, [r3, #20]
 800b90c:	68fa      	ldr	r2, [r7, #12]
 800b90e:	6812      	ldr	r2, [r2, #0]
 800b910:	4610      	mov	r0, r2
 800b912:	4798      	blx	r3
 800b914:	6178      	str	r0, [r7, #20]
	}
	if (is_vatek_success(res))chip_operation_wait();
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	db01      	blt.n	800b920 <chip_i2c_write+0x50>
 800b91c:	f7ff ff28 	bl	800b770 <chip_operation_wait>
	return res;
 800b920:	697b      	ldr	r3, [r7, #20]
}
 800b922:	4618      	mov	r0, r3
 800b924:	3718      	adds	r7, #24
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}

0800b92a <chip_i2c_read>:

vatek_result chip_i2c_read(Pstm32_i2c pi2c, uint8_t* pbuf, int32_t len)
{
 800b92a:	b580      	push	{r7, lr}
 800b92c:	b086      	sub	sp, #24
 800b92e:	af00      	add	r7, sp, #0
 800b930:	60f8      	str	r0, [r7, #12]
 800b932:	60b9      	str	r1, [r7, #8]
 800b934:	607a      	str	r2, [r7, #4]
	vatek_result res = pi2c->start(pi2c->hi2c, HAL_I2CCHIP_RDADDR,0);
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	689b      	ldr	r3, [r3, #8]
 800b93a:	68fa      	ldr	r2, [r7, #12]
 800b93c:	6810      	ldr	r0, [r2, #0]
 800b93e:	2200      	movs	r2, #0
 800b940:	2121      	movs	r1, #33	; 0x21
 800b942:	4798      	blx	r3
 800b944:	6178      	str	r0, [r7, #20]
	if (is_vatek_success(res))
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	db11      	blt.n	800b970 <chip_i2c_read+0x46>
	{
		res = pi2c->read(pi2c->hi2c, pbuf, len);
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	691b      	ldr	r3, [r3, #16]
 800b950:	68fa      	ldr	r2, [r7, #12]
 800b952:	6810      	ldr	r0, [r2, #0]
 800b954:	687a      	ldr	r2, [r7, #4]
 800b956:	68b9      	ldr	r1, [r7, #8]
 800b958:	4798      	blx	r3
 800b95a:	6178      	str	r0, [r7, #20]
		if (is_vatek_success(res))res = pi2c->stop(pi2c->hi2c);
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	db06      	blt.n	800b970 <chip_i2c_read+0x46>
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	695b      	ldr	r3, [r3, #20]
 800b966:	68fa      	ldr	r2, [r7, #12]
 800b968:	6812      	ldr	r2, [r2, #0]
 800b96a:	4610      	mov	r0, r2
 800b96c:	4798      	blx	r3
 800b96e:	6178      	str	r0, [r7, #20]
	}
	if (is_vatek_success(res))chip_operation_wait();
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	2b00      	cmp	r3, #0
 800b974:	db01      	blt.n	800b97a <chip_i2c_read+0x50>
 800b976:	f7ff fefb 	bl	800b770 <chip_operation_wait>
	return res;
 800b97a:	697b      	ldr	r3, [r7, #20]
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3718      	adds	r7, #24
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}

0800b984 <hdmi_tool_get_video_id>:
#include <driver/av/tools/hdmi_tool.h>

Phdmi_video_id hdmi_tool_get_video_id(uint8_t vid)
{
 800b984:	b480      	push	{r7}
 800b986:	b085      	sub	sp, #20
 800b988:	af00      	add	r7, sp, #0
 800b98a:	4603      	mov	r3, r0
 800b98c:	71fb      	strb	r3, [r7, #7]
    int32_t i = 0;
 800b98e:	2300      	movs	r3, #0
 800b990:	60fb      	str	r3, [r7, #12]
    for(i = 0;i < HDMI_VIDEO_ID_NUMS;i++)
 800b992:	2300      	movs	r3, #0
 800b994:	60fb      	str	r3, [r7, #12]
 800b996:	e015      	b.n	800b9c4 <hdmi_tool_get_video_id+0x40>
    {
        if(hdmi_video_table[i].vid == vid)
 800b998:	490f      	ldr	r1, [pc, #60]	; (800b9d8 <hdmi_tool_get_video_id+0x54>)
 800b99a:	68fa      	ldr	r2, [r7, #12]
 800b99c:	4613      	mov	r3, r2
 800b99e:	005b      	lsls	r3, r3, #1
 800b9a0:	4413      	add	r3, r2
 800b9a2:	00db      	lsls	r3, r3, #3
 800b9a4:	440b      	add	r3, r1
 800b9a6:	781b      	ldrb	r3, [r3, #0]
 800b9a8:	79fa      	ldrb	r2, [r7, #7]
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d107      	bne.n	800b9be <hdmi_tool_get_video_id+0x3a>
            return (Phdmi_video_id)&hdmi_video_table[i];
 800b9ae:	68fa      	ldr	r2, [r7, #12]
 800b9b0:	4613      	mov	r3, r2
 800b9b2:	005b      	lsls	r3, r3, #1
 800b9b4:	4413      	add	r3, r2
 800b9b6:	00db      	lsls	r3, r3, #3
 800b9b8:	4a07      	ldr	r2, [pc, #28]	; (800b9d8 <hdmi_tool_get_video_id+0x54>)
 800b9ba:	4413      	add	r3, r2
 800b9bc:	e006      	b.n	800b9cc <hdmi_tool_get_video_id+0x48>
    for(i = 0;i < HDMI_VIDEO_ID_NUMS;i++)
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	3301      	adds	r3, #1
 800b9c2:	60fb      	str	r3, [r7, #12]
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	2b10      	cmp	r3, #16
 800b9c8:	d9e6      	bls.n	800b998 <hdmi_tool_get_video_id+0x14>
    }
    return NULL;
 800b9ca:	2300      	movs	r3, #0
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3714      	adds	r7, #20
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d6:	4770      	bx	lr
 800b9d8:	0800fe34 	.word	0x0800fe34

0800b9dc <hdmi_tool_get_video_id_by_info>:

Phdmi_video_id hdmi_tool_get_video_id_by_info(video_resolution resolution,video_framerate framerate,video_aspect_rate aspect)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b085      	sub	sp, #20
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	71fb      	strb	r3, [r7, #7]
 800b9e6:	460b      	mov	r3, r1
 800b9e8:	71bb      	strb	r3, [r7, #6]
 800b9ea:	4613      	mov	r3, r2
 800b9ec:	717b      	strb	r3, [r7, #5]
    int32_t i = 0;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	60fb      	str	r3, [r7, #12]
    for(i = 0;i < HDMI_VIDEO_ID_NUMS;i++)
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	60fb      	str	r3, [r7, #12]
 800b9f6:	e034      	b.n	800ba62 <hdmi_tool_get_video_id_by_info+0x86>
    {
        if(hdmi_video_table[i].resolution == resolution && 
 800b9f8:	491f      	ldr	r1, [pc, #124]	; (800ba78 <hdmi_tool_get_video_id_by_info+0x9c>)
 800b9fa:	68fa      	ldr	r2, [r7, #12]
 800b9fc:	4613      	mov	r3, r2
 800b9fe:	005b      	lsls	r3, r3, #1
 800ba00:	4413      	add	r3, r2
 800ba02:	00db      	lsls	r3, r3, #3
 800ba04:	440b      	add	r3, r1
 800ba06:	3302      	adds	r3, #2
 800ba08:	f993 3000 	ldrsb.w	r3, [r3]
 800ba0c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d123      	bne.n	800ba5c <hdmi_tool_get_video_id_by_info+0x80>
            hdmi_video_table[i].framerate == framerate &&
 800ba14:	4918      	ldr	r1, [pc, #96]	; (800ba78 <hdmi_tool_get_video_id_by_info+0x9c>)
 800ba16:	68fa      	ldr	r2, [r7, #12]
 800ba18:	4613      	mov	r3, r2
 800ba1a:	005b      	lsls	r3, r3, #1
 800ba1c:	4413      	add	r3, r2
 800ba1e:	00db      	lsls	r3, r3, #3
 800ba20:	440b      	add	r3, r1
 800ba22:	3303      	adds	r3, #3
 800ba24:	f993 3000 	ldrsb.w	r3, [r3]
        if(hdmi_video_table[i].resolution == resolution && 
 800ba28:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	d115      	bne.n	800ba5c <hdmi_tool_get_video_id_by_info+0x80>
            hdmi_video_table[i].aspectratio == aspect)
 800ba30:	4911      	ldr	r1, [pc, #68]	; (800ba78 <hdmi_tool_get_video_id_by_info+0x9c>)
 800ba32:	68fa      	ldr	r2, [r7, #12]
 800ba34:	4613      	mov	r3, r2
 800ba36:	005b      	lsls	r3, r3, #1
 800ba38:	4413      	add	r3, r2
 800ba3a:	00db      	lsls	r3, r3, #3
 800ba3c:	440b      	add	r3, r1
 800ba3e:	3304      	adds	r3, #4
 800ba40:	f993 3000 	ldrsb.w	r3, [r3]
            hdmi_video_table[i].framerate == framerate &&
 800ba44:	f997 2005 	ldrsb.w	r2, [r7, #5]
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	d107      	bne.n	800ba5c <hdmi_tool_get_video_id_by_info+0x80>
            return (Phdmi_video_id)&hdmi_video_table[i];
 800ba4c:	68fa      	ldr	r2, [r7, #12]
 800ba4e:	4613      	mov	r3, r2
 800ba50:	005b      	lsls	r3, r3, #1
 800ba52:	4413      	add	r3, r2
 800ba54:	00db      	lsls	r3, r3, #3
 800ba56:	4a08      	ldr	r2, [pc, #32]	; (800ba78 <hdmi_tool_get_video_id_by_info+0x9c>)
 800ba58:	4413      	add	r3, r2
 800ba5a:	e006      	b.n	800ba6a <hdmi_tool_get_video_id_by_info+0x8e>
    for(i = 0;i < HDMI_VIDEO_ID_NUMS;i++)
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	3301      	adds	r3, #1
 800ba60:	60fb      	str	r3, [r7, #12]
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	2b10      	cmp	r3, #16
 800ba66:	d9c7      	bls.n	800b9f8 <hdmi_tool_get_video_id_by_info+0x1c>
    }
    return NULL;  
 800ba68:	2300      	movs	r3, #0
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3714      	adds	r7, #20
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba74:	4770      	bx	lr
 800ba76:	bf00      	nop
 800ba78:	0800fe34 	.word	0x0800fe34

0800ba7c <hdmi_tool_change_base_clock>:

void hdmi_tool_change_base_clock(bsource_baseclk bclk,Pbridge_video_info psource)
{   
 800ba7c:	b480      	push	{r7}
 800ba7e:	b083      	sub	sp, #12
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	6039      	str	r1, [r7, #0]
    if(bclk == sbaseclk_1001)
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2b01      	cmp	r3, #1
 800ba8a:	d145      	bne.n	800bb18 <hdmi_tool_change_base_clock+0x9c>
    {
        if(psource->framerate == framerate_24)psource->framerate = framerate_23_97;
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	d103      	bne.n	800ba9e <hdmi_tool_change_base_clock+0x22>
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	2200      	movs	r2, #0
 800ba9a:	705a      	strb	r2, [r3, #1]
            if(psource->resolution == resolution_1080p)psource->pixelclk = 148500;
            else if(psource->resolution == resolution_1080i)psource->pixelclk = 74250;
            else if(psource->resolution == resolution_720p)psource->pixelclk = 74250;
        }        
    }
}
 800ba9c:	e081      	b.n	800bba2 <hdmi_tool_change_base_clock+0x126>
        else if(psource->framerate == framerate_30)
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800baa4:	2b04      	cmp	r3, #4
 800baa6:	d114      	bne.n	800bad2 <hdmi_tool_change_base_clock+0x56>
            psource->framerate = framerate_29_97;
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	2203      	movs	r2, #3
 800baac:	705a      	strb	r2, [r3, #1]
            if(psource->resolution == resolution_1080p)psource->pixelclk = 74176;
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	f993 3000 	ldrsb.w	r3, [r3]
 800bab4:	2b06      	cmp	r3, #6
 800bab6:	d103      	bne.n	800bac0 <hdmi_tool_change_base_clock+0x44>
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	4a3d      	ldr	r2, [pc, #244]	; (800bbb0 <hdmi_tool_change_base_clock+0x134>)
 800babc:	60da      	str	r2, [r3, #12]
}
 800babe:	e070      	b.n	800bba2 <hdmi_tool_change_base_clock+0x126>
            else if(psource->resolution == resolution_1080i)psource->pixelclk = 74176;
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	f993 3000 	ldrsb.w	r3, [r3]
 800bac6:	2b05      	cmp	r3, #5
 800bac8:	d16b      	bne.n	800bba2 <hdmi_tool_change_base_clock+0x126>
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	4a38      	ldr	r2, [pc, #224]	; (800bbb0 <hdmi_tool_change_base_clock+0x134>)
 800bace:	60da      	str	r2, [r3, #12]
}
 800bad0:	e067      	b.n	800bba2 <hdmi_tool_change_base_clock+0x126>
        }else if(psource->framerate  == framerate_60)
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800bad8:	2b07      	cmp	r3, #7
 800bada:	d162      	bne.n	800bba2 <hdmi_tool_change_base_clock+0x126>
            psource->framerate = framerate_59_94;
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	2206      	movs	r2, #6
 800bae0:	705a      	strb	r2, [r3, #1]
            if(psource->resolution == resolution_1080p)psource->pixelclk = 148351;
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	f993 3000 	ldrsb.w	r3, [r3]
 800bae8:	2b06      	cmp	r3, #6
 800baea:	d103      	bne.n	800baf4 <hdmi_tool_change_base_clock+0x78>
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	4a31      	ldr	r2, [pc, #196]	; (800bbb4 <hdmi_tool_change_base_clock+0x138>)
 800baf0:	60da      	str	r2, [r3, #12]
}
 800baf2:	e056      	b.n	800bba2 <hdmi_tool_change_base_clock+0x126>
            else if(psource->resolution == resolution_1080i)psource->pixelclk = 74176;
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	f993 3000 	ldrsb.w	r3, [r3]
 800bafa:	2b05      	cmp	r3, #5
 800bafc:	d103      	bne.n	800bb06 <hdmi_tool_change_base_clock+0x8a>
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	4a2b      	ldr	r2, [pc, #172]	; (800bbb0 <hdmi_tool_change_base_clock+0x134>)
 800bb02:	60da      	str	r2, [r3, #12]
}
 800bb04:	e04d      	b.n	800bba2 <hdmi_tool_change_base_clock+0x126>
            else if(psource->resolution == resolution_720p)psource->pixelclk = 74176;
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	f993 3000 	ldrsb.w	r3, [r3]
 800bb0c:	2b04      	cmp	r3, #4
 800bb0e:	d148      	bne.n	800bba2 <hdmi_tool_change_base_clock+0x126>
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	4a27      	ldr	r2, [pc, #156]	; (800bbb0 <hdmi_tool_change_base_clock+0x134>)
 800bb14:	60da      	str	r2, [r3, #12]
}
 800bb16:	e044      	b.n	800bba2 <hdmi_tool_change_base_clock+0x126>
        if(psource->framerate == framerate_23_97)psource->framerate = framerate_24;
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d103      	bne.n	800bb2a <hdmi_tool_change_base_clock+0xae>
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	2201      	movs	r2, #1
 800bb26:	705a      	strb	r2, [r3, #1]
}
 800bb28:	e03b      	b.n	800bba2 <hdmi_tool_change_base_clock+0x126>
        else if(psource->framerate == framerate_29_97)
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800bb30:	2b03      	cmp	r3, #3
 800bb32:	d114      	bne.n	800bb5e <hdmi_tool_change_base_clock+0xe2>
            psource->framerate = framerate_30;
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	2204      	movs	r2, #4
 800bb38:	705a      	strb	r2, [r3, #1]
            if(psource->resolution == resolution_1080p)psource->pixelclk = 74250;
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	f993 3000 	ldrsb.w	r3, [r3]
 800bb40:	2b06      	cmp	r3, #6
 800bb42:	d103      	bne.n	800bb4c <hdmi_tool_change_base_clock+0xd0>
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	4a1c      	ldr	r2, [pc, #112]	; (800bbb8 <hdmi_tool_change_base_clock+0x13c>)
 800bb48:	60da      	str	r2, [r3, #12]
}
 800bb4a:	e02a      	b.n	800bba2 <hdmi_tool_change_base_clock+0x126>
            else if(psource->resolution == resolution_1080i)psource->pixelclk = 74250;
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	f993 3000 	ldrsb.w	r3, [r3]
 800bb52:	2b05      	cmp	r3, #5
 800bb54:	d125      	bne.n	800bba2 <hdmi_tool_change_base_clock+0x126>
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	4a17      	ldr	r2, [pc, #92]	; (800bbb8 <hdmi_tool_change_base_clock+0x13c>)
 800bb5a:	60da      	str	r2, [r3, #12]
}
 800bb5c:	e021      	b.n	800bba2 <hdmi_tool_change_base_clock+0x126>
        }else if(psource->framerate  == framerate_59_94)
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800bb64:	2b06      	cmp	r3, #6
 800bb66:	d11c      	bne.n	800bba2 <hdmi_tool_change_base_clock+0x126>
            psource->framerate = framerate_60;
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	2207      	movs	r2, #7
 800bb6c:	705a      	strb	r2, [r3, #1]
            if(psource->resolution == resolution_1080p)psource->pixelclk = 148500;
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	f993 3000 	ldrsb.w	r3, [r3]
 800bb74:	2b06      	cmp	r3, #6
 800bb76:	d103      	bne.n	800bb80 <hdmi_tool_change_base_clock+0x104>
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	4a10      	ldr	r2, [pc, #64]	; (800bbbc <hdmi_tool_change_base_clock+0x140>)
 800bb7c:	60da      	str	r2, [r3, #12]
}
 800bb7e:	e010      	b.n	800bba2 <hdmi_tool_change_base_clock+0x126>
            else if(psource->resolution == resolution_1080i)psource->pixelclk = 74250;
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	f993 3000 	ldrsb.w	r3, [r3]
 800bb86:	2b05      	cmp	r3, #5
 800bb88:	d103      	bne.n	800bb92 <hdmi_tool_change_base_clock+0x116>
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	4a0a      	ldr	r2, [pc, #40]	; (800bbb8 <hdmi_tool_change_base_clock+0x13c>)
 800bb8e:	60da      	str	r2, [r3, #12]
}
 800bb90:	e007      	b.n	800bba2 <hdmi_tool_change_base_clock+0x126>
            else if(psource->resolution == resolution_720p)psource->pixelclk = 74250;
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	f993 3000 	ldrsb.w	r3, [r3]
 800bb98:	2b04      	cmp	r3, #4
 800bb9a:	d102      	bne.n	800bba2 <hdmi_tool_change_base_clock+0x126>
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	4a06      	ldr	r2, [pc, #24]	; (800bbb8 <hdmi_tool_change_base_clock+0x13c>)
 800bba0:	60da      	str	r2, [r3, #12]
}
 800bba2:	bf00      	nop
 800bba4:	370c      	adds	r7, #12
 800bba6:	46bd      	mov	sp, r7
 800bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbac:	4770      	bx	lr
 800bbae:	bf00      	nop
 800bbb0:	000121c0 	.word	0x000121c0
 800bbb4:	0002437f 	.word	0x0002437f
 800bbb8:	0001220a 	.word	0x0001220a
 800bbbc:	00024414 	.word	0x00024414

0800bbc0 <hdmi_tool_get_timing>:

void hdmi_tool_get_timing(Phdmi_video_id pvid,Phdmi_video_timing ptiming)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b082      	sub	sp, #8
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	6039      	str	r1, [r7, #0]
    if(pvid->resolution == resolution_1080i || pvid->resolution == resolution_1080p)
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800bbd0:	2b05      	cmp	r3, #5
 800bbd2:	d004      	beq.n	800bbde <hdmi_tool_get_timing+0x1e>
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800bbda:	2b06      	cmp	r3, #6
 800bbdc:	d108      	bne.n	800bbf0 <hdmi_tool_get_timing+0x30>
    {
        ptiming->pixel_per_line = 1920;
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 800bbe4:	801a      	strh	r2, [r3, #0]
        ptiming->pixel_per_frame = 1080;
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800bbec:	805a      	strh	r2, [r3, #2]
 800bbee:	e03b      	b.n	800bc68 <hdmi_tool_get_timing+0xa8>
    }else if(pvid->resolution == resolution_720p)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800bbf6:	2b04      	cmp	r3, #4
 800bbf8:	d108      	bne.n	800bc0c <hdmi_tool_get_timing+0x4c>
    {
        ptiming->pixel_per_line = 1280;
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800bc00:	801a      	strh	r2, [r3, #0]
        ptiming->pixel_per_frame = 720;
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 800bc08:	805a      	strh	r2, [r3, #2]
 800bc0a:	e02d      	b.n	800bc68 <hdmi_tool_get_timing+0xa8>
    }else if(pvid->resolution == resolution_480i || pvid->resolution == resolution_480p)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d004      	beq.n	800bc20 <hdmi_tool_get_timing+0x60>
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	d108      	bne.n	800bc32 <hdmi_tool_get_timing+0x72>
    {
        ptiming->pixel_per_line = 720;
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 800bc26:	801a      	strh	r2, [r3, #0]
        ptiming->pixel_per_frame = 480;
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800bc2e:	805a      	strh	r2, [r3, #2]
 800bc30:	e01a      	b.n	800bc68 <hdmi_tool_get_timing+0xa8>
    }else if(pvid->resolution == resolution_576i || pvid->resolution == resolution_576p)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800bc38:	2b02      	cmp	r3, #2
 800bc3a:	d004      	beq.n	800bc46 <hdmi_tool_get_timing+0x86>
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800bc42:	2b03      	cmp	r3, #3
 800bc44:	d108      	bne.n	800bc58 <hdmi_tool_get_timing+0x98>
    {
        ptiming->pixel_per_line = 720;
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 800bc4c:	801a      	strh	r2, [r3, #0]
        ptiming->pixel_per_frame = 576;
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	f44f 7210 	mov.w	r2, #576	; 0x240
 800bc54:	805a      	strh	r2, [r3, #2]
 800bc56:	e007      	b.n	800bc68 <hdmi_tool_get_timing+0xa8>
    }else _HAL_ERR(hdmi,"unhandle resolution : %d",pvid->resolution);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800bc5e:	4a1c      	ldr	r2, [pc, #112]	; (800bcd0 <hdmi_tool_get_timing+0x110>)
 800bc60:	491c      	ldr	r1, [pc, #112]	; (800bcd4 <hdmi_tool_get_timing+0x114>)
 800bc62:	2002      	movs	r0, #2
 800bc64:	f7ff fd9e 	bl	800b7a4 <vatek_debug_print>
    
    if(is_resolution_interlaced(pvid->resolution))
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d009      	beq.n	800bc86 <hdmi_tool_get_timing+0xc6>
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800bc78:	2b02      	cmp	r3, #2
 800bc7a:	d004      	beq.n	800bc86 <hdmi_tool_get_timing+0xc6>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800bc82:	2b05      	cmp	r3, #5
 800bc84:	d108      	bne.n	800bc98 <hdmi_tool_get_timing+0xd8>
    {
        ptiming->pixel_per_frame >>= 1;
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	885b      	ldrh	r3, [r3, #2]
 800bc8a:	085b      	lsrs	r3, r3, #1
 800bc8c:	b29a      	uxth	r2, r3
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	805a      	strh	r2, [r3, #2]
        ptiming->_int = 1;
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	2201      	movs	r2, #1
 800bc96:	735a      	strb	r2, [r3, #13]
    }
    
    ptiming->hfp = pvid->hfp;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	899a      	ldrh	r2, [r3, #12]
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	809a      	strh	r2, [r3, #4]
    ptiming->hbp = pvid->hbp;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	89da      	ldrh	r2, [r3, #14]
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	80da      	strh	r2, [r3, #6]
    ptiming->hpw = pvid->hpw;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	8a1a      	ldrh	r2, [r3, #16]
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	811a      	strh	r2, [r3, #8]
    ptiming->vfp = pvid->vfp;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	7c9a      	ldrb	r2, [r3, #18]
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	729a      	strb	r2, [r3, #10]
    ptiming->vbp = pvid->vbp;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	7cda      	ldrb	r2, [r3, #19]
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	72da      	strb	r2, [r3, #11]
    ptiming->vpw = pvid->vpw;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	7d1a      	ldrb	r2, [r3, #20]
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	731a      	strb	r2, [r3, #12]
    
}
 800bcc8:	bf00      	nop
 800bcca:	3708      	adds	r7, #8
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}
 800bcd0:	0800f710 	.word	0x0800f710
 800bcd4:	0800f718 	.word	0x0800f718

0800bcd8 <hdmi_tool_timing_printf>:

void hdmi_tool_timing_printf(Phdmi_video_timing ptiming)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b082      	sub	sp, #8
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
    _HAL_LOG(hdmi,"printf hdmi timing");
 800bce0:	4a1f      	ldr	r2, [pc, #124]	; (800bd60 <hdmi_tool_timing_printf+0x88>)
 800bce2:	4920      	ldr	r1, [pc, #128]	; (800bd64 <hdmi_tool_timing_printf+0x8c>)
 800bce4:	2000      	movs	r0, #0
 800bce6:	f7ff fd5d 	bl	800b7a4 <vatek_debug_print>
    printf("    APPL : %d\r\n",ptiming->pixel_per_line);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	881b      	ldrh	r3, [r3, #0]
 800bcee:	4619      	mov	r1, r3
 800bcf0:	481d      	ldr	r0, [pc, #116]	; (800bd68 <hdmi_tool_timing_printf+0x90>)
 800bcf2:	f002 fa0b 	bl	800e10c <iprintf>
    printf("    ALPF : %d\r\n",ptiming->pixel_per_frame);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	885b      	ldrh	r3, [r3, #2]
 800bcfa:	4619      	mov	r1, r3
 800bcfc:	481b      	ldr	r0, [pc, #108]	; (800bd6c <hdmi_tool_timing_printf+0x94>)
 800bcfe:	f002 fa05 	bl	800e10c <iprintf>
    printf("    HFP  : %d\r\n",ptiming->hfp);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	889b      	ldrh	r3, [r3, #4]
 800bd06:	4619      	mov	r1, r3
 800bd08:	4819      	ldr	r0, [pc, #100]	; (800bd70 <hdmi_tool_timing_printf+0x98>)
 800bd0a:	f002 f9ff 	bl	800e10c <iprintf>
    printf("    HBP  : %d\r\n",ptiming->hbp);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	88db      	ldrh	r3, [r3, #6]
 800bd12:	4619      	mov	r1, r3
 800bd14:	4817      	ldr	r0, [pc, #92]	; (800bd74 <hdmi_tool_timing_printf+0x9c>)
 800bd16:	f002 f9f9 	bl	800e10c <iprintf>
    printf("    HPW  : %d\r\n",ptiming->hpw);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	891b      	ldrh	r3, [r3, #8]
 800bd1e:	4619      	mov	r1, r3
 800bd20:	4815      	ldr	r0, [pc, #84]	; (800bd78 <hdmi_tool_timing_printf+0xa0>)
 800bd22:	f002 f9f3 	bl	800e10c <iprintf>
    printf("    VFP  : %d\r\n",ptiming->vfp);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	7a9b      	ldrb	r3, [r3, #10]
 800bd2a:	4619      	mov	r1, r3
 800bd2c:	4813      	ldr	r0, [pc, #76]	; (800bd7c <hdmi_tool_timing_printf+0xa4>)
 800bd2e:	f002 f9ed 	bl	800e10c <iprintf>
    printf("    VPW  : %d\r\n",ptiming->vpw);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	7b1b      	ldrb	r3, [r3, #12]
 800bd36:	4619      	mov	r1, r3
 800bd38:	4811      	ldr	r0, [pc, #68]	; (800bd80 <hdmi_tool_timing_printf+0xa8>)
 800bd3a:	f002 f9e7 	bl	800e10c <iprintf>
    printf("    VBP  : %d\r\n",ptiming->vbp);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	7adb      	ldrb	r3, [r3, #11]
 800bd42:	4619      	mov	r1, r3
 800bd44:	480f      	ldr	r0, [pc, #60]	; (800bd84 <hdmi_tool_timing_printf+0xac>)
 800bd46:	f002 f9e1 	bl	800e10c <iprintf>
    printf("    INT  : %d\r\n",ptiming->_int);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	7b5b      	ldrb	r3, [r3, #13]
 800bd4e:	4619      	mov	r1, r3
 800bd50:	480d      	ldr	r0, [pc, #52]	; (800bd88 <hdmi_tool_timing_printf+0xb0>)
 800bd52:	f002 f9db 	bl	800e10c <iprintf>
}
 800bd56:	bf00      	nop
 800bd58:	3708      	adds	r7, #8
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}
 800bd5e:	bf00      	nop
 800bd60:	0800f710 	.word	0x0800f710
 800bd64:	0800f73c 	.word	0x0800f73c
 800bd68:	0800f758 	.word	0x0800f758
 800bd6c:	0800f768 	.word	0x0800f768
 800bd70:	0800f778 	.word	0x0800f778
 800bd74:	0800f788 	.word	0x0800f788
 800bd78:	0800f798 	.word	0x0800f798
 800bd7c:	0800f7a8 	.word	0x0800f7a8
 800bd80:	0800f7b8 	.word	0x0800f7b8
 800bd84:	0800f7c8 	.word	0x0800f7c8
 800bd88:	0800f7d8 	.word	0x0800f7d8

0800bd8c <vatek_bridge_open>:
extern vatek_result bridge_hw_init(void);
extern vatek_result bridge_hw_reset(void);
extern void bridge_hw_close(void);

vatek_result vatek_bridge_open(hvatek_bridge* hbridge)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b084      	sub	sp, #16
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
    vatek_result nres = vatek_badstatus;
 800bd94:	f06f 0304 	mvn.w	r3, #4
 800bd98:	60fb      	str	r3, [r7, #12]
    if(!hbboard)
 800bd9a:	4b39      	ldr	r3, [pc, #228]	; (800be80 <vatek_bridge_open+0xf4>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d169      	bne.n	800be76 <vatek_bridge_open+0xea>
    {
        nres = hal_board_open();
 800bda2:	f001 f9b5 	bl	800d110 <hal_board_open>
 800bda6:	60f8      	str	r0, [r7, #12]
        if(is_vatek_success(nres))
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	db02      	blt.n	800bdb4 <vatek_bridge_open+0x28>
            nres = bridge_hw_init();
 800bdae:	f000 f9d8 	bl	800c162 <bridge_hw_init>
 800bdb2:	60f8      	str	r0, [r7, #12]

        if(is_vatek_success(nres))
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	db57      	blt.n	800be6a <vatek_bridge_open+0xde>
        {
            nres = vatek_memfail;
 800bdba:	f06f 030a 	mvn.w	r3, #10
 800bdbe:	60fb      	str	r3, [r7, #12]
            hbboard = (Pbridge_handle)malloc(sizeof(bridge_handle));
 800bdc0:	2038      	movs	r0, #56	; 0x38
 800bdc2:	f002 f89d 	bl	800df00 <malloc>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	461a      	mov	r2, r3
 800bdca:	4b2d      	ldr	r3, [pc, #180]	; (800be80 <vatek_bridge_open+0xf4>)
 800bdcc:	601a      	str	r2, [r3, #0]
            if(hbboard)
 800bdce:	4b2c      	ldr	r3, [pc, #176]	; (800be80 <vatek_bridge_open+0xf4>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d044      	beq.n	800be60 <vatek_bridge_open+0xd4>
            {
                memset(hbboard,0,sizeof(bridge_handle));
 800bdd6:	4b2a      	ldr	r3, [pc, #168]	; (800be80 <vatek_bridge_open+0xf4>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	2238      	movs	r2, #56	; 0x38
 800bddc:	2100      	movs	r1, #0
 800bdde:	4618      	mov	r0, r3
 800bde0:	f002 f8ac 	bl	800df3c <memset>
                nres = bridge_source_get(hbboard);
 800bde4:	4b26      	ldr	r3, [pc, #152]	; (800be80 <vatek_bridge_open+0xf4>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	4618      	mov	r0, r3
 800bdea:	f7fe fc2d 	bl	800a648 <bridge_source_get>
 800bdee:	60f8      	str	r0, [r7, #12]
                if(is_vatek_success(nres))
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	db25      	blt.n	800be42 <vatek_bridge_open+0xb6>
                {
                    Pbsource_list ptr = hbboard->source_root;
 800bdf6:	4b22      	ldr	r3, [pc, #136]	; (800be80 <vatek_bridge_open+0xf4>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	69db      	ldr	r3, [r3, #28]
 800bdfc:	60bb      	str	r3, [r7, #8]
                    hbboard->info.bversion = BRIDGE_2_VERSION;
 800bdfe:	4b20      	ldr	r3, [pc, #128]	; (800be80 <vatek_bridge_open+0xf4>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	4a20      	ldr	r2, [pc, #128]	; (800be84 <vatek_bridge_open+0xf8>)
 800be04:	601a      	str	r2, [r3, #0]
                    hbboard->info.source_nums = hbboard->source_count;
 800be06:	4b1e      	ldr	r3, [pc, #120]	; (800be80 <vatek_bridge_open+0xf4>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	699a      	ldr	r2, [r3, #24]
 800be0c:	4b1c      	ldr	r3, [pc, #112]	; (800be80 <vatek_bridge_open+0xf4>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	611a      	str	r2, [r3, #16]
                    while(ptr)
 800be12:	e013      	b.n	800be3c <vatek_bridge_open+0xb0>
                    {
                        hbboard->info.source_enable |= BBRIDGE_DRI_TO_BIT(ptr->device.driver->id);
 800be14:	4b1a      	ldr	r3, [pc, #104]	; (800be80 <vatek_bridge_open+0xf4>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	685a      	ldr	r2, [r3, #4]
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	689b      	ldr	r3, [r3, #8]
 800be1e:	685b      	ldr	r3, [r3, #4]
 800be20:	0a1b      	lsrs	r3, r3, #8
 800be22:	f003 030f 	and.w	r3, r3, #15
 800be26:	2101      	movs	r1, #1
 800be28:	fa01 f303 	lsl.w	r3, r1, r3
 800be2c:	4619      	mov	r1, r3
 800be2e:	4b14      	ldr	r3, [pc, #80]	; (800be80 <vatek_bridge_open+0xf4>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	430a      	orrs	r2, r1
 800be34:	605a      	str	r2, [r3, #4]
                        ptr = ptr->next;
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	60bb      	str	r3, [r7, #8]
                    while(ptr)
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d1e8      	bne.n	800be14 <vatek_bridge_open+0x88>
                    }
                }

                if(is_vatek_success(nres))
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	2b00      	cmp	r3, #0
 800be46:	db06      	blt.n	800be56 <vatek_bridge_open+0xca>
                {
                    *hbridge = hbboard;
 800be48:	4b0d      	ldr	r3, [pc, #52]	; (800be80 <vatek_bridge_open+0xf4>)
 800be4a:	681a      	ldr	r2, [r3, #0]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	601a      	str	r2, [r3, #0]
                    nres = vatek_success;
 800be50:	2300      	movs	r3, #0
 800be52:	60fb      	str	r3, [r7, #12]
 800be54:	e004      	b.n	800be60 <vatek_bridge_open+0xd4>
                }else free(hbboard);
 800be56:	4b0a      	ldr	r3, [pc, #40]	; (800be80 <vatek_bridge_open+0xf4>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	4618      	mov	r0, r3
 800be5c:	f002 f858 	bl	800df10 <free>
            }
            if(!is_vatek_success(nres))hal_board_close();
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2b00      	cmp	r3, #0
 800be64:	da01      	bge.n	800be6a <vatek_bridge_open+0xde>
 800be66:	f001 fa22 	bl	800d2ae <hal_board_close>
        }
        if(!is_vatek_success(nres))hbboard = NULL;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	da02      	bge.n	800be76 <vatek_bridge_open+0xea>
 800be70:	4b03      	ldr	r3, [pc, #12]	; (800be80 <vatek_bridge_open+0xf4>)
 800be72:	2200      	movs	r2, #0
 800be74:	601a      	str	r2, [r3, #0]
    }
    return nres;
 800be76:	68fb      	ldr	r3, [r7, #12]
}
 800be78:	4618      	mov	r0, r3
 800be7a:	3710      	adds	r7, #16
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}
 800be80:	20000ac0 	.word	0x20000ac0
 800be84:	02201210 	.word	0x02201210

0800be88 <vatek_bridge_start>:
    Pbridge_handle phboard = (Pbridge_handle)hbridge;
    return &phboard->info;
}

vatek_result vatek_bridge_start(hvatek_bridge hbridge)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b084      	sub	sp, #16
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
    vatek_result nres = vatek_badstatus;
 800be90:	f06f 0304 	mvn.w	r3, #4
 800be94:	60fb      	str	r3, [r7, #12]
    Pbridge_handle phboard = (Pbridge_handle)hbridge;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	60bb      	str	r3, [r7, #8]
    if(!phboard->hbridgeusb)
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	695b      	ldr	r3, [r3, #20]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d105      	bne.n	800beae <vatek_bridge_start+0x26>
    {
		nres = hal_bridge_usb_open(&phboard->hbridgeusb);
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	3314      	adds	r3, #20
 800bea6:	4618      	mov	r0, r3
 800bea8:	f001 fa82 	bl	800d3b0 <hal_bridge_usb_open>
 800beac:	60f8      	str	r0, [r7, #12]
    }
    return nres;
 800beae:	68fb      	ldr	r3, [r7, #12]
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	3710      	adds	r7, #16
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}

0800beb8 <vatek_bridge_polling>:

vatek_result vatek_bridge_polling(hvatek_bridge hbridge)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b08a      	sub	sp, #40	; 0x28
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
	static uint32_t run_tick = 0;
	uint32_t stop_tick = vatek_get_tick_ms() ;
 800bec0:	f7ff fc68 	bl	800b794 <vatek_get_tick_ms>
 800bec4:	6238      	str	r0, [r7, #32]

	//if (stop_tick - run_tick > 100){
	    vatek_result nres = vatek_badstatus;
 800bec6:	f06f 0304 	mvn.w	r3, #4
 800beca:	627b      	str	r3, [r7, #36]	; 0x24
	    Pbridge_handle phboard = (Pbridge_handle)hbridge;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	61fb      	str	r3, [r7, #28]
	    if(phboard->hbridgeusb)
 800bed0:	69fb      	ldr	r3, [r7, #28]
 800bed2:	695b      	ldr	r3, [r3, #20]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	f000 80ad 	beq.w	800c034 <vatek_bridge_polling+0x17c>
	    {
			Phid_bridge_cmd pcmd = NULL;
 800beda:	2300      	movs	r3, #0
 800bedc:	60fb      	str	r3, [r7, #12]
			bridge_device_status status = hal_bridge_usb_get_status(phboard->hbridgeusb,&pcmd);
 800bede:	69fb      	ldr	r3, [r7, #28]
 800bee0:	695b      	ldr	r3, [r3, #20]
 800bee2:	f107 020c 	add.w	r2, r7, #12
 800bee6:	4611      	mov	r1, r2
 800bee8:	4618      	mov	r0, r3
 800beea:	f001 fabf 	bl	800d46c <hal_bridge_usb_get_status>
 800beee:	4603      	mov	r3, r0
 800bef0:	76fb      	strb	r3, [r7, #27]
			nres = vatek_success;
 800bef2:	2300      	movs	r3, #0
 800bef4:	627b      	str	r3, [r7, #36]	; 0x24
			if(status == hid_status_locked && pcmd)
 800bef6:	7efb      	ldrb	r3, [r7, #27]
 800bef8:	2b66      	cmp	r3, #102	; 0x66
 800befa:	f040 809b 	bne.w	800c034 <vatek_bridge_polling+0x17c>
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	f000 8097 	beq.w	800c034 <vatek_bridge_polling+0x17c>
			{
	            Phid_bridge_result presult = hal_bridge_usb_get_result(phboard->hbridgeusb);
 800bf06:	69fb      	ldr	r3, [r7, #28]
 800bf08:	695b      	ldr	r3, [r3, #20]
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f001 fadc 	bl	800d4c8 <hal_bridge_usb_get_result>
 800bf10:	6178      	str	r0, [r7, #20]
	            uint32_t usbcmd = hal_bridge_get_uint32(pcmd->cmd);
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	685b      	ldr	r3, [r3, #4]
 800bf16:	4618      	mov	r0, r3
 800bf18:	f7fe f97f 	bl	800a21a <hal_bridge_get_uint32>
 800bf1c:	6138      	str	r0, [r7, #16]
	            if(IS_MODULATOR_CMD(usbcmd))nres = cmd_mod(hbridge,pcmd, presult);
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d007      	beq.n	800bf38 <vatek_bridge_polling+0x80>
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	697a      	ldr	r2, [r7, #20]
 800bf2c:	4619      	mov	r1, r3
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f7fe ffce 	bl	800aed0 <cmd_mod>
 800bf34:	6278      	str	r0, [r7, #36]	; 0x24
 800bf36:	e067      	b.n	800c008 <vatek_bridge_polling+0x150>
	            else if(IS_BOARDBRIDGE_CMD(usbcmd))
 800bf38:	693b      	ldr	r3, [r7, #16]
 800bf3a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d05f      	beq.n	800c002 <vatek_bridge_polling+0x14a>
				{
					if(IS_BRIDGE_SOURCE_CMD(usbcmd)){
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bf48:	f5b3 0f71 	cmp.w	r3, #15794176	; 0xf10000
 800bf4c:	d116      	bne.n	800bf7c <vatek_bridge_polling+0xc4>

						nres = cmd_bridge_source(hbridge, pcmd,presult);
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	697a      	ldr	r2, [r7, #20]
 800bf52:	4619      	mov	r1, r3
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f7fe fd25 	bl	800a9a4 <cmd_bridge_source>
 800bf5a:	6278      	str	r0, [r7, #36]	; 0x24
						if(nres != vatek_success){
 800bf5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d052      	beq.n	800c008 <vatek_bridge_polling+0x150>
							hal_system_sleep(100);
 800bf62:	2064      	movs	r0, #100	; 0x64
 800bf64:	f001 f8c2 	bl	800d0ec <hal_system_sleep>
							printf("cmd_bridge_source fail %d\r\n",nres);
 800bf68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bf6a:	4836      	ldr	r0, [pc, #216]	; (800c044 <vatek_bridge_polling+0x18c>)
 800bf6c:	f002 f8ce 	bl	800e10c <iprintf>

							nres = hal_gpio_config(HAL_PIN_36_GPIO, hal_gpio_output);
 800bf70:	2101      	movs	r1, #1
 800bf72:	2024      	movs	r0, #36	; 0x24
 800bf74:	f001 f8ee 	bl	800d154 <hal_gpio_config>
 800bf78:	6278      	str	r0, [r7, #36]	; 0x24
 800bf7a:	e045      	b.n	800c008 <vatek_bridge_polling+0x150>

						}
						//printf("cmd_bridge_source polling---1\r\n");
					}
					else if(IS_BRIDGE_DEVICE_CMD(usbcmd)){
 800bf7c:	693b      	ldr	r3, [r7, #16]
 800bf7e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bf82:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 800bf86:	d10e      	bne.n	800bfa6 <vatek_bridge_polling+0xee>
	                    nres = cmd_bridge_device(hbridge,pcmd,presult);
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	697a      	ldr	r2, [r7, #20]
 800bf8c:	4619      	mov	r1, r3
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	f7fe fe12 	bl	800abb8 <cmd_bridge_device>
 800bf94:	6278      	str	r0, [r7, #36]	; 0x24
	                    if(nres != vatek_success){
 800bf96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d035      	beq.n	800c008 <vatek_bridge_polling+0x150>
							printf("cmd_bridge_device fail %d\r\n",nres);
 800bf9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bf9e:	482a      	ldr	r0, [pc, #168]	; (800c048 <vatek_bridge_polling+0x190>)
 800bfa0:	f002 f8b4 	bl	800e10c <iprintf>
 800bfa4:	e030      	b.n	800c008 <vatek_bridge_polling+0x150>
						}
	                    //printf("cmd_bridge_device polling---2\r\n");
					}
					else if(IS_BRIDGE_DEMOD_CMD(usbcmd)){
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bfac:	f5b3 0f78 	cmp.w	r3, #16252928	; 0xf80000
 800bfb0:	d10e      	bne.n	800bfd0 <vatek_bridge_polling+0x118>
	                    nres = cmd_bridge_demod(hbridge,pcmd,presult);
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	697a      	ldr	r2, [r7, #20]
 800bfb6:	4619      	mov	r1, r3
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f7fe fea3 	bl	800ad04 <cmd_bridge_demod>
 800bfbe:	6278      	str	r0, [r7, #36]	; 0x24
	                    if(nres != vatek_success){
 800bfc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d020      	beq.n	800c008 <vatek_bridge_polling+0x150>
							printf("cmd_bridge_demod fail %d\r\n",nres);
 800bfc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bfc8:	4820      	ldr	r0, [pc, #128]	; (800c04c <vatek_bridge_polling+0x194>)
 800bfca:	f002 f89f 	bl	800e10c <iprintf>
 800bfce:	e01b      	b.n	800c008 <vatek_bridge_polling+0x150>
						}
	                    //printf("cmd_bridge_demod polling---3\r\n");
					}
					else if(IS_BRIDGE_RFMIXER_CMD(usbcmd)){
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bfd6:	f5b3 0f74 	cmp.w	r3, #15990784	; 0xf40000
 800bfda:	d10e      	bne.n	800bffa <vatek_bridge_polling+0x142>
	                    nres = cmd_bridge_rfmixer(hbridge,pcmd,presult);
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	697a      	ldr	r2, [r7, #20]
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f7fe fea2 	bl	800ad2c <cmd_bridge_rfmixer>
 800bfe8:	6278      	str	r0, [r7, #36]	; 0x24
	                    if(nres != vatek_success){
 800bfea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d00b      	beq.n	800c008 <vatek_bridge_polling+0x150>
							printf("cmd_bridge_rfmixer fail %d\r\n",nres);
 800bff0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bff2:	4817      	ldr	r0, [pc, #92]	; (800c050 <vatek_bridge_polling+0x198>)
 800bff4:	f002 f88a 	bl	800e10c <iprintf>
 800bff8:	e006      	b.n	800c008 <vatek_bridge_polling+0x150>
						}
	                    //printf("cmd_bridge_rfmixer polling---4\r\n");

					}
	                else nres = vatek_unsupport;
 800bffa:	f06f 0301 	mvn.w	r3, #1
 800bffe:	627b      	str	r3, [r7, #36]	; 0x24
 800c000:	e002      	b.n	800c008 <vatek_bridge_polling+0x150>
				}else nres = vatek_unsupport;
 800c002:	f06f 0301 	mvn.w	r3, #1
 800c006:	627b      	str	r3, [r7, #36]	; 0x24

	            if(!is_vatek_success(nres))
 800c008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	da0c      	bge.n	800c028 <vatek_bridge_polling+0x170>
	            {
	                presult->result = hal_bridge_get_uint32(hal_bridge_get_result(nres));
 800c00e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c010:	f7fe f92e 	bl	800a270 <hal_bridge_get_result>
 800c014:	4603      	mov	r3, r0
 800c016:	4618      	mov	r0, r3
 800c018:	f7fe f8ff 	bl	800a21a <hal_bridge_get_uint32>
 800c01c:	4603      	mov	r3, r0
 800c01e:	461a      	mov	r2, r3
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	609a      	str	r2, [r3, #8]
	                nres = vatek_success;
 800c024:	2300      	movs	r3, #0
 800c026:	627b      	str	r3, [r7, #36]	; 0x24
	            }
	            nres = hal_bridge_usb_commit(phboard->hbridgeusb);
 800c028:	69fb      	ldr	r3, [r7, #28]
 800c02a:	695b      	ldr	r3, [r3, #20]
 800c02c:	4618      	mov	r0, r3
 800c02e:	f001 fa5f 	bl	800d4f0 <hal_bridge_usb_commit>
 800c032:	6278      	str	r0, [r7, #36]	; 0x24
			}
	    }
	//    printf("tick time = %d\r\n",vatek_get_tick_ms()-run_tick);
	//    run_tick = vatek_get_tick_ms();
		run_tick = stop_tick;
 800c034:	4a07      	ldr	r2, [pc, #28]	; (800c054 <vatek_bridge_polling+0x19c>)
 800c036:	6a3b      	ldr	r3, [r7, #32]
 800c038:	6013      	str	r3, [r2, #0]
	    return nres;
 800c03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	//}

}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3728      	adds	r7, #40	; 0x28
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}
 800c044:	0800f824 	.word	0x0800f824
 800c048:	0800f840 	.word	0x0800f840
 800c04c:	0800f85c 	.word	0x0800f85c
 800c050:	0800f878 	.word	0x0800f878
 800c054:	20000ac4 	.word	0x20000ac4

0800c058 <vatek_bridge_stop>:

vatek_result vatek_bridge_stop(hvatek_bridge hbridge)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b084      	sub	sp, #16
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
    vatek_result nres = vatek_badstatus;
 800c060:	f06f 0304 	mvn.w	r3, #4
 800c064:	60fb      	str	r3, [r7, #12]
    Pbridge_handle phboard = (Pbridge_handle)hbridge;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	60bb      	str	r3, [r7, #8]
    if(phboard->hbridgeusb)
 800c06a:	68bb      	ldr	r3, [r7, #8]
 800c06c:	695b      	ldr	r3, [r3, #20]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d009      	beq.n	800c086 <vatek_bridge_stop+0x2e>
    {
		hal_bridge_usb_close(phboard->hbridgeusb);
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	695b      	ldr	r3, [r3, #20]
 800c076:	4618      	mov	r0, r3
 800c078:	f001 fa66 	bl	800d548 <hal_bridge_usb_close>
		phboard->hbridgeusb = NULL;
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	2200      	movs	r2, #0
 800c080:	615a      	str	r2, [r3, #20]
		nres = vatek_success;
 800c082:	2300      	movs	r3, #0
 800c084:	60fb      	str	r3, [r7, #12]
    }
    return nres;   
 800c086:	68fb      	ldr	r3, [r7, #12]
}
 800c088:	4618      	mov	r0, r3
 800c08a:	3710      	adds	r7, #16
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}

0800c090 <vatek_bridge_close>:

void vatek_bridge_close(hvatek_bridge hbridge)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b084      	sub	sp, #16
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
    Pbridge_handle pbridge = (Pbridge_handle)hbridge;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	60fb      	str	r3, [r7, #12]
	vatek_bridge_stop(hbridge);
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f7ff ffdb 	bl	800c058 <vatek_bridge_stop>
    bridge_source_reset(pbridge);
 800c0a2:	68f8      	ldr	r0, [r7, #12]
 800c0a4:	f7fe fb44 	bl	800a730 <bridge_source_reset>
    bridge_hw_close();
 800c0a8:	f000 f8cd 	bl	800c246 <bridge_hw_close>
    hal_board_close();
 800c0ac:	f001 f8ff 	bl	800d2ae <hal_board_close>
    free(pbridge);
 800c0b0:	68f8      	ldr	r0, [r7, #12]
 800c0b2:	f001 ff2d 	bl	800df10 <free>
}
 800c0b6:	bf00      	nop
 800c0b8:	3710      	adds	r7, #16
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}

0800c0be <vatek_chip_open>:

vatek_result vatek_chip_open(hvatek_bridge hbridge,hvatek_chip* hchip)
{
 800c0be:	b580      	push	{r7, lr}
 800c0c0:	b086      	sub	sp, #24
 800c0c2:	af00      	add	r7, sp, #0
 800c0c4:	6078      	str	r0, [r7, #4]
 800c0c6:	6039      	str	r1, [r7, #0]
	#define MC_BASERAM_BASE             (0x5200 >> 2)      //128 MC base register address      
	vatek_result nres = vatek_badstatus;
 800c0c8:	f06f 0304 	mvn.w	r3, #4
 800c0cc:	617b      	str	r3, [r7, #20]
	Pstm32_i2c pi2c = stm32_core_get_main_i2c();
 800c0ce:	f000 fc39 	bl	800c944 <stm32_core_get_main_i2c>
 800c0d2:	6138      	str	r0, [r7, #16]
	if(pi2c)
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d010      	beq.n	800c0fc <vatek_chip_open+0x3e>
	{
		uint32_t val = 0;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	60fb      	str	r3, [r7, #12]
		nres = vatek_chip_read_register((hvatek_chip)pi2c,MC_BASERAM_BASE,&val);
 800c0de:	f107 030c 	add.w	r3, r7, #12
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	f44f 51a4 	mov.w	r1, #5248	; 0x1480
 800c0e8:	6938      	ldr	r0, [r7, #16]
 800c0ea:	f7ff fb77 	bl	800b7dc <vatek_chip_read_register>
 800c0ee:	6178      	str	r0, [r7, #20]
		if(is_vatek_success(nres))*hchip = pi2c;
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	db02      	blt.n	800c0fc <vatek_chip_open+0x3e>
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	693a      	ldr	r2, [r7, #16]
 800c0fa:	601a      	str	r2, [r3, #0]
	}
	return nres;
 800c0fc:	697b      	ldr	r3, [r7, #20]
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3718      	adds	r7, #24
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}

0800c106 <vatek_chip_close>:

void vatek_chip_close(hvatek_chip hchip)
{
 800c106:	b480      	push	{r7}
 800c108:	b083      	sub	sp, #12
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	6078      	str	r0, [r7, #4]
	
}
 800c10e:	bf00      	nop
 800c110:	370c      	adds	r7, #12
 800c112:	46bd      	mov	sp, r7
 800c114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c118:	4770      	bx	lr

0800c11a <vatek_source_get_first>:

void vatek_source_get_first(hvatek_bridge hbridge,bpointer* pos)
{
 800c11a:	b480      	push	{r7}
 800c11c:	b085      	sub	sp, #20
 800c11e:	af00      	add	r7, sp, #0
 800c120:	6078      	str	r0, [r7, #4]
 800c122:	6039      	str	r1, [r7, #0]
    Pbridge_handle pbridge = (Pbridge_handle)hbridge;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	60fb      	str	r3, [r7, #12]
    *pos = pbridge->source_root;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	69da      	ldr	r2, [r3, #28]
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	601a      	str	r2, [r3, #0]
}
 800c130:	bf00      	nop
 800c132:	3714      	adds	r7, #20
 800c134:	46bd      	mov	sp, r7
 800c136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13a:	4770      	bx	lr

0800c13c <vatek_source_get_next>:

Pbdevice_source vatek_source_get_next(bpointer* pos)
{
 800c13c:	b480      	push	{r7}
 800c13e:	b085      	sub	sp, #20
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
    Pbsource_list plist = (Pbsource_list)*pos;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	60fb      	str	r3, [r7, #12]
    *pos = plist->next;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681a      	ldr	r2, [r3, #0]
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	601a      	str	r2, [r3, #0]
    return &plist->device;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	3304      	adds	r3, #4
}
 800c156:	4618      	mov	r0, r3
 800c158:	3714      	adds	r7, #20
 800c15a:	46bd      	mov	sp, r7
 800c15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c160:	4770      	bx	lr

0800c162 <bridge_hw_init>:

vatek_result bridge_hw_init(void)
{
 800c162:	b580      	push	{r7, lr}
 800c164:	b082      	sub	sp, #8
 800c166:	af00      	add	r7, sp, #0
    vatek_result nres = hal_gpio_config(HAL_IO_CHIP_RESET,hal_gpio_output);
 800c168:	2101      	movs	r1, #1
 800c16a:	2016      	movs	r0, #22
 800c16c:	f000 fff2 	bl	800d154 <hal_gpio_config>
 800c170:	6078      	str	r0, [r7, #4]
    if(is_vatek_success(nres))
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2b00      	cmp	r3, #0
 800c176:	db04      	blt.n	800c182 <bridge_hw_init+0x20>
        nres = hal_gpio_config(HAL_IO_CHIP_RESCUE,hal_gpio_output);
 800c178:	2101      	movs	r1, #1
 800c17a:	201f      	movs	r0, #31
 800c17c:	f000 ffea 	bl	800d154 <hal_gpio_config>
 800c180:	6078      	str	r0, [r7, #4]
    if(is_vatek_success(nres))
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2b00      	cmp	r3, #0
 800c186:	db04      	blt.n	800c192 <bridge_hw_init+0x30>
        nres = hal_gpio_config(HAL_IO_AV_RESET,hal_gpio_output);
 800c188:	2101      	movs	r1, #1
 800c18a:	2026      	movs	r0, #38	; 0x26
 800c18c:	f000 ffe2 	bl	800d154 <hal_gpio_config>
 800c190:	6078      	str	r0, [r7, #4]
    if(is_vatek_success(nres))
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2b00      	cmp	r3, #0
 800c196:	db04      	blt.n	800c1a2 <bridge_hw_init+0x40>
        nres = hal_gpio_config(HAL_IO_HDMI_NIM_RESET,hal_gpio_output);
 800c198:	2101      	movs	r1, #1
 800c19a:	200d      	movs	r0, #13
 800c19c:	f000 ffda 	bl	800d154 <hal_gpio_config>
 800c1a0:	6078      	str	r0, [r7, #4]

    if(is_vatek_success(nres))
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	db0a      	blt.n	800c1be <bridge_hw_init+0x5c>
    {
        nres = hal_gpio_set(HAL_IO_CHIP_RESCUE,1);
 800c1a8:	2101      	movs	r1, #1
 800c1aa:	201f      	movs	r0, #31
 800c1ac:	f000 ffee 	bl	800d18c <hal_gpio_set>
 800c1b0:	6078      	str	r0, [r7, #4]
        if(is_vatek_success(nres))
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	db02      	blt.n	800c1be <bridge_hw_init+0x5c>
            nres = bridge_hw_reset();
 800c1b8:	f000 f806 	bl	800c1c8 <bridge_hw_reset>
 800c1bc:	6078      	str	r0, [r7, #4]
    }
    return nres;
 800c1be:	687b      	ldr	r3, [r7, #4]
}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	3708      	adds	r7, #8
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}

0800c1c8 <bridge_hw_reset>:

vatek_result bridge_hw_reset(void)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b082      	sub	sp, #8
 800c1cc:	af00      	add	r7, sp, #0
    vatek_result nres = hal_gpio_set(HAL_IO_CHIP_RESET,0);
 800c1ce:	2100      	movs	r1, #0
 800c1d0:	2016      	movs	r0, #22
 800c1d2:	f000 ffdb 	bl	800d18c <hal_gpio_set>
 800c1d6:	6078      	str	r0, [r7, #4]
    if(is_vatek_success(nres))
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	db04      	blt.n	800c1e8 <bridge_hw_reset+0x20>
        nres = hal_gpio_set(HAL_IO_AV_RESET,0);
 800c1de:	2100      	movs	r1, #0
 800c1e0:	2026      	movs	r0, #38	; 0x26
 800c1e2:	f000 ffd3 	bl	800d18c <hal_gpio_set>
 800c1e6:	6078      	str	r0, [r7, #4]
    if(is_vatek_success(nres))
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	db04      	blt.n	800c1f8 <bridge_hw_reset+0x30>
        nres = hal_gpio_set(HAL_IO_HDMI_NIM_RESET,0);
 800c1ee:	2100      	movs	r1, #0
 800c1f0:	200d      	movs	r0, #13
 800c1f2:	f000 ffcb 	bl	800d18c <hal_gpio_set>
 800c1f6:	6078      	str	r0, [r7, #4]

    if(is_vatek_success(nres))
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	db1e      	blt.n	800c23c <bridge_hw_reset+0x74>
    {
        hal_system_sleep(100);
 800c1fe:	2064      	movs	r0, #100	; 0x64
 800c200:	f000 ff74 	bl	800d0ec <hal_system_sleep>
        nres = hal_gpio_set(HAL_IO_CHIP_RESET,1);
 800c204:	2101      	movs	r1, #1
 800c206:	2016      	movs	r0, #22
 800c208:	f000 ffc0 	bl	800d18c <hal_gpio_set>
 800c20c:	6078      	str	r0, [r7, #4]
        if(is_vatek_success(nres))
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2b00      	cmp	r3, #0
 800c212:	db04      	blt.n	800c21e <bridge_hw_reset+0x56>
            nres = hal_gpio_set(HAL_IO_AV_RESET,1);
 800c214:	2101      	movs	r1, #1
 800c216:	2026      	movs	r0, #38	; 0x26
 800c218:	f000 ffb8 	bl	800d18c <hal_gpio_set>
 800c21c:	6078      	str	r0, [r7, #4]
        if(is_vatek_success(nres))
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2b00      	cmp	r3, #0
 800c222:	db04      	blt.n	800c22e <bridge_hw_reset+0x66>
            nres = hal_gpio_set(HAL_IO_HDMI_NIM_RESET,1);
 800c224:	2101      	movs	r1, #1
 800c226:	200d      	movs	r0, #13
 800c228:	f000 ffb0 	bl	800d18c <hal_gpio_set>
 800c22c:	6078      	str	r0, [r7, #4]

		if(is_vatek_success(nres))
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2b00      	cmp	r3, #0
 800c232:	db03      	blt.n	800c23c <bridge_hw_reset+0x74>
			hal_system_sleep(5000);
 800c234:	f241 3088 	movw	r0, #5000	; 0x1388
 800c238:	f000 ff58 	bl	800d0ec <hal_system_sleep>
    }
    return nres;
 800c23c:	687b      	ldr	r3, [r7, #4]
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3708      	adds	r7, #8
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}

0800c246 <bridge_hw_close>:

void bridge_hw_close()
{
 800c246:	b580      	push	{r7, lr}
 800c248:	af00      	add	r7, sp, #0
    hal_gpio_set(HAL_IO_CHIP_RESCUE,0);
 800c24a:	2100      	movs	r1, #0
 800c24c:	201f      	movs	r0, #31
 800c24e:	f000 ff9d 	bl	800d18c <hal_gpio_set>
    hal_gpio_set(HAL_IO_AV_RESET,0);
 800c252:	2100      	movs	r1, #0
 800c254:	2026      	movs	r0, #38	; 0x26
 800c256:	f000 ff99 	bl	800d18c <hal_gpio_set>
    hal_gpio_set(HAL_IO_HDMI_NIM_RESET,0);
 800c25a:	2100      	movs	r1, #0
 800c25c:	200d      	movs	r0, #13
 800c25e:	f000 ff95 	bl	800d18c <hal_gpio_set>
}
 800c262:	bf00      	nop
 800c264:	bd80      	pop	{r7, pc}
	...

0800c268 <main>:
extern void printf_bsource(hvatek_bridge hbridge);

extern vatek_result connect_chip(hvatek_bridge hbridge,hvatek_chip* hchip);

int main(void)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b084      	sub	sp, #16
 800c26c:	af00      	add	r7, sp, #0
	uint32_t tick_start,tick_stop;
	hvatek_bridge hbridge = NULL;
 800c26e:	2300      	movs	r3, #0
 800c270:	60bb      	str	r3, [r7, #8]
	hvatek_chip hchip = NULL;
 800c272:	2300      	movs	r3, #0
 800c274:	607b      	str	r3, [r7, #4]
	vatek_result nres = vatek_bridge_open(&hbridge);
 800c276:	f107 0308 	add.w	r3, r7, #8
 800c27a:	4618      	mov	r0, r3
 800c27c:	f7ff fd86 	bl	800bd8c <vatek_bridge_open>
 800c280:	60f8      	str	r0, [r7, #12]
	printf_logo();
 800c282:	f000 f8f3 	bl	800c46c <printf_logo>
	
	if(is_vatek_success(nres))
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	db14      	blt.n	800c2b6 <main+0x4e>
	{
		nres = connect_chip(hbridge,&hchip);
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	1d3a      	adds	r2, r7, #4
 800c290:	4611      	mov	r1, r2
 800c292:	4618      	mov	r0, r3
 800c294:	f000 f848 	bl	800c328 <connect_chip>
 800c298:	60f8      	str	r0, [r7, #12]
		if(is_vatek_success(nres))
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	db03      	blt.n	800c2a8 <main+0x40>
			printf_bsource(hbridge);
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f000 f916 	bl	800c4d4 <printf_bsource>
		if(!is_vatek_success(nres))vatek_bridge_close(hbridge);
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	da03      	bge.n	800c2b6 <main+0x4e>
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f7ff feed 	bl	800c090 <vatek_bridge_close>
	}
	
	if(is_vatek_success(nres))
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	db20      	blt.n	800c2fe <main+0x96>
	{
		nres = vatek_bridge_start(hbridge);
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f7ff fde2 	bl	800be88 <vatek_bridge_start>
 800c2c4:	60f8      	str	r0, [r7, #12]
		if(is_vatek_success(nres))
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	db0d      	blt.n	800c2e8 <main+0x80>
		{
			for(;;)
			{

				nres = vatek_bridge_polling(hbridge);
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f7ff fdf2 	bl	800beb8 <vatek_bridge_polling>
 800c2d4:	60f8      	str	r0, [r7, #12]
				if(!is_vatek_success(nres)){
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	db00      	blt.n	800c2de <main+0x76>
				nres = vatek_bridge_polling(hbridge);
 800c2dc:	e7f6      	b.n	800c2cc <main+0x64>
					break;
 800c2de:	bf00      	nop
				}
			}
			vatek_bridge_stop(hbridge);
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f7ff feb8 	bl	800c058 <vatek_bridge_stop>
		}

		if(hchip)vatek_chip_close(hchip);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d003      	beq.n	800c2f6 <main+0x8e>
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f7ff ff08 	bl	800c106 <vatek_chip_close>
		vatek_bridge_close(hbridge);
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f7ff fec9 	bl	800c090 <vatek_bridge_close>
	}
	_pl_title("bridge-2 terminal : %d",nres);
 800c2fe:	f000 ff00 	bl	800d102 <hal_system_get_tick>
 800c302:	4603      	mov	r3, r0
 800c304:	68fa      	ldr	r2, [r7, #12]
 800c306:	4619      	mov	r1, r3
 800c308:	4805      	ldr	r0, [pc, #20]	; (800c320 <main+0xb8>)
 800c30a:	f001 feff 	bl	800e10c <iprintf>
	_pl_spiltline();
 800c30e:	4805      	ldr	r0, [pc, #20]	; (800c324 <main+0xbc>)
 800c310:	f001 ff82 	bl	800e218 <puts>
	return 0;
 800c314:	2300      	movs	r3, #0
}
 800c316:	4618      	mov	r0, r3
 800c318:	3710      	adds	r7, #16
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}
 800c31e:	bf00      	nop
 800c320:	0800fa00 	.word	0x0800fa00
 800c324:	0800fa24 	.word	0x0800fa24

0800c328 <connect_chip>:

vatek_result connect_chip(hvatek_bridge hbridge,hvatek_chip* hchip)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b08e      	sub	sp, #56	; 0x38
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
 800c330:	6039      	str	r1, [r7, #0]
	vatek_result nres = vatek_chip_open(hbridge,hchip);
 800c332:	6839      	ldr	r1, [r7, #0]
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f7ff fec2 	bl	800c0be <vatek_chip_open>
 800c33a:	6378      	str	r0, [r7, #52]	; 0x34
	if(is_vatek_success(nres))
 800c33c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c33e:	2b00      	cmp	r3, #0
 800c340:	db6e      	blt.n	800c420 <connect_chip+0xf8>
	{
		uint32_t tick = hal_system_get_tick();
 800c342:	f000 fede 	bl	800d102 <hal_system_get_tick>
 800c346:	62f8      	str	r0, [r7, #44]	; 0x2c
		chip_status status = chip_status_fail_service;
 800c348:	23fe      	movs	r3, #254	; 0xfe
 800c34a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		while((hal_system_get_tick() - tick) < _BRIDGE_WAITCHIP_TIMEOUT)
 800c34e:	e00c      	b.n	800c36a <connect_chip+0x42>
		{
			status = chip_status_get(*hchip,NULL);
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	2100      	movs	r1, #0
 800c356:	4618      	mov	r0, r3
 800c358:	f000 f8ec 	bl	800c534 <chip_status_get>
 800c35c:	4603      	mov	r3, r0
 800c35e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			if(status == chip_status_waitcmd)break;
 800c362:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c366:	2b01      	cmp	r3, #1
 800c368:	d009      	beq.n	800c37e <connect_chip+0x56>
		while((hal_system_get_tick() - tick) < _BRIDGE_WAITCHIP_TIMEOUT)
 800c36a:	f000 feca 	bl	800d102 <hal_system_get_tick>
 800c36e:	4602      	mov	r2, r0
 800c370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c372:	1ad3      	subs	r3, r2, r3
 800c374:	f241 3287 	movw	r2, #4999	; 0x1387
 800c378:	4293      	cmp	r3, r2
 800c37a:	d9e9      	bls.n	800c350 <connect_chip+0x28>
 800c37c:	e000      	b.n	800c380 <connect_chip+0x58>
			if(status == chip_status_waitcmd)break;
 800c37e:	bf00      	nop
		}
			
		if(status == chip_status_waitcmd)
 800c380:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c384:	2b01      	cmp	r3, #1
 800c386:	d143      	bne.n	800c410 <connect_chip+0xe8>
		{
			chip_info info;
			nres = chip_info_get(*hchip,&info);
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	f107 020c 	add.w	r2, r7, #12
 800c390:	4611      	mov	r1, r2
 800c392:	4618      	mov	r0, r3
 800c394:	f000 f928 	bl	800c5e8 <chip_info_get>
 800c398:	6378      	str	r0, [r7, #52]	; 0x34
			if(is_vatek_success(nres))
 800c39a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	db2e      	blt.n	800c3fe <connect_chip+0xd6>
			{
				_pl_title("chip and service connected");
 800c3a0:	f000 feaf 	bl	800d102 <hal_system_get_tick>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	4619      	mov	r1, r3
 800c3a8:	4823      	ldr	r0, [pc, #140]	; (800c438 <connect_chip+0x110>)
 800c3aa:	f001 feaf 	bl	800e10c <iprintf>
				_pl_uint32(chip,info.chip_module);
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	4a22      	ldr	r2, [pc, #136]	; (800c43c <connect_chip+0x114>)
 800c3b2:	4923      	ldr	r1, [pc, #140]	; (800c440 <connect_chip+0x118>)
 800c3b4:	4823      	ldr	r0, [pc, #140]	; (800c444 <connect_chip+0x11c>)
 800c3b6:	f001 fea9 	bl	800e10c <iprintf>
				_pl_uint32(service,info.hal_service);
 800c3ba:	69bb      	ldr	r3, [r7, #24]
 800c3bc:	4a22      	ldr	r2, [pc, #136]	; (800c448 <connect_chip+0x120>)
 800c3be:	4920      	ldr	r1, [pc, #128]	; (800c440 <connect_chip+0x118>)
 800c3c0:	4820      	ldr	r0, [pc, #128]	; (800c444 <connect_chip+0x11c>)
 800c3c2:	f001 fea3 	bl	800e10c <iprintf>
				_pl_uint32(version,info.version);
 800c3c6:	69fb      	ldr	r3, [r7, #28]
 800c3c8:	4a20      	ldr	r2, [pc, #128]	; (800c44c <connect_chip+0x124>)
 800c3ca:	491d      	ldr	r1, [pc, #116]	; (800c440 <connect_chip+0x118>)
 800c3cc:	481d      	ldr	r0, [pc, #116]	; (800c444 <connect_chip+0x11c>)
 800c3ce:	f001 fe9d 	bl	800e10c <iprintf>
				_pl_uint32(input,info.input_support);
 800c3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d4:	4a1e      	ldr	r2, [pc, #120]	; (800c450 <connect_chip+0x128>)
 800c3d6:	491a      	ldr	r1, [pc, #104]	; (800c440 <connect_chip+0x118>)
 800c3d8:	481a      	ldr	r0, [pc, #104]	; (800c444 <connect_chip+0x11c>)
 800c3da:	f001 fe97 	bl	800e10c <iprintf>
				_pl_uint32(output,info.output_support);
 800c3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3e0:	4a1c      	ldr	r2, [pc, #112]	; (800c454 <connect_chip+0x12c>)
 800c3e2:	4917      	ldr	r1, [pc, #92]	; (800c440 <connect_chip+0x118>)
 800c3e4:	4817      	ldr	r0, [pc, #92]	; (800c444 <connect_chip+0x11c>)
 800c3e6:	f001 fe91 	bl	800e10c <iprintf>
				_pl_uint32(peripheral,info.peripheral_en);
 800c3ea:	6a3b      	ldr	r3, [r7, #32]
 800c3ec:	4a1a      	ldr	r2, [pc, #104]	; (800c458 <connect_chip+0x130>)
 800c3ee:	4914      	ldr	r1, [pc, #80]	; (800c440 <connect_chip+0x118>)
 800c3f0:	4814      	ldr	r0, [pc, #80]	; (800c444 <connect_chip+0x11c>)
 800c3f2:	f001 fe8b 	bl	800e10c <iprintf>
				_pl_spiltline();
 800c3f6:	4819      	ldr	r0, [pc, #100]	; (800c45c <connect_chip+0x134>)
 800c3f8:	f001 ff0e 	bl	800e218 <puts>
 800c3fc:	e017      	b.n	800c42e <connect_chip+0x106>
			}else _pl_title("read chip information fail : %d",nres);
 800c3fe:	f000 fe80 	bl	800d102 <hal_system_get_tick>
 800c402:	4603      	mov	r3, r0
 800c404:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c406:	4619      	mov	r1, r3
 800c408:	4815      	ldr	r0, [pc, #84]	; (800c460 <connect_chip+0x138>)
 800c40a:	f001 fe7f 	bl	800e10c <iprintf>
 800c40e:	e00e      	b.n	800c42e <connect_chip+0x106>
		}else _pl_title("connect chip but service not found");
 800c410:	f000 fe77 	bl	800d102 <hal_system_get_tick>
 800c414:	4603      	mov	r3, r0
 800c416:	4619      	mov	r1, r3
 800c418:	4812      	ldr	r0, [pc, #72]	; (800c464 <connect_chip+0x13c>)
 800c41a:	f001 fe77 	bl	800e10c <iprintf>
 800c41e:	e006      	b.n	800c42e <connect_chip+0x106>
	}else _pl_title("can not found chip");
 800c420:	f000 fe6f 	bl	800d102 <hal_system_get_tick>
 800c424:	4603      	mov	r3, r0
 800c426:	4619      	mov	r1, r3
 800c428:	480f      	ldr	r0, [pc, #60]	; (800c468 <connect_chip+0x140>)
 800c42a:	f001 fe6f 	bl	800e10c <iprintf>
	return nres;
 800c42e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c430:	4618      	mov	r0, r3
 800c432:	3738      	adds	r7, #56	; 0x38
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}
 800c438:	0800fa84 	.word	0x0800fa84
 800c43c:	0800faac 	.word	0x0800faac
 800c440:	0800fab4 	.word	0x0800fab4
 800c444:	0800fab8 	.word	0x0800fab8
 800c448:	0800fad4 	.word	0x0800fad4
 800c44c:	0800fadc 	.word	0x0800fadc
 800c450:	0800fae4 	.word	0x0800fae4
 800c454:	0800faec 	.word	0x0800faec
 800c458:	0800faf4 	.word	0x0800faf4
 800c45c:	0800fa24 	.word	0x0800fa24
 800c460:	0800fb00 	.word	0x0800fb00
 800c464:	0800fb2c 	.word	0x0800fb2c
 800c468:	0800fb5c 	.word	0x0800fb5c

0800c46c <printf_logo>:

void printf_logo()
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b082      	sub	sp, #8
 800c470:	af00      	add	r7, sp, #0
	int32_t i = 0;
 800c472:	2300      	movs	r3, #0
 800c474:	607b      	str	r3, [r7, #4]
	puts("\033[2J");   // clear screen
 800c476:	4811      	ldr	r0, [pc, #68]	; (800c4bc <printf_logo+0x50>)
 800c478:	f001 fece 	bl	800e218 <puts>
	puts("\033[0;0H"); // set cursor to 0,0
 800c47c:	4810      	ldr	r0, [pc, #64]	; (800c4c0 <printf_logo+0x54>)
 800c47e:	f001 fecb 	bl	800e218 <puts>
	puts("\033[3J");
 800c482:	4810      	ldr	r0, [pc, #64]	; (800c4c4 <printf_logo+0x58>)
 800c484:	f001 fec8 	bl	800e218 <puts>
	while(bridge_logo[i])
 800c488:	e00a      	b.n	800c4a0 <printf_logo+0x34>
	{
		printf("%s",bridge_logo[i]);
 800c48a:	4a0f      	ldr	r2, [pc, #60]	; (800c4c8 <printf_logo+0x5c>)
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c492:	4619      	mov	r1, r3
 800c494:	480d      	ldr	r0, [pc, #52]	; (800c4cc <printf_logo+0x60>)
 800c496:	f001 fe39 	bl	800e10c <iprintf>
		i++;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	3301      	adds	r3, #1
 800c49e:	607b      	str	r3, [r7, #4]
	while(bridge_logo[i])
 800c4a0:	4a09      	ldr	r2, [pc, #36]	; (800c4c8 <printf_logo+0x5c>)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d1ee      	bne.n	800c48a <printf_logo+0x1e>
	}
	_pl_spiltline();
 800c4ac:	4808      	ldr	r0, [pc, #32]	; (800c4d0 <printf_logo+0x64>)
 800c4ae:	f001 feb3 	bl	800e218 <puts>
}
 800c4b2:	bf00      	nop
 800c4b4:	3708      	adds	r7, #8
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}
 800c4ba:	bf00      	nop
 800c4bc:	0800fb7c 	.word	0x0800fb7c
 800c4c0:	0800fb84 	.word	0x0800fb84
 800c4c4:	0800fb8c 	.word	0x0800fb8c
 800c4c8:	20000164 	.word	0x20000164
 800c4cc:	0800fb94 	.word	0x0800fb94
 800c4d0:	0800fa24 	.word	0x0800fa24

0800c4d4 <printf_bsource>:

void printf_bsource(hvatek_bridge hbridge)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b084      	sub	sp, #16
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
	bpointer bptr = NULL;
 800c4dc:	2300      	movs	r3, #0
 800c4de:	60bb      	str	r3, [r7, #8]
	vatek_source_get_first(hbridge,&bptr);
 800c4e0:	f107 0308 	add.w	r3, r7, #8
 800c4e4:	4619      	mov	r1, r3
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f7ff fe17 	bl	800c11a <vatek_source_get_first>
	if(!bptr)
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d013      	beq.n	800c51a <printf_bsource+0x46>
	{
	
	}else
	{
		while(bptr)
 800c4f2:	e00f      	b.n	800c514 <printf_bsource+0x40>
		{
			Pbdevice_source pdevice = vatek_source_get_next(&bptr);
 800c4f4:	f107 0308 	add.w	r3, r7, #8
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f7ff fe1f 	bl	800c13c <vatek_source_get_next>
 800c4fe:	60f8      	str	r0, [r7, #12]
			_pl_sub("bsource [%-10s: %08x]",pdevice->driver->name,pdevice->driver->id);
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	685b      	ldr	r3, [r3, #4]
 800c504:	681a      	ldr	r2, [r3, #0]
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	685b      	ldr	r3, [r3, #4]
 800c50a:	685b      	ldr	r3, [r3, #4]
 800c50c:	4906      	ldr	r1, [pc, #24]	; (800c528 <printf_bsource+0x54>)
 800c50e:	4807      	ldr	r0, [pc, #28]	; (800c52c <printf_bsource+0x58>)
 800c510:	f001 fdfc 	bl	800e10c <iprintf>
		while(bptr)
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d1ec      	bne.n	800c4f4 <printf_bsource+0x20>
		}
	}
	_pl_spiltline();
 800c51a:	4805      	ldr	r0, [pc, #20]	; (800c530 <printf_bsource+0x5c>)
 800c51c:	f001 fe7c 	bl	800e218 <puts>
}
 800c520:	bf00      	nop
 800c522:	3710      	adds	r7, #16
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}
 800c528:	0800fab4 	.word	0x0800fab4
 800c52c:	0800fb98 	.word	0x0800fb98
 800c530:	0800fa24 	.word	0x0800fa24

0800c534 <chip_status_get>:
#include <core/base/chip_define.h>
//#include <cross/cross_os_api.h>

chip_status chip_status_get(hvatek_chip hchip,uint32_t* errcode)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b086      	sub	sp, #24
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
 800c53c:	6039      	str	r1, [r7, #0]
    uint32_t val = 0;
 800c53e:	2300      	movs	r3, #0
 800c540:	60bb      	str	r3, [r7, #8]
	vatek_result nres = readhal(HALREG_SYS_STATUS_0,&val);
 800c542:	f107 0308 	add.w	r3, r7, #8
 800c546:	461a      	mov	r2, r3
 800c548:	2120      	movs	r1, #32
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f7ff f957 	bl	800b7fe <vatek_chip_read_memory>
 800c550:	6178      	str	r0, [r7, #20]
	chip_status chipstatus = chip_status_fail_hw;
 800c552:	23fd      	movs	r3, #253	; 0xfd
 800c554:	74fb      	strb	r3, [r7, #19]
	if (is_vatek_success(nres))
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	db30      	blt.n	800c5be <chip_status_get+0x8a>
	{
		int32_t i = 0;
 800c55c:	2300      	movs	r3, #0
 800c55e:	60fb      	str	r3, [r7, #12]
        val &= SYS_STATUS_TAG | 0xFF;
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800c566:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c56a:	60bb      	str	r3, [r7, #8]

		for (i = 0; i < STATUS_TAGS_NUMS; i++)
 800c56c:	2300      	movs	r3, #0
 800c56e:	60fb      	str	r3, [r7, #12]
 800c570:	e020      	b.n	800c5b4 <chip_status_get+0x80>
		{
			if (val == chip_status_tags[i])
 800c572:	4a1b      	ldr	r2, [pc, #108]	; (800c5e0 <chip_status_get+0xac>)
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	429a      	cmp	r2, r3
 800c57e:	d116      	bne.n	800c5ae <chip_status_get+0x7a>
			{
				chipstatus = (chip_status)(i + chip_status_last);
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	b2db      	uxtb	r3, r3
 800c584:	3b04      	subs	r3, #4
 800c586:	b2db      	uxtb	r3, r3
 800c588:	74fb      	strb	r3, [r7, #19]
                if (!is_chip_status_valid(chipstatus))
 800c58a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c58e:	2b01      	cmp	r3, #1
 800c590:	d014      	beq.n	800c5bc <chip_status_get+0x88>
 800c592:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c596:	2b02      	cmp	r3, #2
 800c598:	d010      	beq.n	800c5bc <chip_status_get+0x88>
                {
                    if(errcode)nres = readhal(HALREG_SYS_ERRCODE, errcode);
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d00d      	beq.n	800c5bc <chip_status_get+0x88>
 800c5a0:	683a      	ldr	r2, [r7, #0]
 800c5a2:	2123      	movs	r1, #35	; 0x23
 800c5a4:	6878      	ldr	r0, [r7, #4]
 800c5a6:	f7ff f92a 	bl	800b7fe <vatek_chip_read_memory>
 800c5aa:	6178      	str	r0, [r7, #20]
                }
                    
				break;
 800c5ac:	e006      	b.n	800c5bc <chip_status_get+0x88>
		for (i = 0; i < STATUS_TAGS_NUMS; i++)
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	3301      	adds	r3, #1
 800c5b2:	60fb      	str	r3, [r7, #12]
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	2b06      	cmp	r3, #6
 800c5b8:	d9db      	bls.n	800c572 <chip_status_get+0x3e>
 800c5ba:	e000      	b.n	800c5be <chip_status_get+0x8a>
				break;
 800c5bc:	bf00      	nop
			}
		}
	}

    if(!is_vatek_success(nres))
 800c5be:	697b      	ldr	r3, [r7, #20]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	da07      	bge.n	800c5d4 <chip_status_get+0xa0>
    {
        if(errcode)*errcode = SERVICE_HW_FAIL;
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d002      	beq.n	800c5d0 <chip_status_get+0x9c>
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	4a05      	ldr	r2, [pc, #20]	; (800c5e4 <chip_status_get+0xb0>)
 800c5ce:	601a      	str	r2, [r3, #0]
        chipstatus = chip_status_fail_hw;
 800c5d0:	23fd      	movs	r3, #253	; 0xfd
 800c5d2:	74fb      	strb	r3, [r7, #19]
    }
	return chipstatus;
 800c5d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3718      	adds	r7, #24
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}
 800c5e0:	0800ffcc 	.word	0x0800ffcc
 800c5e4:	80020002 	.word	0x80020002

0800c5e8 <chip_info_get>:
    }
    return vatek_badparam;
}

vatek_result chip_info_get(hvatek_chip hchip,Pchip_info pinfo)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b086      	sub	sp, #24
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
 800c5f0:	6039      	str	r1, [r7, #0]
    uint32_t errcode = 0;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	60fb      	str	r3, [r7, #12]
	chip_status status = chip_status_get(hchip,&errcode);
 800c5f6:	f107 030c 	add.w	r3, r7, #12
 800c5fa:	4619      	mov	r1, r3
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f7ff ff99 	bl	800c534 <chip_status_get>
 800c602:	4603      	mov	r3, r0
 800c604:	74fb      	strb	r3, [r7, #19]
    vatek_result nres = vatek_success;
 800c606:	2300      	movs	r3, #0
 800c608:	617b      	str	r3, [r7, #20]

    memset(pinfo, 0, sizeof(chip_info));
 800c60a:	2220      	movs	r2, #32
 800c60c:	2100      	movs	r1, #0
 800c60e:	6838      	ldr	r0, [r7, #0]
 800c610:	f001 fc94 	bl	800df3c <memset>
    pinfo->status = status;
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	7cfa      	ldrb	r2, [r7, #19]
 800c618:	701a      	strb	r2, [r3, #0]
    pinfo->errcode = errcode;
 800c61a:	68fa      	ldr	r2, [r7, #12]
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	605a      	str	r2, [r3, #4]

    if(is_current_chip_status(status))
 800c620:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c624:	f113 0f04 	cmn.w	r3, #4
 800c628:	f2c0 80ae 	blt.w	800c788 <chip_info_get+0x1a0>
 800c62c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c630:	2b02      	cmp	r3, #2
 800c632:	f300 80a9 	bgt.w	800c788 <chip_info_get+0x1a0>
    {
        uint32_t val = 0;
 800c636:	2300      	movs	r3, #0
 800c638:	60bb      	str	r3, [r7, #8]
        nres = readhal(HALREG_CHIP_ID, &val);
 800c63a:	f107 0308 	add.w	r3, r7, #8
 800c63e:	461a      	mov	r2, r3
 800c640:	2124      	movs	r1, #36	; 0x24
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f7ff f8db 	bl	800b7fe <vatek_chip_read_memory>
 800c648:	6178      	str	r0, [r7, #20]
        if (is_vatek_success(nres))
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	f2c0 809b 	blt.w	800c788 <chip_info_get+0x1a0>
        {
            pinfo->chip_module = ic_module_unknown;
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	4a52      	ldr	r2, [pc, #328]	; (800c7a0 <chip_info_get+0x1b8>)
 800c656:	609a      	str	r2, [r3, #8]
            if (val == HAL_CHIPID_A1)pinfo->chip_module = ic_module_a1;
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	4a52      	ldr	r2, [pc, #328]	; (800c7a4 <chip_info_get+0x1bc>)
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d103      	bne.n	800c668 <chip_info_get+0x80>
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	4a50      	ldr	r2, [pc, #320]	; (800c7a4 <chip_info_get+0x1bc>)
 800c664:	609a      	str	r2, [r3, #8]
 800c666:	e03a      	b.n	800c6de <chip_info_get+0xf6>
            else if (val == HAL_CHIPID_A3)pinfo->chip_module = ic_module_a3;
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	4a4f      	ldr	r2, [pc, #316]	; (800c7a8 <chip_info_get+0x1c0>)
 800c66c:	4293      	cmp	r3, r2
 800c66e:	d103      	bne.n	800c678 <chip_info_get+0x90>
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	4a4d      	ldr	r2, [pc, #308]	; (800c7a8 <chip_info_get+0x1c0>)
 800c674:	609a      	str	r2, [r3, #8]
 800c676:	e032      	b.n	800c6de <chip_info_get+0xf6>
            else if (val == HAL_CHIPID_B1)pinfo->chip_module = ic_module_b1;
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	4a4c      	ldr	r2, [pc, #304]	; (800c7ac <chip_info_get+0x1c4>)
 800c67c:	4293      	cmp	r3, r2
 800c67e:	d103      	bne.n	800c688 <chip_info_get+0xa0>
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	4a4a      	ldr	r2, [pc, #296]	; (800c7ac <chip_info_get+0x1c4>)
 800c684:	609a      	str	r2, [r3, #8]
 800c686:	e02a      	b.n	800c6de <chip_info_get+0xf6>
            else if (val == HAL_CHIPID_B2)pinfo->chip_module = ic_module_b2;
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	4a49      	ldr	r2, [pc, #292]	; (800c7b0 <chip_info_get+0x1c8>)
 800c68c:	4293      	cmp	r3, r2
 800c68e:	d103      	bne.n	800c698 <chip_info_get+0xb0>
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	4a47      	ldr	r2, [pc, #284]	; (800c7b0 <chip_info_get+0x1c8>)
 800c694:	609a      	str	r2, [r3, #8]
 800c696:	e022      	b.n	800c6de <chip_info_get+0xf6>
            else if (val == HAL_CHIPID_B3)pinfo->chip_module = ic_module_b3_lite;
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	4a46      	ldr	r2, [pc, #280]	; (800c7b4 <chip_info_get+0x1cc>)
 800c69c:	4293      	cmp	r3, r2
 800c69e:	d103      	bne.n	800c6a8 <chip_info_get+0xc0>
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	4a44      	ldr	r2, [pc, #272]	; (800c7b4 <chip_info_get+0x1cc>)
 800c6a4:	609a      	str	r2, [r3, #8]
 800c6a6:	e01a      	b.n	800c6de <chip_info_get+0xf6>
            else if(val == HAL_CHIPID_B3_PLUS)pinfo->chip_module = ic_module_b3_plus;
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	4a43      	ldr	r2, [pc, #268]	; (800c7b8 <chip_info_get+0x1d0>)
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	d103      	bne.n	800c6b8 <chip_info_get+0xd0>
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	4a41      	ldr	r2, [pc, #260]	; (800c7b8 <chip_info_get+0x1d0>)
 800c6b4:	609a      	str	r2, [r3, #8]
 800c6b6:	e012      	b.n	800c6de <chip_info_get+0xf6>
            else if(val == HAL_CHIPID_B2_PLUS)pinfo->chip_module = ic_module_b2_plus;
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	4a40      	ldr	r2, [pc, #256]	; (800c7bc <chip_info_get+0x1d4>)
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	d103      	bne.n	800c6c8 <chip_info_get+0xe0>
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	4a3e      	ldr	r2, [pc, #248]	; (800c7bc <chip_info_get+0x1d4>)
 800c6c4:	609a      	str	r2, [r3, #8]
 800c6c6:	e00a      	b.n	800c6de <chip_info_get+0xf6>
            else if(val == HAL_CHIPID_E1)pinfo->chip_module = ic_module_e1;
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	4a3d      	ldr	r2, [pc, #244]	; (800c7c0 <chip_info_get+0x1d8>)
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d103      	bne.n	800c6d8 <chip_info_get+0xf0>
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	4a3b      	ldr	r2, [pc, #236]	; (800c7c0 <chip_info_get+0x1d8>)
 800c6d4:	609a      	str	r2, [r3, #8]
 800c6d6:	e002      	b.n	800c6de <chip_info_get+0xf6>
            else nres = vatek_hwfail;
 800c6d8:	f06f 0305 	mvn.w	r3, #5
 800c6dc:	617b      	str	r3, [r7, #20]

            if(is_vatek_success(nres))
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	db28      	blt.n	800c736 <chip_info_get+0x14e>
            {
                nres = readhal(HALREG_SERVICE_MODE, &val);
 800c6e4:	f107 0308 	add.w	r3, r7, #8
 800c6e8:	461a      	mov	r2, r3
 800c6ea:	2126      	movs	r1, #38	; 0x26
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f7ff f886 	bl	800b7fe <vatek_chip_read_memory>
 800c6f2:	6178      	str	r0, [r7, #20]
                if (is_vatek_success(nres))
 800c6f4:	697b      	ldr	r3, [r7, #20]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	db1d      	blt.n	800c736 <chip_info_get+0x14e>
                {
                    pinfo->hal_service = service_unknown;
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	60da      	str	r2, [r3, #12]
                    if (val == SERVICE_TAG_RESCUE)pinfo->hal_service = service_rescue;
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	4a30      	ldr	r2, [pc, #192]	; (800c7c4 <chip_info_get+0x1dc>)
 800c704:	4293      	cmp	r3, r2
 800c706:	d103      	bne.n	800c710 <chip_info_get+0x128>
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	4a2e      	ldr	r2, [pc, #184]	; (800c7c4 <chip_info_get+0x1dc>)
 800c70c:	60da      	str	r2, [r3, #12]
 800c70e:	e012      	b.n	800c736 <chip_info_get+0x14e>
                    else if (val == SERVICE_TAG_BROADCAST)pinfo->hal_service = service_broadcast;
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	4a2d      	ldr	r2, [pc, #180]	; (800c7c8 <chip_info_get+0x1e0>)
 800c714:	4293      	cmp	r3, r2
 800c716:	d103      	bne.n	800c720 <chip_info_get+0x138>
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	4a2b      	ldr	r2, [pc, #172]	; (800c7c8 <chip_info_get+0x1e0>)
 800c71c:	60da      	str	r2, [r3, #12]
 800c71e:	e00a      	b.n	800c736 <chip_info_get+0x14e>
                    else if (val == SERVICE_TAG_TRANSFORM)pinfo->hal_service = service_transform;
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	4a2a      	ldr	r2, [pc, #168]	; (800c7cc <chip_info_get+0x1e4>)
 800c724:	4293      	cmp	r3, r2
 800c726:	d103      	bne.n	800c730 <chip_info_get+0x148>
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	4a28      	ldr	r2, [pc, #160]	; (800c7cc <chip_info_get+0x1e4>)
 800c72c:	60da      	str	r2, [r3, #12]
 800c72e:	e002      	b.n	800c736 <chip_info_get+0x14e>
                    else nres = vatek_hwfail;
 800c730:	f06f 0305 	mvn.w	r3, #5
 800c734:	617b      	str	r3, [r7, #20]
                }
            }

            if(is_vatek_success(nres))
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	db25      	blt.n	800c788 <chip_info_get+0x1a0>
            {
                nres = readhal(HALREG_FW_VER, &pinfo->version);
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	3310      	adds	r3, #16
 800c740:	461a      	mov	r2, r3
 800c742:	2125      	movs	r1, #37	; 0x25
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f7ff f85a 	bl	800b7fe <vatek_chip_read_memory>
 800c74a:	6178      	str	r0, [r7, #20]
                if (is_vatek_success(nres))readhal(HALREG_PERIPHERAL_EN, &pinfo->peripheral_en);
 800c74c:	697b      	ldr	r3, [r7, #20]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	db06      	blt.n	800c760 <chip_info_get+0x178>
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	3314      	adds	r3, #20
 800c756:	461a      	mov	r2, r3
 800c758:	2127      	movs	r1, #39	; 0x27
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f7ff f84f 	bl	800b7fe <vatek_chip_read_memory>
                if (is_vatek_success(nres))readhal(HALREG_INPUT_SUPPORT, &pinfo->input_support);
 800c760:	697b      	ldr	r3, [r7, #20]
 800c762:	2b00      	cmp	r3, #0
 800c764:	db06      	blt.n	800c774 <chip_info_get+0x18c>
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	3318      	adds	r3, #24
 800c76a:	461a      	mov	r2, r3
 800c76c:	2128      	movs	r1, #40	; 0x28
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f7ff f845 	bl	800b7fe <vatek_chip_read_memory>
                if (is_vatek_success(nres))readhal(HALREG_OUTPUT_SUPPORT, &pinfo->output_support);
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	2b00      	cmp	r3, #0
 800c778:	db06      	blt.n	800c788 <chip_info_get+0x1a0>
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	331c      	adds	r3, #28
 800c77e:	461a      	mov	r2, r3
 800c780:	2129      	movs	r1, #41	; 0x29
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f7ff f83b 	bl	800b7fe <vatek_chip_read_memory>
            }
        }
    }

    if(!is_vatek_success(nres))
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	da02      	bge.n	800c794 <chip_info_get+0x1ac>
        pinfo->status = chip_status_fail_hw;
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	22fd      	movs	r2, #253	; 0xfd
 800c792:	701a      	strb	r2, [r3, #0]
	return nres;
 800c794:	697b      	ldr	r3, [r7, #20]
}
 800c796:	4618      	mov	r0, r3
 800c798:	3718      	adds	r7, #24
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd80      	pop	{r7, pc}
 800c79e:	bf00      	nop
 800c7a0:	00ffff00 	.word	0x00ffff00
 800c7a4:	00010100 	.word	0x00010100
 800c7a8:	00010300 	.word	0x00010300
 800c7ac:	00020100 	.word	0x00020100
 800c7b0:	00020200 	.word	0x00020200
 800c7b4:	00020300 	.word	0x00020300
 800c7b8:	00020301 	.word	0x00020301
 800c7bc:	00020201 	.word	0x00020201
 800c7c0:	00040300 	.word	0x00040300
 800c7c4:	ff000001 	.word	0xff000001
 800c7c8:	f8000001 	.word	0xf8000001
 800c7cc:	f8000002 	.word	0xf8000002

0800c7d0 <stm32_core_init>:
static SPI_HandleTypeDef* stm32_main_spi = NULL;
static Pstm32_hw_ip stm32_main_gpio = NULL;
static sextram_handle stm32_main_extram = {NULL,0,};

vatek_result stm32_core_init(UART_HandleTypeDef* uart)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b086      	sub	sp, #24
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
    vatek_result nres = vatek_badstatus;
 800c7d8:	f06f 0304 	mvn.w	r3, #4
 800c7dc:	617b      	str	r3, [r7, #20]
    if(stm32_sys_uart != NULL)_S_ERR("stm32_core already initialied");
 800c7de:	4b3f      	ldr	r3, [pc, #252]	; (800c8dc <stm32_core_init+0x10c>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d175      	bne.n	800c8d2 <stm32_core_init+0x102>
    else
    {
        Pstm32_hw_ip boards = STM32_BOARD_GET;
 800c7e6:	4b3e      	ldr	r3, [pc, #248]	; (800c8e0 <stm32_core_init+0x110>)
 800c7e8:	60fb      	str	r3, [r7, #12]
        int32_t i = 0;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	613b      	str	r3, [r7, #16]
        stm32_sys_uart = uart;
 800c7ee:	4a3b      	ldr	r2, [pc, #236]	; (800c8dc <stm32_core_init+0x10c>)
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	6013      	str	r3, [r2, #0]
        while(boards[i].ip != stm32_ip_unknown)
 800c7f4:	e064      	b.n	800c8c0 <stm32_core_init+0xf0>
        {
            if(boards[i].ip == stm32_ip_i2c)stm32_main_i2c = (I2C_HandleTypeDef*)boards[i].handle;
 800c7f6:	693b      	ldr	r3, [r7, #16]
 800c7f8:	011b      	lsls	r3, r3, #4
 800c7fa:	68fa      	ldr	r2, [r7, #12]
 800c7fc:	4413      	add	r3, r2
 800c7fe:	781b      	ldrb	r3, [r3, #0]
 800c800:	2b01      	cmp	r3, #1
 800c802:	d107      	bne.n	800c814 <stm32_core_init+0x44>
 800c804:	693b      	ldr	r3, [r7, #16]
 800c806:	011b      	lsls	r3, r3, #4
 800c808:	68fa      	ldr	r2, [r7, #12]
 800c80a:	4413      	add	r3, r2
 800c80c:	68db      	ldr	r3, [r3, #12]
 800c80e:	4a35      	ldr	r2, [pc, #212]	; (800c8e4 <stm32_core_init+0x114>)
 800c810:	6013      	str	r3, [r2, #0]
 800c812:	e03e      	b.n	800c892 <stm32_core_init+0xc2>
            else if(boards[i].ip == stm32_ip_uart)stm32_main_uart = (UART_HandleTypeDef*)boards[i].handle;
 800c814:	693b      	ldr	r3, [r7, #16]
 800c816:	011b      	lsls	r3, r3, #4
 800c818:	68fa      	ldr	r2, [r7, #12]
 800c81a:	4413      	add	r3, r2
 800c81c:	781b      	ldrb	r3, [r3, #0]
 800c81e:	2b02      	cmp	r3, #2
 800c820:	d107      	bne.n	800c832 <stm32_core_init+0x62>
 800c822:	693b      	ldr	r3, [r7, #16]
 800c824:	011b      	lsls	r3, r3, #4
 800c826:	68fa      	ldr	r2, [r7, #12]
 800c828:	4413      	add	r3, r2
 800c82a:	68db      	ldr	r3, [r3, #12]
 800c82c:	4a2e      	ldr	r2, [pc, #184]	; (800c8e8 <stm32_core_init+0x118>)
 800c82e:	6013      	str	r3, [r2, #0]
 800c830:	e02f      	b.n	800c892 <stm32_core_init+0xc2>
            else if(boards[i].ip == stm32_ip_spi)stm32_main_spi = (SPI_HandleTypeDef*)boards[i].handle;
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	011b      	lsls	r3, r3, #4
 800c836:	68fa      	ldr	r2, [r7, #12]
 800c838:	4413      	add	r3, r2
 800c83a:	781b      	ldrb	r3, [r3, #0]
 800c83c:	2b03      	cmp	r3, #3
 800c83e:	d107      	bne.n	800c850 <stm32_core_init+0x80>
 800c840:	693b      	ldr	r3, [r7, #16]
 800c842:	011b      	lsls	r3, r3, #4
 800c844:	68fa      	ldr	r2, [r7, #12]
 800c846:	4413      	add	r3, r2
 800c848:	68db      	ldr	r3, [r3, #12]
 800c84a:	4a28      	ldr	r2, [pc, #160]	; (800c8ec <stm32_core_init+0x11c>)
 800c84c:	6013      	str	r3, [r2, #0]
 800c84e:	e020      	b.n	800c892 <stm32_core_init+0xc2>
            else if(boards[i].ip == stm32_ip_gpio)stm32_main_gpio = (Pstm32_hw_ip)&boards[i];
 800c850:	693b      	ldr	r3, [r7, #16]
 800c852:	011b      	lsls	r3, r3, #4
 800c854:	68fa      	ldr	r2, [r7, #12]
 800c856:	4413      	add	r3, r2
 800c858:	781b      	ldrb	r3, [r3, #0]
 800c85a:	2b04      	cmp	r3, #4
 800c85c:	d106      	bne.n	800c86c <stm32_core_init+0x9c>
 800c85e:	693b      	ldr	r3, [r7, #16]
 800c860:	011b      	lsls	r3, r3, #4
 800c862:	68fa      	ldr	r2, [r7, #12]
 800c864:	4413      	add	r3, r2
 800c866:	4a22      	ldr	r2, [pc, #136]	; (800c8f0 <stm32_core_init+0x120>)
 800c868:	6013      	str	r3, [r2, #0]
 800c86a:	e012      	b.n	800c892 <stm32_core_init+0xc2>
			else if(boards[i].ip == stm32_ip_extram)
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	011b      	lsls	r3, r3, #4
 800c870:	68fa      	ldr	r2, [r7, #12]
 800c872:	4413      	add	r3, r2
 800c874:	781b      	ldrb	r3, [r3, #0]
 800c876:	2b09      	cmp	r3, #9
 800c878:	d10b      	bne.n	800c892 <stm32_core_init+0xc2>
			{
				Pstm32_ext_ram pextram = (Pstm32_ext_ram)boards[i].pins;
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	011b      	lsls	r3, r3, #4
 800c87e:	68fa      	ldr	r2, [r7, #12]
 800c880:	4413      	add	r3, r2
 800c882:	689b      	ldr	r3, [r3, #8]
 800c884:	60bb      	str	r3, [r7, #8]
				stm32_main_extram.ext_ram= pextram;
 800c886:	4a1b      	ldr	r2, [pc, #108]	; (800c8f4 <stm32_core_init+0x124>)
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	6013      	str	r3, [r2, #0]
				stm32_main_extram.pos = 0;
 800c88c:	4b19      	ldr	r3, [pc, #100]	; (800c8f4 <stm32_core_init+0x124>)
 800c88e:	2200      	movs	r2, #0
 800c890:	605a      	str	r2, [r3, #4]
			}
            if(boards[i].ip != stm32_ip_bridge_usb && boards[i].init != NULL)boards[i].init();
 800c892:	693b      	ldr	r3, [r7, #16]
 800c894:	011b      	lsls	r3, r3, #4
 800c896:	68fa      	ldr	r2, [r7, #12]
 800c898:	4413      	add	r3, r2
 800c89a:	781b      	ldrb	r3, [r3, #0]
 800c89c:	2b07      	cmp	r3, #7
 800c89e:	d00c      	beq.n	800c8ba <stm32_core_init+0xea>
 800c8a0:	693b      	ldr	r3, [r7, #16]
 800c8a2:	011b      	lsls	r3, r3, #4
 800c8a4:	68fa      	ldr	r2, [r7, #12]
 800c8a6:	4413      	add	r3, r2
 800c8a8:	685b      	ldr	r3, [r3, #4]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d005      	beq.n	800c8ba <stm32_core_init+0xea>
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	011b      	lsls	r3, r3, #4
 800c8b2:	68fa      	ldr	r2, [r7, #12]
 800c8b4:	4413      	add	r3, r2
 800c8b6:	685b      	ldr	r3, [r3, #4]
 800c8b8:	4798      	blx	r3
            i++;
 800c8ba:	693b      	ldr	r3, [r7, #16]
 800c8bc:	3301      	adds	r3, #1
 800c8be:	613b      	str	r3, [r7, #16]
        while(boards[i].ip != stm32_ip_unknown)
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	011b      	lsls	r3, r3, #4
 800c8c4:	68fa      	ldr	r2, [r7, #12]
 800c8c6:	4413      	add	r3, r2
 800c8c8:	781b      	ldrb	r3, [r3, #0]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d193      	bne.n	800c7f6 <stm32_core_init+0x26>
        }
        nres = vatek_success; 
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	617b      	str	r3, [r7, #20]
    }
    
    return nres;   
 800c8d2:	697b      	ldr	r3, [r7, #20]
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	3718      	adds	r7, #24
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}
 800c8dc:	20000ac8 	.word	0x20000ac8
 800c8e0:	080100d8 	.word	0x080100d8
 800c8e4:	20000ad0 	.word	0x20000ad0
 800c8e8:	20000acc 	.word	0x20000acc
 800c8ec:	20000ad4 	.word	0x20000ad4
 800c8f0:	20000ad8 	.word	0x20000ad8
 800c8f4:	20000adc 	.word	0x20000adc

0800c8f8 <stm32_core_main_i2c_check_device>:
	}else _S_ERR("not support extend ram");
}
#endif

vatek_result stm32_core_main_i2c_check_device(uint8_t devaddr)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b084      	sub	sp, #16
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	4603      	mov	r3, r0
 800c900:	71fb      	strb	r3, [r7, #7]
    vatek_result nres = vatek_badstatus;
 800c902:	f06f 0304 	mvn.w	r3, #4
 800c906:	60fb      	str	r3, [r7, #12]
    if(stm32_main_i2c != NULL)
 800c908:	4b0d      	ldr	r3, [pc, #52]	; (800c940 <stm32_core_main_i2c_check_device+0x48>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d012      	beq.n	800c936 <stm32_core_main_i2c_check_device+0x3e>
    {
        HAL_StatusTypeDef sres = HAL_I2C_IsDeviceReady(stm32_main_i2c,devaddr,STM32_I2C_CHECK_RETRY,STM32_I2C_CHECK_TIMEOUT);
 800c910:	4b0b      	ldr	r3, [pc, #44]	; (800c940 <stm32_core_main_i2c_check_device+0x48>)
 800c912:	6818      	ldr	r0, [r3, #0]
 800c914:	79fb      	ldrb	r3, [r7, #7]
 800c916:	b299      	uxth	r1, r3
 800c918:	2302      	movs	r3, #2
 800c91a:	2202      	movs	r2, #2
 800c91c:	f7f5 f96c 	bl	8001bf8 <HAL_I2C_IsDeviceReady>
 800c920:	4603      	mov	r3, r0
 800c922:	72fb      	strb	r3, [r7, #11]
        if(sres == HAL_OK)nres = vatek_success;
 800c924:	7afb      	ldrb	r3, [r7, #11]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d102      	bne.n	800c930 <stm32_core_main_i2c_check_device+0x38>
 800c92a:	2300      	movs	r3, #0
 800c92c:	60fb      	str	r3, [r7, #12]
 800c92e:	e002      	b.n	800c936 <stm32_core_main_i2c_check_device+0x3e>
        else nres = vatek_unsupport;
 800c930:	f06f 0301 	mvn.w	r3, #1
 800c934:	60fb      	str	r3, [r7, #12]
    }
    return nres;
 800c936:	68fb      	ldr	r3, [r7, #12]
}
 800c938:	4618      	mov	r0, r3
 800c93a:	3710      	adds	r7, #16
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}
 800c940:	20000ad0 	.word	0x20000ad0

0800c944 <stm32_core_get_main_i2c>:

Pstm32_i2c stm32_core_get_main_i2c(void)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b082      	sub	sp, #8
 800c948:	af00      	add	r7, sp, #0
    static Pstm32_i2c main_i2c = NULL;
    if(main_i2c == NULL && stm32_main_i2c != NULL)
 800c94a:	4b0a      	ldr	r3, [pc, #40]	; (800c974 <stm32_core_get_main_i2c+0x30>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d10a      	bne.n	800c968 <stm32_core_get_main_i2c+0x24>
 800c952:	4b09      	ldr	r3, [pc, #36]	; (800c978 <stm32_core_get_main_i2c+0x34>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d006      	beq.n	800c968 <stm32_core_get_main_i2c+0x24>
    {
        vatek_result nres = stm32_core_create_i2c(stm32_main_i2c,&main_i2c);
 800c95a:	4b07      	ldr	r3, [pc, #28]	; (800c978 <stm32_core_get_main_i2c+0x34>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	4905      	ldr	r1, [pc, #20]	; (800c974 <stm32_core_get_main_i2c+0x30>)
 800c960:	4618      	mov	r0, r3
 800c962:	f000 f8f9 	bl	800cb58 <stm32_core_create_i2c>
 800c966:	6078      	str	r0, [r7, #4]
        if(!is_vatek_success(nres))_S_ERR("create i2c driver fail");
    }
    return main_i2c;
 800c968:	4b02      	ldr	r3, [pc, #8]	; (800c974 <stm32_core_get_main_i2c+0x30>)
 800c96a:	681b      	ldr	r3, [r3, #0]
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	3708      	adds	r7, #8
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}
 800c974:	20000ae4 	.word	0x20000ae4
 800c978:	20000ad0 	.word	0x20000ad0

0800c97c <stm32_internal_get_main_gpio_ip>:
    }
    return main_uart;
}

Pstm32_hw_ip stm32_internal_get_main_gpio_ip(void)
{
 800c97c:	b480      	push	{r7}
 800c97e:	af00      	add	r7, sp, #0
    return stm32_main_gpio;
 800c980:	4b03      	ldr	r3, [pc, #12]	; (800c990 <stm32_internal_get_main_gpio_ip+0x14>)
 800c982:	681b      	ldr	r3, [r3, #0]
}
 800c984:	4618      	mov	r0, r3
 800c986:	46bd      	mov	sp, r7
 800c988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98c:	4770      	bx	lr
 800c98e:	bf00      	nop
 800c990:	20000ad8 	.word	0x20000ad8

0800c994 <stm32_core_get_hwip>:

Pstm32_hw_ip stm32_core_get_hwip(stm32_ip_type type)
{
 800c994:	b480      	push	{r7}
 800c996:	b085      	sub	sp, #20
 800c998:	af00      	add	r7, sp, #0
 800c99a:	4603      	mov	r3, r0
 800c99c:	71fb      	strb	r3, [r7, #7]
    Pstm32_hw_ip boards = STM32_BOARD_GET;
 800c99e:	4b11      	ldr	r3, [pc, #68]	; (800c9e4 <stm32_core_get_hwip+0x50>)
 800c9a0:	60bb      	str	r3, [r7, #8]
    int32_t i = 0;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	60fb      	str	r3, [r7, #12]
    while(boards[i].ip != stm32_ip_unknown)
 800c9a6:	e00f      	b.n	800c9c8 <stm32_core_get_hwip+0x34>
    {
        if(boards[i].ip == type)return &boards[i];
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	011b      	lsls	r3, r3, #4
 800c9ac:	68ba      	ldr	r2, [r7, #8]
 800c9ae:	4413      	add	r3, r2
 800c9b0:	781b      	ldrb	r3, [r3, #0]
 800c9b2:	79fa      	ldrb	r2, [r7, #7]
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	d104      	bne.n	800c9c2 <stm32_core_get_hwip+0x2e>
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	011b      	lsls	r3, r3, #4
 800c9bc:	68ba      	ldr	r2, [r7, #8]
 800c9be:	4413      	add	r3, r2
 800c9c0:	e00a      	b.n	800c9d8 <stm32_core_get_hwip+0x44>
        i++;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	3301      	adds	r3, #1
 800c9c6:	60fb      	str	r3, [r7, #12]
    while(boards[i].ip != stm32_ip_unknown)
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	011b      	lsls	r3, r3, #4
 800c9cc:	68ba      	ldr	r2, [r7, #8]
 800c9ce:	4413      	add	r3, r2
 800c9d0:	781b      	ldrb	r3, [r3, #0]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d1e8      	bne.n	800c9a8 <stm32_core_get_hwip+0x14>
    }
    return NULL;
 800c9d6:	2300      	movs	r3, #0
}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	3714      	adds	r7, #20
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e2:	4770      	bx	lr
 800c9e4:	080100d8 	.word	0x080100d8

0800c9e8 <__io_putchar>:
}

#ifdef __GNUC__

int __io_putchar(int ch)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b084      	sub	sp, #16
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
	uint8_t temp[1]={ch};
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	b2db      	uxtb	r3, r3
 800c9f4:	733b      	strb	r3, [r7, #12]
	if(stm32_sys_uart == NULL)return -1;
 800c9f6:	4b0a      	ldr	r3, [pc, #40]	; (800ca20 <__io_putchar+0x38>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d102      	bne.n	800ca04 <__io_putchar+0x1c>
 800c9fe:	f04f 33ff 	mov.w	r3, #4294967295
 800ca02:	e008      	b.n	800ca16 <__io_putchar+0x2e>
	HAL_UART_Transmit(stm32_sys_uart,temp,1,DEBUG_OUTPUT_TIMEOUT);
 800ca04:	4b06      	ldr	r3, [pc, #24]	; (800ca20 <__io_putchar+0x38>)
 800ca06:	6818      	ldr	r0, [r3, #0]
 800ca08:	f107 010c 	add.w	r1, r7, #12
 800ca0c:	23c8      	movs	r3, #200	; 0xc8
 800ca0e:	2201      	movs	r2, #1
 800ca10:	f7f7 fc10 	bl	8004234 <HAL_UART_Transmit>
	return ch;
 800ca14:	687b      	ldr	r3, [r7, #4]
}
 800ca16:	4618      	mov	r0, r3
 800ca18:	3710      	adds	r7, #16
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}
 800ca1e:	bf00      	nop
 800ca20:	20000ac8 	.word	0x20000ac8

0800ca24 <__io_getchar>:

int __io_getchar (void)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b082      	sub	sp, #8
 800ca28:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	71bb      	strb	r3, [r7, #6]
	if(stm32_sys_uart != NULL)
 800ca2e:	4b0c      	ldr	r3, [pc, #48]	; (800ca60 <__io_getchar+0x3c>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d00d      	beq.n	800ca52 <__io_getchar+0x2e>
	{
		HAL_StatusTypeDef nres = HAL_UART_Receive(stm32_sys_uart,&temp,1,DEBUG_OUTPUT_TIMEOUT);
 800ca36:	4b0a      	ldr	r3, [pc, #40]	; (800ca60 <__io_getchar+0x3c>)
 800ca38:	6818      	ldr	r0, [r3, #0]
 800ca3a:	1db9      	adds	r1, r7, #6
 800ca3c:	23c8      	movs	r3, #200	; 0xc8
 800ca3e:	2201      	movs	r2, #1
 800ca40:	f7f7 fc8a 	bl	8004358 <HAL_UART_Receive>
 800ca44:	4603      	mov	r3, r0
 800ca46:	71fb      	strb	r3, [r7, #7]
		if(nres == HAL_OK)return temp;
 800ca48:	79fb      	ldrb	r3, [r7, #7]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d101      	bne.n	800ca52 <__io_getchar+0x2e>
 800ca4e:	79bb      	ldrb	r3, [r7, #6]
 800ca50:	e001      	b.n	800ca56 <__io_getchar+0x32>
	}
	return -1;
 800ca52:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3708      	adds	r7, #8
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}
 800ca5e:	bf00      	nop
 800ca60:	20000ac8 	.word	0x20000ac8

0800ca64 <stm32_core_get_pin>:
#include <stm32_core.h>
#include "inc/stm32_internal.h"

Pstm32_pin stm32_core_get_pin(hhal_pin pin)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b084      	sub	sp, #16
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
    Pstm32_hw_ip phwpins = stm32_internal_get_main_gpio_ip();
 800ca6c:	f7ff ff86 	bl	800c97c <stm32_internal_get_main_gpio_ip>
 800ca70:	60b8      	str	r0, [r7, #8]
    if(phwpins)
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d01d      	beq.n	800cab4 <stm32_core_get_pin+0x50>
    {
        int32_t i = 0;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	60fb      	str	r3, [r7, #12]
        while(phwpins->pins[i].port)
 800ca7c:	e012      	b.n	800caa4 <stm32_core_get_pin+0x40>
        {
            if(phwpins->pins[i].map == pin)
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	689a      	ldr	r2, [r3, #8]
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	00db      	lsls	r3, r3, #3
 800ca86:	4413      	add	r3, r2
 800ca88:	88db      	ldrh	r3, [r3, #6]
 800ca8a:	461a      	mov	r2, r3
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	4293      	cmp	r3, r2
 800ca90:	d105      	bne.n	800ca9e <stm32_core_get_pin+0x3a>
                return (Pstm32_pin)&phwpins->pins[i];
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	689a      	ldr	r2, [r3, #8]
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	00db      	lsls	r3, r3, #3
 800ca9a:	4413      	add	r3, r2
 800ca9c:	e00b      	b.n	800cab6 <stm32_core_get_pin+0x52>
			i++;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	3301      	adds	r3, #1
 800caa2:	60fb      	str	r3, [r7, #12]
        while(phwpins->pins[i].port)
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	689a      	ldr	r2, [r3, #8]
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	00db      	lsls	r3, r3, #3
 800caac:	4413      	add	r3, r2
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d1e4      	bne.n	800ca7e <stm32_core_get_pin+0x1a>
        }
    }
    return NULL;
 800cab4:	2300      	movs	r3, #0
}
 800cab6:	4618      	mov	r0, r3
 800cab8:	3710      	adds	r7, #16
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}

0800cabe <stm32_core_pin_config>:

vatek_result stm32_core_pin_config(Pstm32_pin spin,hal_gpio_mode mode,int32_t isset)
{
 800cabe:	b580      	push	{r7, lr}
 800cac0:	b08a      	sub	sp, #40	; 0x28
 800cac2:	af00      	add	r7, sp, #0
 800cac4:	60f8      	str	r0, [r7, #12]
 800cac6:	460b      	mov	r3, r1
 800cac8:	607a      	str	r2, [r7, #4]
 800caca:	72fb      	strb	r3, [r7, #11]
    GPIO_InitTypeDef gpio;
    gpio.Pin = spin->index;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	889b      	ldrh	r3, [r3, #4]
 800cad0:	617b      	str	r3, [r7, #20]
    gpio.Pull = GPIO_NOPULL;
 800cad2:	2300      	movs	r3, #0
 800cad4:	61fb      	str	r3, [r7, #28]
    gpio.Speed = GPIO_SPEED_LOW;
 800cad6:	2300      	movs	r3, #0
 800cad8:	623b      	str	r3, [r7, #32]
    if(mode == hal_gpio_output)gpio.Mode = GPIO_MODE_OUTPUT_OD;
 800cada:	7afb      	ldrb	r3, [r7, #11]
 800cadc:	2b01      	cmp	r3, #1
 800cade:	d102      	bne.n	800cae6 <stm32_core_pin_config+0x28>
 800cae0:	2311      	movs	r3, #17
 800cae2:	61bb      	str	r3, [r7, #24]
 800cae4:	e009      	b.n	800cafa <stm32_core_pin_config+0x3c>
    else if(mode == hal_gpio_output_pp)gpio.Mode = GPIO_MODE_OUTPUT_PP;
 800cae6:	7afb      	ldrb	r3, [r7, #11]
 800cae8:	2b02      	cmp	r3, #2
 800caea:	d102      	bne.n	800caf2 <stm32_core_pin_config+0x34>
 800caec:	2301      	movs	r3, #1
 800caee:	61bb      	str	r3, [r7, #24]
 800caf0:	e003      	b.n	800cafa <stm32_core_pin_config+0x3c>
    else 
    {
        gpio.Mode = GPIO_MODE_INPUT;
 800caf2:	2300      	movs	r3, #0
 800caf4:	61bb      	str	r3, [r7, #24]
        gpio.Pull = GPIO_PULLUP;
 800caf6:	2301      	movs	r3, #1
 800caf8:	61fb      	str	r3, [r7, #28]
    }
    HAL_GPIO_Init(spin->port, &gpio);
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	f107 0214 	add.w	r2, r7, #20
 800cb02:	4611      	mov	r1, r2
 800cb04:	4618      	mov	r0, r3
 800cb06:	f7f4 fbe5 	bl	80012d4 <HAL_GPIO_Init>
    return stm32_core_pin_set_status(spin,isset);
 800cb0a:	6879      	ldr	r1, [r7, #4]
 800cb0c:	68f8      	ldr	r0, [r7, #12]
 800cb0e:	f000 f805 	bl	800cb1c <stm32_core_pin_set_status>
 800cb12:	4603      	mov	r3, r0
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	3728      	adds	r7, #40	; 0x28
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}

0800cb1c <stm32_core_pin_set_status>:

vatek_result stm32_core_pin_set_status(Pstm32_pin spin,int32_t isset)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b082      	sub	sp, #8
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
 800cb24:	6039      	str	r1, [r7, #0]
    if(isset)HAL_GPIO_WritePin(spin->port,spin->index,GPIO_PIN_SET);
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d008      	beq.n	800cb3e <stm32_core_pin_set_status+0x22>
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6818      	ldr	r0, [r3, #0]
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	889b      	ldrh	r3, [r3, #4]
 800cb34:	2201      	movs	r2, #1
 800cb36:	4619      	mov	r1, r3
 800cb38:	f7f4 fe60 	bl	80017fc <HAL_GPIO_WritePin>
 800cb3c:	e007      	b.n	800cb4e <stm32_core_pin_set_status+0x32>
    else HAL_GPIO_WritePin(spin->port,spin->index,GPIO_PIN_RESET);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6818      	ldr	r0, [r3, #0]
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	889b      	ldrh	r3, [r3, #4]
 800cb46:	2200      	movs	r2, #0
 800cb48:	4619      	mov	r1, r3
 800cb4a:	f7f4 fe57 	bl	80017fc <HAL_GPIO_WritePin>
    return vatek_success;
 800cb4e:	2300      	movs	r3, #0
}
 800cb50:	4618      	mov	r0, r3
 800cb52:	3708      	adds	r7, #8
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bd80      	pop	{r7, pc}

0800cb58 <stm32_core_create_i2c>:
extern vatek_result stmi2c_write(hstm32_i2c hi2c,const uint8_t* pbuf, int32_t len);
extern vatek_result stmi2c_read(hstm32_i2c hi2c, uint8_t* pbuf, int32_t len);
extern vatek_result stmi2c_stop(hstm32_i2c hi2c);

vatek_result stm32_core_create_i2c(I2C_HandleTypeDef* i2c,Pstm32_i2c* pi2cdrv)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b084      	sub	sp, #16
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
 800cb60:	6039      	str	r1, [r7, #0]
    Pstm32_i2c newi2c = (Pstm32_i2c)malloc(sizeof(stm32_i2c));
 800cb62:	2018      	movs	r0, #24
 800cb64:	f001 f9cc 	bl	800df00 <malloc>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	60bb      	str	r3, [r7, #8]
    vatek_result nres = vatek_memfail;
 800cb6c:	f06f 030a 	mvn.w	r3, #10
 800cb70:	60fb      	str	r3, [r7, #12]
    if(newi2c != NULL)
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d01b      	beq.n	800cbb0 <stm32_core_create_i2c+0x58>
    {
        memset(newi2c,0,sizeof(stm32_i2c));
 800cb78:	2218      	movs	r2, #24
 800cb7a:	2100      	movs	r1, #0
 800cb7c:	68b8      	ldr	r0, [r7, #8]
 800cb7e:	f001 f9dd 	bl	800df3c <memset>
        newi2c->hi2c = i2c;
 800cb82:	68bb      	ldr	r3, [r7, #8]
 800cb84:	687a      	ldr	r2, [r7, #4]
 800cb86:	601a      	str	r2, [r3, #0]
        newi2c->set_speed = stmi2c_set_speed;
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	4a0c      	ldr	r2, [pc, #48]	; (800cbbc <stm32_core_create_i2c+0x64>)
 800cb8c:	605a      	str	r2, [r3, #4]
        newi2c->start = stmi2c_start;
 800cb8e:	68bb      	ldr	r3, [r7, #8]
 800cb90:	4a0b      	ldr	r2, [pc, #44]	; (800cbc0 <stm32_core_create_i2c+0x68>)
 800cb92:	609a      	str	r2, [r3, #8]
        newi2c->stop = stmi2c_stop;
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	4a0b      	ldr	r2, [pc, #44]	; (800cbc4 <stm32_core_create_i2c+0x6c>)
 800cb98:	615a      	str	r2, [r3, #20]
        newi2c->write = stmi2c_write;
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	4a0a      	ldr	r2, [pc, #40]	; (800cbc8 <stm32_core_create_i2c+0x70>)
 800cb9e:	60da      	str	r2, [r3, #12]
        newi2c->read = stmi2c_read;
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	4a0a      	ldr	r2, [pc, #40]	; (800cbcc <stm32_core_create_i2c+0x74>)
 800cba4:	611a      	str	r2, [r3, #16]
        *pi2cdrv = newi2c;
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	68ba      	ldr	r2, [r7, #8]
 800cbaa:	601a      	str	r2, [r3, #0]
        nres = vatek_success;
 800cbac:	2300      	movs	r3, #0
 800cbae:	60fb      	str	r3, [r7, #12]
    }
    return nres;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3710      	adds	r7, #16
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}
 800cbba:	bf00      	nop
 800cbbc:	0800cc77 	.word	0x0800cc77
 800cbc0:	0800cbd1 	.word	0x0800cbd1
 800cbc4:	0800cf79 	.word	0x0800cf79
 800cbc8:	0800cd1d 	.word	0x0800cd1d
 800cbcc:	0800cd99 	.word	0x0800cd99

0800cbd0 <stmi2c_start>:
extern vatek_result ll_i2c_check_busy(I2C_HandleTypeDef* hi2c,uint8_t lock);

extern vatek_result ll_i2c_set_device_address(hstm32_i2c hi2c,uint8_t devaddr,int32_t nwrite);

vatek_result stmi2c_start(hstm32_i2c hi2c, uint8_t devaddr,int32_t restart)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b088      	sub	sp, #32
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	60f8      	str	r0, [r7, #12]
 800cbd8:	460b      	mov	r3, r1
 800cbda:	607a      	str	r2, [r7, #4]
 800cbdc:	72fb      	strb	r3, [r7, #11]
    vatek_result nres = vatek_unknown;
 800cbde:	f04f 33ff 	mov.w	r3, #4294967295
 800cbe2:	61fb      	str	r3, [r7, #28]
    int32_t iswrite = !(devaddr & 1);
 800cbe4:	7afb      	ldrb	r3, [r7, #11]
 800cbe6:	f003 0301 	and.w	r3, r3, #1
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	bf0c      	ite	eq
 800cbee:	2301      	moveq	r3, #1
 800cbf0:	2300      	movne	r3, #0
 800cbf2:	b2db      	uxtb	r3, r3
 800cbf4:	61bb      	str	r3, [r7, #24]
    uint8_t addr = devaddr & 0xFE;
 800cbf6:	7afb      	ldrb	r3, [r7, #11]
 800cbf8:	f023 0301 	bic.w	r3, r3, #1
 800cbfc:	75fb      	strb	r3, [r7, #23]
    
	uint8_t is_lock_i2c = (restart)? 0:1;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	bf0c      	ite	eq
 800cc04:	2301      	moveq	r3, #1
 800cc06:	2300      	movne	r3, #0
 800cc08:	b2db      	uxtb	r3, r3
 800cc0a:	75bb      	strb	r3, [r7, #22]
    I2C_HandleTypeDef* si2c = (I2C_HandleTypeDef*)hi2c;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	613b      	str	r3, [r7, #16]
    
    nres = ll_i2c_check_busy(si2c, is_lock_i2c);
 800cc10:	7dbb      	ldrb	r3, [r7, #22]
 800cc12:	4619      	mov	r1, r3
 800cc14:	6938      	ldr	r0, [r7, #16]
 800cc16:	f000 fa3d 	bl	800d094 <ll_i2c_check_busy>
 800cc1a:	61f8      	str	r0, [r7, #28]
    if(is_vatek_success(nres))
 800cc1c:	69fb      	ldr	r3, [r7, #28]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	db1a      	blt.n	800cc58 <stmi2c_start+0x88>
    {
        if(!IS_CR1_FLAG_SET(si2c,I2C_CR1_PE))
 800cc22:	693b      	ldr	r3, [r7, #16]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f003 0301 	and.w	r3, r3, #1
 800cc2c:	2b01      	cmp	r3, #1
 800cc2e:	d007      	beq.n	800cc40 <stmi2c_start+0x70>
            CR1_FLAG_SET(si2c,I2C_CR1_PE);
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	681a      	ldr	r2, [r3, #0]
 800cc36:	693b      	ldr	r3, [r7, #16]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	f042 0201 	orr.w	r2, r2, #1
 800cc3e:	601a      	str	r2, [r3, #0]
        
        CR1_FLAG_CLR(si2c,I2C_CR1_POS);
 800cc40:	693b      	ldr	r3, [r7, #16]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	681a      	ldr	r2, [r3, #0]
 800cc46:	693b      	ldr	r3, [r7, #16]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cc4e:	601a      	str	r2, [r3, #0]
        nres = ll_i2c_send_start(si2c);
 800cc50:	6938      	ldr	r0, [r7, #16]
 800cc52:	f000 fa09 	bl	800d068 <ll_i2c_send_start>
 800cc56:	61f8      	str	r0, [r7, #28]
    }
    
    if(is_vatek_success(nres))
 800cc58:	69fb      	ldr	r3, [r7, #28]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	db06      	blt.n	800cc6c <stmi2c_start+0x9c>
    {
        nres = ll_i2c_set_device_address(hi2c,addr,iswrite);
 800cc5e:	7dfb      	ldrb	r3, [r7, #23]
 800cc60:	69ba      	ldr	r2, [r7, #24]
 800cc62:	4619      	mov	r1, r3
 800cc64:	68f8      	ldr	r0, [r7, #12]
 800cc66:	f000 f813 	bl	800cc90 <ll_i2c_set_device_address>
 800cc6a:	61f8      	str	r0, [r7, #28]
    }

    return nres;    
 800cc6c:	69fb      	ldr	r3, [r7, #28]
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3720      	adds	r7, #32
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}

0800cc76 <stmi2c_set_speed>:

vatek_result stmi2c_set_speed(hstm32_i2c hi2c, int32_t speedkhz)
{
 800cc76:	b480      	push	{r7}
 800cc78:	b083      	sub	sp, #12
 800cc7a:	af00      	add	r7, sp, #0
 800cc7c:	6078      	str	r0, [r7, #4]
 800cc7e:	6039      	str	r1, [r7, #0]
    return vatek_success;
 800cc80:	2300      	movs	r3, #0
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	370c      	adds	r7, #12
 800cc86:	46bd      	mov	sp, r7
 800cc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8c:	4770      	bx	lr
	...

0800cc90 <ll_i2c_set_device_address>:

vatek_result ll_i2c_set_device_address(hstm32_i2c hi2c,uint8_t devaddr,int32_t nwrite)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b088      	sub	sp, #32
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	60f8      	str	r0, [r7, #12]
 800cc98:	460b      	mov	r3, r1
 800cc9a:	607a      	str	r2, [r7, #4]
 800cc9c:	72fb      	strb	r3, [r7, #11]
    vatek_result nres = ll_i2c_wait_flag_set(hi2c,I2C_FLAG_SB);
 800cc9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800cca2:	68f8      	ldr	r0, [r7, #12]
 800cca4:	f000 f9d1 	bl	800d04a <ll_i2c_wait_flag_set>
 800cca8:	61f8      	str	r0, [r7, #28]
    I2C_HandleTypeDef* si2c = (I2C_HandleTypeDef*)hi2c;
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	61bb      	str	r3, [r7, #24]
    if(is_vatek_success(nres))
 800ccae:	69fb      	ldr	r3, [r7, #28]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	db15      	blt.n	800cce0 <ll_i2c_set_device_address+0x50>
    {
        if(nwrite)DR_SET(si2c,I2C_7BIT_ADD_WRITE(devaddr));
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d006      	beq.n	800ccc8 <ll_i2c_set_device_address+0x38>
 800ccba:	7afa      	ldrb	r2, [r7, #11]
 800ccbc:	69bb      	ldr	r3, [r7, #24]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ccc4:	611a      	str	r2, [r3, #16]
 800ccc6:	e006      	b.n	800ccd6 <ll_i2c_set_device_address+0x46>
        else DR_SET(si2c,I2C_7BIT_ADD_READ(devaddr));
 800ccc8:	7afb      	ldrb	r3, [r7, #11]
 800ccca:	f043 0301 	orr.w	r3, r3, #1
 800ccce:	b2da      	uxtb	r2, r3
 800ccd0:	69bb      	ldr	r3, [r7, #24]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	611a      	str	r2, [r3, #16]
        
        nres = ll_i2c_wait_flag_set(si2c,I2C_FLAG_ADDR);
 800ccd6:	4910      	ldr	r1, [pc, #64]	; (800cd18 <ll_i2c_set_device_address+0x88>)
 800ccd8:	69b8      	ldr	r0, [r7, #24]
 800ccda:	f000 f9b6 	bl	800d04a <ll_i2c_wait_flag_set>
 800ccde:	61f8      	str	r0, [r7, #28]
    }
    
    if(__HAL_I2C_GET_FLAG(si2c, I2C_FLAG_AF) == SET)
 800cce0:	69bb      	ldr	r3, [r7, #24]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	695b      	ldr	r3, [r3, #20]
 800cce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ccea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ccee:	d00e      	beq.n	800cd0e <ll_i2c_set_device_address+0x7e>
    {
        _S_ERR("I2C_FLAG_AF i2c stop");/* Generate Stop */
    }else{
		si2c->State = HAL_I2C_STATE_READY;
 800ccf0:	69bb      	ldr	r3, [r7, #24]
 800ccf2:	2220      	movs	r2, #32
 800ccf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(si2c); 	
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	617b      	str	r3, [r7, #20]
 800ccfc:	69bb      	ldr	r3, [r7, #24]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	695b      	ldr	r3, [r3, #20]
 800cd02:	617b      	str	r3, [r7, #20]
 800cd04:	69bb      	ldr	r3, [r7, #24]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	699b      	ldr	r3, [r3, #24]
 800cd0a:	617b      	str	r3, [r7, #20]
 800cd0c:	697b      	ldr	r3, [r7, #20]
		
	}
    return nres;    
 800cd0e:	69fb      	ldr	r3, [r7, #28]
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	3720      	adds	r7, #32
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}
 800cd18:	00010002 	.word	0x00010002

0800cd1c <stmi2c_write>:

vatek_result stmi2c_write(hstm32_i2c hi2c,const uint8_t* pbuf, int32_t len)
{   
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b086      	sub	sp, #24
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	60f8      	str	r0, [r7, #12]
 800cd24:	60b9      	str	r1, [r7, #8]
 800cd26:	607a      	str	r2, [r7, #4]
	vatek_result nres  = vatek_success;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	617b      	str	r3, [r7, #20]
    I2C_HandleTypeDef* si2c = (I2C_HandleTypeDef*)hi2c;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	613b      	str	r3, [r7, #16]
    if(is_vatek_success(nres))
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	db27      	blt.n	800cd86 <stmi2c_write+0x6a>
    {     
        while(len && is_vatek_success(nres))
 800cd36:	e016      	b.n	800cd66 <stmi2c_write+0x4a>
        {
            nres = ll_i2c_wait_flag_set(hi2c,I2C_FLAG_TXE);
 800cd38:	4915      	ldr	r1, [pc, #84]	; (800cd90 <stmi2c_write+0x74>)
 800cd3a:	68f8      	ldr	r0, [r7, #12]
 800cd3c:	f000 f985 	bl	800d04a <ll_i2c_wait_flag_set>
 800cd40:	6178      	str	r0, [r7, #20]
            if(is_vatek_success(nres))
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	db15      	blt.n	800cd74 <stmi2c_write+0x58>
            {                               
                DR_SET(si2c,*pbuf++);
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	1c5a      	adds	r2, r3, #1
 800cd4c:	60ba      	str	r2, [r7, #8]
 800cd4e:	781a      	ldrb	r2, [r3, #0]
 800cd50:	693b      	ldr	r3, [r7, #16]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	611a      	str	r2, [r3, #16]
                len--;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	3b01      	subs	r3, #1
 800cd5a:	607b      	str	r3, [r7, #4]
                nres = ll_i2c_wait_flag_set(hi2c,I2C_FLAG_BTF);
 800cd5c:	490d      	ldr	r1, [pc, #52]	; (800cd94 <stmi2c_write+0x78>)
 800cd5e:	68f8      	ldr	r0, [r7, #12]
 800cd60:	f000 f973 	bl	800d04a <ll_i2c_wait_flag_set>
 800cd64:	6178      	str	r0, [r7, #20]
        while(len && is_vatek_success(nres))
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d004      	beq.n	800cd76 <stmi2c_write+0x5a>
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	dae2      	bge.n	800cd38 <stmi2c_write+0x1c>
 800cd72:	e000      	b.n	800cd76 <stmi2c_write+0x5a>
            }else break;
 800cd74:	bf00      	nop
        }
        
        if(is_vatek_success(nres))nres = ll_i2c_wait_flag_set(si2c,I2C_FLAG_TXE);
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	db04      	blt.n	800cd86 <stmi2c_write+0x6a>
 800cd7c:	4904      	ldr	r1, [pc, #16]	; (800cd90 <stmi2c_write+0x74>)
 800cd7e:	6938      	ldr	r0, [r7, #16]
 800cd80:	f000 f963 	bl	800d04a <ll_i2c_wait_flag_set>
 800cd84:	6178      	str	r0, [r7, #20]
        else _S_LOG("stm32_ll_i2c_write fail : %d",nres);
    }
    return nres;    
 800cd86:	697b      	ldr	r3, [r7, #20]
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	3718      	adds	r7, #24
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}
 800cd90:	00010080 	.word	0x00010080
 800cd94:	00010004 	.word	0x00010004

0800cd98 <stmi2c_read>:

vatek_result stmi2c_read(hstm32_i2c hi2c, uint8_t* pbuf, int32_t len)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b088      	sub	sp, #32
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	60f8      	str	r0, [r7, #12]
 800cda0:	60b9      	str	r1, [r7, #8]
 800cda2:	607a      	str	r2, [r7, #4]
	vatek_result nres = vatek_success;
 800cda4:	2300      	movs	r3, #0
 800cda6:	61fb      	str	r3, [r7, #28]
    I2C_HandleTypeDef* si2c = (I2C_HandleTypeDef*)hi2c;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	61bb      	str	r3, [r7, #24]
    if(is_vatek_success(nres))
 800cdac:	69fb      	ldr	r3, [r7, #28]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	f2c0 80d9 	blt.w	800cf66 <stmi2c_read+0x1ce>
    {    
        if(len == 1)
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2b01      	cmp	r3, #1
 800cdb8:	d108      	bne.n	800cdcc <stmi2c_read+0x34>
        {
            CR1_FLAG_CLR(si2c,I2C_CR1_ACK);
 800cdba:	69bb      	ldr	r3, [r7, #24]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	681a      	ldr	r2, [r3, #0]
 800cdc0:	69bb      	ldr	r3, [r7, #24]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cdc8:	601a      	str	r2, [r3, #0]
 800cdca:	e01b      	b.n	800ce04 <stmi2c_read+0x6c>
        }else if(len == 2)
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2b02      	cmp	r3, #2
 800cdd0:	d110      	bne.n	800cdf4 <stmi2c_read+0x5c>
        {
            CR1_FLAG_CLR(si2c,I2C_CR1_ACK);
 800cdd2:	69bb      	ldr	r3, [r7, #24]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	681a      	ldr	r2, [r3, #0]
 800cdd8:	69bb      	ldr	r3, [r7, #24]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cde0:	601a      	str	r2, [r3, #0]
            CR1_FLAG_SET(si2c,I2C_CR1_POS);
 800cde2:	69bb      	ldr	r3, [r7, #24]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	681a      	ldr	r2, [r3, #0]
 800cde8:	69bb      	ldr	r3, [r7, #24]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cdf0:	601a      	str	r2, [r3, #0]
 800cdf2:	e007      	b.n	800ce04 <stmi2c_read+0x6c>
        }
		else CR1_FLAG_SET(si2c,I2C_CR1_ACK);
 800cdf4:	69bb      	ldr	r3, [r7, #24]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	681a      	ldr	r2, [r3, #0]
 800cdfa:	69bb      	ldr	r3, [r7, #24]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ce02:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(si2c);
 800ce04:	2300      	movs	r3, #0
 800ce06:	617b      	str	r3, [r7, #20]
 800ce08:	69bb      	ldr	r3, [r7, #24]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	695b      	ldr	r3, [r3, #20]
 800ce0e:	617b      	str	r3, [r7, #20]
 800ce10:	69bb      	ldr	r3, [r7, #24]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	699b      	ldr	r3, [r3, #24]
 800ce16:	617b      	str	r3, [r7, #20]
 800ce18:	697b      	ldr	r3, [r7, #20]
        
		while(len && is_vatek_success(nres))
 800ce1a:	e09d      	b.n	800cf58 <stmi2c_read+0x1c0>
        {
			if(len <= 3){
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2b03      	cmp	r3, #3
 800ce20:	dc73      	bgt.n	800cf0a <stmi2c_read+0x172>
				if(len == 1)
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2b01      	cmp	r3, #1
 800ce26:	d114      	bne.n	800ce52 <stmi2c_read+0xba>
				{
					nres = ll_i2c_wait_flag_set(hi2c,I2C_FLAG_RXNE);
 800ce28:	4951      	ldr	r1, [pc, #324]	; (800cf70 <stmi2c_read+0x1d8>)
 800ce2a:	68f8      	ldr	r0, [r7, #12]
 800ce2c:	f000 f90d 	bl	800d04a <ll_i2c_wait_flag_set>
 800ce30:	61f8      	str	r0, [r7, #28]
					if(is_vatek_success(nres))
 800ce32:	69fb      	ldr	r3, [r7, #28]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	f2c0 808f 	blt.w	800cf58 <stmi2c_read+0x1c0>
					{
						*pbuf++ = DR_GET(si2c);
 800ce3a:	69bb      	ldr	r3, [r7, #24]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	6919      	ldr	r1, [r3, #16]
 800ce40:	68bb      	ldr	r3, [r7, #8]
 800ce42:	1c5a      	adds	r2, r3, #1
 800ce44:	60ba      	str	r2, [r7, #8]
 800ce46:	b2ca      	uxtb	r2, r1
 800ce48:	701a      	strb	r2, [r3, #0]
						len--;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	3b01      	subs	r3, #1
 800ce4e:	607b      	str	r3, [r7, #4]
 800ce50:	e082      	b.n	800cf58 <stmi2c_read+0x1c0>
					}
				}else if(len == 2){
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2b02      	cmp	r3, #2
 800ce56:	d11e      	bne.n	800ce96 <stmi2c_read+0xfe>
					nres = ll_i2c_wait_flag_set(hi2c,I2C_FLAG_BTF);
 800ce58:	4946      	ldr	r1, [pc, #280]	; (800cf74 <stmi2c_read+0x1dc>)
 800ce5a:	68f8      	ldr	r0, [r7, #12]
 800ce5c:	f000 f8f5 	bl	800d04a <ll_i2c_wait_flag_set>
 800ce60:	61f8      	str	r0, [r7, #28]
					if(is_vatek_success(nres))
 800ce62:	69fb      	ldr	r3, [r7, #28]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	db77      	blt.n	800cf58 <stmi2c_read+0x1c0>
					{
						*pbuf++ = DR_GET(si2c);
 800ce68:	69bb      	ldr	r3, [r7, #24]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	6919      	ldr	r1, [r3, #16]
 800ce6e:	68bb      	ldr	r3, [r7, #8]
 800ce70:	1c5a      	adds	r2, r3, #1
 800ce72:	60ba      	str	r2, [r7, #8]
 800ce74:	b2ca      	uxtb	r2, r1
 800ce76:	701a      	strb	r2, [r3, #0]
						len--;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	3b01      	subs	r3, #1
 800ce7c:	607b      	str	r3, [r7, #4]
						*pbuf++ = DR_GET(si2c);
 800ce7e:	69bb      	ldr	r3, [r7, #24]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	6919      	ldr	r1, [r3, #16]
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	1c5a      	adds	r2, r3, #1
 800ce88:	60ba      	str	r2, [r7, #8]
 800ce8a:	b2ca      	uxtb	r2, r1
 800ce8c:	701a      	strb	r2, [r3, #0]
						len--;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	3b01      	subs	r3, #1
 800ce92:	607b      	str	r3, [r7, #4]
 800ce94:	e060      	b.n	800cf58 <stmi2c_read+0x1c0>
					}
				}else{
					nres = ll_i2c_wait_flag_set(hi2c,I2C_FLAG_BTF);
 800ce96:	4937      	ldr	r1, [pc, #220]	; (800cf74 <stmi2c_read+0x1dc>)
 800ce98:	68f8      	ldr	r0, [r7, #12]
 800ce9a:	f000 f8d6 	bl	800d04a <ll_i2c_wait_flag_set>
 800ce9e:	61f8      	str	r0, [r7, #28]
					CR1_FLAG_CLR(si2c,I2C_CR1_ACK);
 800cea0:	69bb      	ldr	r3, [r7, #24]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	681a      	ldr	r2, [r3, #0]
 800cea6:	69bb      	ldr	r3, [r7, #24]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ceae:	601a      	str	r2, [r3, #0]
										
					if(is_vatek_success(nres))
 800ceb0:	69fb      	ldr	r3, [r7, #28]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	db50      	blt.n	800cf58 <stmi2c_read+0x1c0>
					{
						*pbuf++ = DR_GET(si2c);
 800ceb6:	69bb      	ldr	r3, [r7, #24]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	6919      	ldr	r1, [r3, #16]
 800cebc:	68bb      	ldr	r3, [r7, #8]
 800cebe:	1c5a      	adds	r2, r3, #1
 800cec0:	60ba      	str	r2, [r7, #8]
 800cec2:	b2ca      	uxtb	r2, r1
 800cec4:	701a      	strb	r2, [r3, #0]
						len--;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	3b01      	subs	r3, #1
 800ceca:	607b      	str	r3, [r7, #4]
						nres = ll_i2c_wait_flag_set(hi2c,I2C_FLAG_BTF);
 800cecc:	4929      	ldr	r1, [pc, #164]	; (800cf74 <stmi2c_read+0x1dc>)
 800cece:	68f8      	ldr	r0, [r7, #12]
 800ced0:	f000 f8bb 	bl	800d04a <ll_i2c_wait_flag_set>
 800ced4:	61f8      	str	r0, [r7, #28]
						if(is_vatek_success(nres)){
 800ced6:	69fb      	ldr	r3, [r7, #28]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	db3d      	blt.n	800cf58 <stmi2c_read+0x1c0>
							*pbuf++ = DR_GET(si2c);
 800cedc:	69bb      	ldr	r3, [r7, #24]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	6919      	ldr	r1, [r3, #16]
 800cee2:	68bb      	ldr	r3, [r7, #8]
 800cee4:	1c5a      	adds	r2, r3, #1
 800cee6:	60ba      	str	r2, [r7, #8]
 800cee8:	b2ca      	uxtb	r2, r1
 800ceea:	701a      	strb	r2, [r3, #0]
							len--;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	3b01      	subs	r3, #1
 800cef0:	607b      	str	r3, [r7, #4]
							*pbuf++ = DR_GET(si2c);
 800cef2:	69bb      	ldr	r3, [r7, #24]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	6919      	ldr	r1, [r3, #16]
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	1c5a      	adds	r2, r3, #1
 800cefc:	60ba      	str	r2, [r7, #8]
 800cefe:	b2ca      	uxtb	r2, r1
 800cf00:	701a      	strb	r2, [r3, #0]
							len--;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	3b01      	subs	r3, #1
 800cf06:	607b      	str	r3, [r7, #4]
 800cf08:	e026      	b.n	800cf58 <stmi2c_read+0x1c0>
						}
					}
				}
			}else{
				
				nres = ll_i2c_wait_flag_set(hi2c,I2C_FLAG_RXNE);
 800cf0a:	4919      	ldr	r1, [pc, #100]	; (800cf70 <stmi2c_read+0x1d8>)
 800cf0c:	68f8      	ldr	r0, [r7, #12]
 800cf0e:	f000 f89c 	bl	800d04a <ll_i2c_wait_flag_set>
 800cf12:	61f8      	str	r0, [r7, #28]
				if(!is_vatek_success(nres))return nres;
 800cf14:	69fb      	ldr	r3, [r7, #28]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	da01      	bge.n	800cf1e <stmi2c_read+0x186>
 800cf1a:	69fb      	ldr	r3, [r7, #28]
 800cf1c:	e024      	b.n	800cf68 <stmi2c_read+0x1d0>
				else
				{
					*pbuf++ = DR_GET(si2c);
 800cf1e:	69bb      	ldr	r3, [r7, #24]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	6919      	ldr	r1, [r3, #16]
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	1c5a      	adds	r2, r3, #1
 800cf28:	60ba      	str	r2, [r7, #8]
 800cf2a:	b2ca      	uxtb	r2, r1
 800cf2c:	701a      	strb	r2, [r3, #0]
					 len--;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	3b01      	subs	r3, #1
 800cf32:	607b      	str	r3, [r7, #4]
					if(__HAL_I2C_GET_FLAG(si2c, I2C_FLAG_BTF) == SET){
 800cf34:	69bb      	ldr	r3, [r7, #24]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	695b      	ldr	r3, [r3, #20]
 800cf3a:	f003 0304 	and.w	r3, r3, #4
 800cf3e:	2b04      	cmp	r3, #4
 800cf40:	d10a      	bne.n	800cf58 <stmi2c_read+0x1c0>
						*pbuf++ = DR_GET(si2c);
 800cf42:	69bb      	ldr	r3, [r7, #24]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	6919      	ldr	r1, [r3, #16]
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	1c5a      	adds	r2, r3, #1
 800cf4c:	60ba      	str	r2, [r7, #8]
 800cf4e:	b2ca      	uxtb	r2, r1
 800cf50:	701a      	strb	r2, [r3, #0]
						len--;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	3b01      	subs	r3, #1
 800cf56:	607b      	str	r3, [r7, #4]
		while(len && is_vatek_success(nres))
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d003      	beq.n	800cf66 <stmi2c_read+0x1ce>
 800cf5e:	69fb      	ldr	r3, [r7, #28]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	f6bf af5b 	bge.w	800ce1c <stmi2c_read+0x84>
			}    
        }     
    }
    
    if(!is_vatek_success(nres))_S_LOG("stm32_ll_i2c_read fail : %d",nres);
    return nres;        
 800cf66:	69fb      	ldr	r3, [r7, #28]
}
 800cf68:	4618      	mov	r0, r3
 800cf6a:	3720      	adds	r7, #32
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}
 800cf70:	00010040 	.word	0x00010040
 800cf74:	00010004 	.word	0x00010004

0800cf78 <stmi2c_stop>:

 vatek_result stmi2c_stop(hstm32_i2c hi2c)
{
 800cf78:	b480      	push	{r7}
 800cf7a:	b085      	sub	sp, #20
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
    I2C_HandleTypeDef* si2c = (I2C_HandleTypeDef*)hi2c;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	60fb      	str	r3, [r7, #12]
	si2c->Instance->CR1 |= I2C_CR1_STOP;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	681a      	ldr	r2, [r3, #0]
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cf92:	601a      	str	r2, [r3, #0]
    si2c->State = HAL_I2C_STATE_READY;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	2220      	movs	r2, #32
 800cf98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    si2c->Lock = HAL_UNLOCKED;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return vatek_success;    
 800cfa4:	2300      	movs	r3, #0
}
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	3714      	adds	r7, #20
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb0:	4770      	bx	lr

0800cfb2 <ll_i2c_wait_flag>:

vatek_result ll_i2c_wait_flag(I2C_HandleTypeDef* hi2c,uint32_t flag,FlagStatus status)
{
 800cfb2:	b580      	push	{r7, lr}
 800cfb4:	b086      	sub	sp, #24
 800cfb6:	af00      	add	r7, sp, #0
 800cfb8:	60f8      	str	r0, [r7, #12]
 800cfba:	60b9      	str	r1, [r7, #8]
 800cfbc:	4613      	mov	r3, r2
 800cfbe:	71fb      	strb	r3, [r7, #7]
    uint32_t ntick = HAL_GetTick();
 800cfc0:	f7f4 f818 	bl	8000ff4 <HAL_GetTick>
 800cfc4:	6178      	str	r0, [r7, #20]
    
    while((__HAL_I2C_GET_FLAG(hi2c,flag) ? SET : RESET) != status)
 800cfc6:	e009      	b.n	800cfdc <ll_i2c_wait_flag+0x2a>
    {
        if((HAL_GetTick() - ntick) > STM32_LL_I2C_TIMEOUT)return vatek_timeout;
 800cfc8:	f7f4 f814 	bl	8000ff4 <HAL_GetTick>
 800cfcc:	4602      	mov	r2, r0
 800cfce:	697b      	ldr	r3, [r7, #20]
 800cfd0:	1ad3      	subs	r3, r2, r3
 800cfd2:	2bc8      	cmp	r3, #200	; 0xc8
 800cfd4:	d902      	bls.n	800cfdc <ll_i2c_wait_flag+0x2a>
 800cfd6:	f06f 0306 	mvn.w	r3, #6
 800cfda:	e023      	b.n	800d024 <ll_i2c_wait_flag+0x72>
    while((__HAL_I2C_GET_FLAG(hi2c,flag) ? SET : RESET) != status)
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	0c1b      	lsrs	r3, r3, #16
 800cfe0:	b2db      	uxtb	r3, r3
 800cfe2:	2b01      	cmp	r3, #1
 800cfe4:	d10d      	bne.n	800d002 <ll_i2c_wait_flag+0x50>
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	695b      	ldr	r3, [r3, #20]
 800cfec:	43da      	mvns	r2, r3
 800cfee:	68bb      	ldr	r3, [r7, #8]
 800cff0:	4013      	ands	r3, r2
 800cff2:	b29b      	uxth	r3, r3
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	bf0c      	ite	eq
 800cff8:	2301      	moveq	r3, #1
 800cffa:	2300      	movne	r3, #0
 800cffc:	b2db      	uxtb	r3, r3
 800cffe:	461a      	mov	r2, r3
 800d000:	e00c      	b.n	800d01c <ll_i2c_wait_flag+0x6a>
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	699b      	ldr	r3, [r3, #24]
 800d008:	43da      	mvns	r2, r3
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	4013      	ands	r3, r2
 800d00e:	b29b      	uxth	r3, r3
 800d010:	2b00      	cmp	r3, #0
 800d012:	bf0c      	ite	eq
 800d014:	2301      	moveq	r3, #1
 800d016:	2300      	movne	r3, #0
 800d018:	b2db      	uxtb	r3, r3
 800d01a:	461a      	mov	r2, r3
 800d01c:	79fb      	ldrb	r3, [r7, #7]
 800d01e:	429a      	cmp	r2, r3
 800d020:	d1d2      	bne.n	800cfc8 <ll_i2c_wait_flag+0x16>
    }
    
    return vatek_success;
 800d022:	2300      	movs	r3, #0
}
 800d024:	4618      	mov	r0, r3
 800d026:	3718      	adds	r7, #24
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}

0800d02c <ll_i2c_wait_flag_clr>:

vatek_result ll_i2c_wait_flag_clr(I2C_HandleTypeDef* hi2c,uint32_t flag)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b082      	sub	sp, #8
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
 800d034:	6039      	str	r1, [r7, #0]
    return ll_i2c_wait_flag(hi2c,flag,RESET);
 800d036:	2200      	movs	r2, #0
 800d038:	6839      	ldr	r1, [r7, #0]
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f7ff ffb9 	bl	800cfb2 <ll_i2c_wait_flag>
 800d040:	4603      	mov	r3, r0
}
 800d042:	4618      	mov	r0, r3
 800d044:	3708      	adds	r7, #8
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}

0800d04a <ll_i2c_wait_flag_set>:

vatek_result ll_i2c_wait_flag_set(I2C_HandleTypeDef* hi2c,uint32_t flag)
{
 800d04a:	b580      	push	{r7, lr}
 800d04c:	b082      	sub	sp, #8
 800d04e:	af00      	add	r7, sp, #0
 800d050:	6078      	str	r0, [r7, #4]
 800d052:	6039      	str	r1, [r7, #0]
    return ll_i2c_wait_flag(hi2c,flag,SET);
 800d054:	2201      	movs	r2, #1
 800d056:	6839      	ldr	r1, [r7, #0]
 800d058:	6878      	ldr	r0, [r7, #4]
 800d05a:	f7ff ffaa 	bl	800cfb2 <ll_i2c_wait_flag>
 800d05e:	4603      	mov	r3, r0
}
 800d060:	4618      	mov	r0, r3
 800d062:	3708      	adds	r7, #8
 800d064:	46bd      	mov	sp, r7
 800d066:	bd80      	pop	{r7, pc}

0800d068 <ll_i2c_send_start>:

vatek_result ll_i2c_send_start(I2C_HandleTypeDef* hi2c)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b082      	sub	sp, #8
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
    CR1_FLAG_SET(hi2c,I2C_CR1_START);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	681a      	ldr	r2, [r3, #0]
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d07e:	601a      	str	r2, [r3, #0]
    return ll_i2c_wait_flag_set(hi2c,I2C_FLAG_SB); 
 800d080:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d084:	6878      	ldr	r0, [r7, #4]
 800d086:	f7ff ffe0 	bl	800d04a <ll_i2c_wait_flag_set>
 800d08a:	4603      	mov	r3, r0
}
 800d08c:	4618      	mov	r0, r3
 800d08e:	3708      	adds	r7, #8
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}

0800d094 <ll_i2c_check_busy>:

vatek_result ll_i2c_check_busy(I2C_HandleTypeDef* hi2c, uint8_t lock)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b084      	sub	sp, #16
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
 800d09c:	460b      	mov	r3, r1
 800d09e:	70fb      	strb	r3, [r7, #3]
    vatek_result nres = vatek_badstatus;
 800d0a0:	f06f 0304 	mvn.w	r3, #4
 800d0a4:	60fb      	str	r3, [r7, #12]
    
    if(hi2c->Lock == HAL_LOCKED){
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d0ac:	2b01      	cmp	r3, #1
 800d0ae:	d107      	bne.n	800d0c0 <ll_i2c_check_busy+0x2c>
		if(lock == 0) return vatek_success;		//i2c restart process
 800d0b0:	78fb      	ldrb	r3, [r7, #3]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d101      	bne.n	800d0ba <ll_i2c_check_busy+0x26>
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	e012      	b.n	800d0e0 <ll_i2c_check_busy+0x4c>
		else return vatek_badstatus;
 800d0ba:	f06f 0304 	mvn.w	r3, #4
 800d0be:	e00f      	b.n	800d0e0 <ll_i2c_check_busy+0x4c>
	}
	
    nres = ll_i2c_wait_flag_clr(hi2c,I2C_FLAG_BUSY);
 800d0c0:	4909      	ldr	r1, [pc, #36]	; (800d0e8 <ll_i2c_check_busy+0x54>)
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f7ff ffb2 	bl	800d02c <ll_i2c_wait_flag_clr>
 800d0c8:	60f8      	str	r0, [r7, #12]
    if(is_vatek_success(nres))if(lock)hi2c->Lock = HAL_LOCKED;        
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	db06      	blt.n	800d0de <ll_i2c_check_busy+0x4a>
 800d0d0:	78fb      	ldrb	r3, [r7, #3]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d003      	beq.n	800d0de <ll_i2c_check_busy+0x4a>
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2201      	movs	r2, #1
 800d0da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return nres;
 800d0de:	68fb      	ldr	r3, [r7, #12]
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3710      	adds	r7, #16
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}
 800d0e8:	00100002 	.word	0x00100002

0800d0ec <hal_system_sleep>:
#include <stm32_usb_bridge.h>

extern void SystemClock_Config(void);   /* implemented in main.c */

void hal_system_sleep(uint32_t ms)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b082      	sub	sp, #8
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	f7f3 ff89 	bl	800100c <HAL_Delay>
}
 800d0fa:	bf00      	nop
 800d0fc:	3708      	adds	r7, #8
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}

0800d102 <hal_system_get_tick>:

uint32_t hal_system_get_tick(void)
{
 800d102:	b580      	push	{r7, lr}
 800d104:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 800d106:	f7f3 ff75 	bl	8000ff4 <HAL_GetTick>
 800d10a:	4603      	mov	r3, r0
}
 800d10c:	4618      	mov	r0, r3
 800d10e:	bd80      	pop	{r7, pc}

0800d110 <hal_board_open>:

vatek_result hal_board_open(void)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b082      	sub	sp, #8
 800d114:	af00      	add	r7, sp, #0
    static int32_t stmhal_init = 0;
    vatek_result nres = vatek_success;
 800d116:	2300      	movs	r3, #0
 800d118:	607b      	str	r3, [r7, #4]
    if(!stmhal_init)
 800d11a:	4b0c      	ldr	r3, [pc, #48]	; (800d14c <hal_board_open+0x3c>)
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d10e      	bne.n	800d140 <hal_board_open+0x30>
    {
        HAL_Init();
 800d122:	f7f3 ff01 	bl	8000f28 <HAL_Init>
        SystemClock_Config();
 800d126:	f7f3 fbff 	bl	8000928 <SystemClock_Config>
        MX_GPIO_Init();
 800d12a:	f7f3 fa2b 	bl	8000584 <MX_GPIO_Init>
        MX_USART1_UART_Init();
 800d12e:	f7f3 fe63 	bl	8000df8 <MX_USART1_UART_Init>

        nres = stm32_core_init(&huart1);
 800d132:	4807      	ldr	r0, [pc, #28]	; (800d150 <hal_board_open+0x40>)
 800d134:	f7ff fb4c 	bl	800c7d0 <stm32_core_init>
 800d138:	6078      	str	r0, [r7, #4]
        if(is_vatek_success(nres))
        {
        }
        stmhal_init = 1;
 800d13a:	4b04      	ldr	r3, [pc, #16]	; (800d14c <hal_board_open+0x3c>)
 800d13c:	2201      	movs	r2, #1
 800d13e:	601a      	str	r2, [r3, #0]
    }
    return nres;
 800d140:	687b      	ldr	r3, [r7, #4]
}
 800d142:	4618      	mov	r0, r3
 800d144:	3708      	adds	r7, #8
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}
 800d14a:	bf00      	nop
 800d14c:	20000ae8 	.word	0x20000ae8
 800d150:	200002e4 	.word	0x200002e4

0800d154 <hal_gpio_config>:

vatek_result hal_gpio_config(hhal_pin pin,hal_gpio_mode mode)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b084      	sub	sp, #16
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
 800d15c:	460b      	mov	r3, r1
 800d15e:	70fb      	strb	r3, [r7, #3]
	Pstm32_pin spin = stm32_core_get_pin(pin);
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f7ff fc7f 	bl	800ca64 <stm32_core_get_pin>
 800d166:	60b8      	str	r0, [r7, #8]
	vatek_result nres = vatek_badparam;
 800d168:	f06f 0302 	mvn.w	r3, #2
 800d16c:	60fb      	str	r3, [r7, #12]
	if(spin)
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d006      	beq.n	800d182 <hal_gpio_config+0x2e>
		nres = stm32_core_pin_config(spin,mode,0);
 800d174:	78fb      	ldrb	r3, [r7, #3]
 800d176:	2200      	movs	r2, #0
 800d178:	4619      	mov	r1, r3
 800d17a:	68b8      	ldr	r0, [r7, #8]
 800d17c:	f7ff fc9f 	bl	800cabe <stm32_core_pin_config>
 800d180:	60f8      	str	r0, [r7, #12]
    return nres;
 800d182:	68fb      	ldr	r3, [r7, #12]
}
 800d184:	4618      	mov	r0, r3
 800d186:	3710      	adds	r7, #16
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}

0800d18c <hal_gpio_set>:
{
    return vatek_unsupport;
}

vatek_result hal_gpio_set(hhal_pin pin,int32_t isset)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b084      	sub	sp, #16
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
 800d194:	6039      	str	r1, [r7, #0]
	Pstm32_pin spin = stm32_core_get_pin(pin);
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	f7ff fc64 	bl	800ca64 <stm32_core_get_pin>
 800d19c:	60b8      	str	r0, [r7, #8]
	vatek_result nres = vatek_badparam;
 800d19e:	f06f 0302 	mvn.w	r3, #2
 800d1a2:	60fb      	str	r3, [r7, #12]
	if(spin)
 800d1a4:	68bb      	ldr	r3, [r7, #8]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d004      	beq.n	800d1b4 <hal_gpio_set+0x28>
		nres = stm32_core_pin_set_status(spin,isset);
 800d1aa:	6839      	ldr	r1, [r7, #0]
 800d1ac:	68b8      	ldr	r0, [r7, #8]
 800d1ae:	f7ff fcb5 	bl	800cb1c <stm32_core_pin_set_status>
 800d1b2:	60f8      	str	r0, [r7, #12]
    return nres;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3710      	adds	r7, #16
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}

0800d1be <hal_i2c_check_device>:
        nres = pi2c->set_speed(pi2c->hi2c,speedkhz);
    return nres;
}

vatek_result hal_i2c_check_device(uint8_t devaddr)
{
 800d1be:	b580      	push	{r7, lr}
 800d1c0:	b082      	sub	sp, #8
 800d1c2:	af00      	add	r7, sp, #0
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	71fb      	strb	r3, [r7, #7]
	return stm32_core_main_i2c_check_device(devaddr);
 800d1c8:	79fb      	ldrb	r3, [r7, #7]
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f7ff fb94 	bl	800c8f8 <stm32_core_main_i2c_check_device>
 800d1d0:	4603      	mov	r3, r0
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	3708      	adds	r7, #8
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}

0800d1da <hal_i2c_start>:

vatek_result hal_i2c_start(uint8_t devaddr,int32_t restart)
{
 800d1da:	b580      	push	{r7, lr}
 800d1dc:	b084      	sub	sp, #16
 800d1de:	af00      	add	r7, sp, #0
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	6039      	str	r1, [r7, #0]
 800d1e4:	71fb      	strb	r3, [r7, #7]
    vatek_result nres = vatek_unsupport;
 800d1e6:	f06f 0301 	mvn.w	r3, #1
 800d1ea:	60fb      	str	r3, [r7, #12]
    Pstm32_i2c pi2c = stm32_core_get_main_i2c();
 800d1ec:	f7ff fbaa 	bl	800c944 <stm32_core_get_main_i2c>
 800d1f0:	60b8      	str	r0, [r7, #8]
    if(pi2c)
 800d1f2:	68bb      	ldr	r3, [r7, #8]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d007      	beq.n	800d208 <hal_i2c_start+0x2e>
        nres = pi2c->start(pi2c->hi2c,devaddr,restart);
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	689b      	ldr	r3, [r3, #8]
 800d1fc:	68ba      	ldr	r2, [r7, #8]
 800d1fe:	6810      	ldr	r0, [r2, #0]
 800d200:	79f9      	ldrb	r1, [r7, #7]
 800d202:	683a      	ldr	r2, [r7, #0]
 800d204:	4798      	blx	r3
 800d206:	60f8      	str	r0, [r7, #12]
    return nres;  
 800d208:	68fb      	ldr	r3, [r7, #12]
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	3710      	adds	r7, #16
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}

0800d212 <hal_i2c_write>:

vatek_result hal_i2c_write(const uint8_t* pbuf,int32_t len)
{
 800d212:	b580      	push	{r7, lr}
 800d214:	b084      	sub	sp, #16
 800d216:	af00      	add	r7, sp, #0
 800d218:	6078      	str	r0, [r7, #4]
 800d21a:	6039      	str	r1, [r7, #0]
    vatek_result nres = vatek_unsupport;
 800d21c:	f06f 0301 	mvn.w	r3, #1
 800d220:	60fb      	str	r3, [r7, #12]
    Pstm32_i2c pi2c = stm32_core_get_main_i2c();
 800d222:	f7ff fb8f 	bl	800c944 <stm32_core_get_main_i2c>
 800d226:	60b8      	str	r0, [r7, #8]
    if(pi2c)
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d007      	beq.n	800d23e <hal_i2c_write+0x2c>
        nres = pi2c->write(pi2c->hi2c,pbuf,len);
 800d22e:	68bb      	ldr	r3, [r7, #8]
 800d230:	68db      	ldr	r3, [r3, #12]
 800d232:	68ba      	ldr	r2, [r7, #8]
 800d234:	6810      	ldr	r0, [r2, #0]
 800d236:	683a      	ldr	r2, [r7, #0]
 800d238:	6879      	ldr	r1, [r7, #4]
 800d23a:	4798      	blx	r3
 800d23c:	60f8      	str	r0, [r7, #12]
    return nres; 
 800d23e:	68fb      	ldr	r3, [r7, #12]
}
 800d240:	4618      	mov	r0, r3
 800d242:	3710      	adds	r7, #16
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}

0800d248 <hal_i2c_read>:

vatek_result hal_i2c_read(uint8_t* pbuf,int32_t len)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b084      	sub	sp, #16
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	6039      	str	r1, [r7, #0]
    vatek_result nres = vatek_unsupport;
 800d252:	f06f 0301 	mvn.w	r3, #1
 800d256:	60fb      	str	r3, [r7, #12]
    Pstm32_i2c pi2c = stm32_core_get_main_i2c();
 800d258:	f7ff fb74 	bl	800c944 <stm32_core_get_main_i2c>
 800d25c:	60b8      	str	r0, [r7, #8]
    if(pi2c)
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d007      	beq.n	800d274 <hal_i2c_read+0x2c>
        nres = pi2c->read(pi2c->hi2c,pbuf,len);
 800d264:	68bb      	ldr	r3, [r7, #8]
 800d266:	691b      	ldr	r3, [r3, #16]
 800d268:	68ba      	ldr	r2, [r7, #8]
 800d26a:	6810      	ldr	r0, [r2, #0]
 800d26c:	683a      	ldr	r2, [r7, #0]
 800d26e:	6879      	ldr	r1, [r7, #4]
 800d270:	4798      	blx	r3
 800d272:	60f8      	str	r0, [r7, #12]
    return nres; 
 800d274:	68fb      	ldr	r3, [r7, #12]
}
 800d276:	4618      	mov	r0, r3
 800d278:	3710      	adds	r7, #16
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bd80      	pop	{r7, pc}

0800d27e <hal_i2c_stop>:

vatek_result hal_i2c_stop(void)
{
 800d27e:	b580      	push	{r7, lr}
 800d280:	b082      	sub	sp, #8
 800d282:	af00      	add	r7, sp, #0
    vatek_result nres = vatek_unsupport;
 800d284:	f06f 0301 	mvn.w	r3, #1
 800d288:	607b      	str	r3, [r7, #4]
    Pstm32_i2c pi2c = stm32_core_get_main_i2c();
 800d28a:	f7ff fb5b 	bl	800c944 <stm32_core_get_main_i2c>
 800d28e:	6038      	str	r0, [r7, #0]
    if(pi2c)
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d006      	beq.n	800d2a4 <hal_i2c_stop+0x26>
        nres = pi2c->stop(pi2c->hi2c);
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	695b      	ldr	r3, [r3, #20]
 800d29a:	683a      	ldr	r2, [r7, #0]
 800d29c:	6812      	ldr	r2, [r2, #0]
 800d29e:	4610      	mov	r0, r2
 800d2a0:	4798      	blx	r3
 800d2a2:	6078      	str	r0, [r7, #4]
    return nres; 
 800d2a4:	687b      	ldr	r3, [r7, #4]
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3708      	adds	r7, #8
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}

0800d2ae <hal_board_close>:
    if(pspi)nres = pspi->read(pspi->hspi,pbuf,len);
    return nres;
}

void hal_board_close(void)
{
 800d2ae:	b480      	push	{r7}
 800d2b0:	af00      	add	r7, sp, #0

}
 800d2b2:	bf00      	nop
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ba:	4770      	bx	lr

0800d2bc <hal_storage_lock_section>:

vatek_result hal_storage_lock_section(uint8_t** psection)
{
 800d2bc:	b480      	push	{r7}
 800d2be:	b083      	sub	sp, #12
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
    return vatek_unsupport;
 800d2c4:	f06f 0301 	mvn.w	r3, #1
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	370c      	adds	r7, #12
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d2:	4770      	bx	lr

0800d2d4 <hal_storage_unlock_section>:

void hal_storage_unlock_section(void)
{
 800d2d4:	b480      	push	{r7}
 800d2d6:	af00      	add	r7, sp, #0

}
 800d2d8:	bf00      	nop
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e0:	4770      	bx	lr

0800d2e2 <hal_storage_erase>:

vatek_result hal_storage_erase(uint32_t section)
{
 800d2e2:	b480      	push	{r7}
 800d2e4:	b083      	sub	sp, #12
 800d2e6:	af00      	add	r7, sp, #0
 800d2e8:	6078      	str	r0, [r7, #4]
    return vatek_unsupport;
 800d2ea:	f06f 0301 	mvn.w	r3, #1
}
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	370c      	adds	r7, #12
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f8:	4770      	bx	lr

0800d2fa <hal_storage_write>:

vatek_result hal_storage_write(uint32_t section,uint8_t* psection)
{
 800d2fa:	b480      	push	{r7}
 800d2fc:	b083      	sub	sp, #12
 800d2fe:	af00      	add	r7, sp, #0
 800d300:	6078      	str	r0, [r7, #4]
 800d302:	6039      	str	r1, [r7, #0]
    return vatek_unsupport;
 800d304:	f06f 0301 	mvn.w	r3, #1
}
 800d308:	4618      	mov	r0, r3
 800d30a:	370c      	adds	r7, #12
 800d30c:	46bd      	mov	sp, r7
 800d30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d312:	4770      	bx	lr

0800d314 <hal_storage_read>:

vatek_result hal_storage_read(uint32_t section,uint8_t* psection)
{
 800d314:	b480      	push	{r7}
 800d316:	b083      	sub	sp, #12
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
 800d31c:	6039      	str	r1, [r7, #0]
    return vatek_unsupport;
 800d31e:	f06f 0301 	mvn.w	r3, #1
}
 800d322:	4618      	mov	r0, r3
 800d324:	370c      	adds	r7, #12
 800d326:	46bd      	mov	sp, r7
 800d328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32c:	4770      	bx	lr

0800d32e <vatek_buffer_2_uint32>:
    #define readhal(a,v)        vatek_chip_read_memory(hchip,a,v)
    #define writehal(a,v)       vatek_chip_write_memory(hchip,a,v)
    #define writebuf(a,b,v)     vatek_chip_write_buffer(hchip,a,b,((v) >> 2))

    static inline uint32_t vatek_buffer_2_uint32(uint8_t* pbuf)
    {
 800d32e:	b480      	push	{r7}
 800d330:	b083      	sub	sp, #12
 800d332:	af00      	add	r7, sp, #0
 800d334:	6078      	str	r0, [r7, #4]
        return (pbuf[0] << 24) | (pbuf[1] << 16) | (pbuf[2] << 8) | pbuf[3];
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	781b      	ldrb	r3, [r3, #0]
 800d33a:	061a      	lsls	r2, r3, #24
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	3301      	adds	r3, #1
 800d340:	781b      	ldrb	r3, [r3, #0]
 800d342:	041b      	lsls	r3, r3, #16
 800d344:	431a      	orrs	r2, r3
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	3302      	adds	r3, #2
 800d34a:	781b      	ldrb	r3, [r3, #0]
 800d34c:	021b      	lsls	r3, r3, #8
 800d34e:	4313      	orrs	r3, r2
 800d350:	687a      	ldr	r2, [r7, #4]
 800d352:	3203      	adds	r2, #3
 800d354:	7812      	ldrb	r2, [r2, #0]
 800d356:	4313      	orrs	r3, r2
    }
 800d358:	4618      	mov	r0, r3
 800d35a:	370c      	adds	r7, #12
 800d35c:	46bd      	mov	sp, r7
 800d35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d362:	4770      	bx	lr

0800d364 <vatek_uint32_2_buffer>:

    static inline void vatek_uint32_2_buffer(uint8_t* pbuf, uint32_t val)
    {
 800d364:	b480      	push	{r7}
 800d366:	b083      	sub	sp, #12
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	6039      	str	r1, [r7, #0]
		*pbuf++ = (uint8_t)(val >> 24);
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	0e19      	lsrs	r1, r3, #24
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	1c5a      	adds	r2, r3, #1
 800d376:	607a      	str	r2, [r7, #4]
 800d378:	b2ca      	uxtb	r2, r1
 800d37a:	701a      	strb	r2, [r3, #0]
		*pbuf++ = (uint8_t)(val >> 16);
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	0c19      	lsrs	r1, r3, #16
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	1c5a      	adds	r2, r3, #1
 800d384:	607a      	str	r2, [r7, #4]
 800d386:	b2ca      	uxtb	r2, r1
 800d388:	701a      	strb	r2, [r3, #0]
		*pbuf++ = (uint8_t)(val >> 8);
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	0a19      	lsrs	r1, r3, #8
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	1c5a      	adds	r2, r3, #1
 800d392:	607a      	str	r2, [r7, #4]
 800d394:	b2ca      	uxtb	r2, r1
 800d396:	701a      	strb	r2, [r3, #0]
		*pbuf++ = (uint8_t)(val & 0xFF);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	1c5a      	adds	r2, r3, #1
 800d39c:	607a      	str	r2, [r7, #4]
 800d39e:	683a      	ldr	r2, [r7, #0]
 800d3a0:	b2d2      	uxtb	r2, r2
 800d3a2:	701a      	strb	r2, [r3, #0]
    }
 800d3a4:	bf00      	nop
 800d3a6:	370c      	adds	r7, #12
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ae:	4770      	bx	lr

0800d3b0 <hal_bridge_usb_open>:
}stm32_bridge_handle,*Pstm32_bridge_handle;

static Pstm32_bridge_handle hstm32usb = NULL;

vatek_result hal_bridge_usb_open(hhal_bridge* hbridge)
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b084      	sub	sp, #16
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
	vatek_result nres = vatek_badstatus;
 800d3b8:	f06f 0304 	mvn.w	r3, #4
 800d3bc:	60fb      	str	r3, [r7, #12]
	if(!hstm32usb)
 800d3be:	4b28      	ldr	r3, [pc, #160]	; (800d460 <hal_bridge_usb_open+0xb0>)
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d147      	bne.n	800d456 <hal_bridge_usb_open+0xa6>
	{
		Pstm32_bridge_usb pstmusb = stm32_usb_bridge_get();
 800d3c6:	f000 f979 	bl	800d6bc <stm32_usb_bridge_get>
 800d3ca:	60b8      	str	r0, [r7, #8]
		nres = vatek_unsupport;
 800d3cc:	f06f 0301 	mvn.w	r3, #1
 800d3d0:	60fb      	str	r3, [r7, #12]
		
		if(pstmusb)
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d007      	beq.n	800d3e8 <hal_bridge_usb_open+0x38>
			nres = pstmusb->setrecv(pstmusb->hbridge,stm32_bridge_recv_handler);
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	685b      	ldr	r3, [r3, #4]
 800d3dc:	68ba      	ldr	r2, [r7, #8]
 800d3de:	6812      	ldr	r2, [r2, #0]
 800d3e0:	4920      	ldr	r1, [pc, #128]	; (800d464 <hal_bridge_usb_open+0xb4>)
 800d3e2:	4610      	mov	r0, r2
 800d3e4:	4798      	blx	r3
 800d3e6:	60f8      	str	r0, [r7, #12]
		
		if(is_vatek_success(nres))
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	db26      	blt.n	800d43c <hal_bridge_usb_open+0x8c>
		{
			hstm32usb = (Pstm32_bridge_handle)malloc(sizeof(stm32_bridge_handle));
 800d3ee:	208c      	movs	r0, #140	; 0x8c
 800d3f0:	f000 fd86 	bl	800df00 <malloc>
 800d3f4:	4603      	mov	r3, r0
 800d3f6:	461a      	mov	r2, r3
 800d3f8:	4b19      	ldr	r3, [pc, #100]	; (800d460 <hal_bridge_usb_open+0xb0>)
 800d3fa:	601a      	str	r2, [r3, #0]
			nres = vatek_memfail;
 800d3fc:	f06f 030a 	mvn.w	r3, #10
 800d400:	60fb      	str	r3, [r7, #12]
			if(hstm32usb)
 800d402:	4b17      	ldr	r3, [pc, #92]	; (800d460 <hal_bridge_usb_open+0xb0>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d018      	beq.n	800d43c <hal_bridge_usb_open+0x8c>
			{
				memset(hstm32usb,0,sizeof(stm32_bridge_handle));
 800d40a:	4b15      	ldr	r3, [pc, #84]	; (800d460 <hal_bridge_usb_open+0xb0>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	228c      	movs	r2, #140	; 0x8c
 800d410:	2100      	movs	r1, #0
 800d412:	4618      	mov	r0, r3
 800d414:	f000 fd92 	bl	800df3c <memset>
				memcpy(&hstm32usb->tx_buf[0],&hid_bridge_tag[0],4);
 800d418:	4b11      	ldr	r3, [pc, #68]	; (800d460 <hal_bridge_usb_open+0xb0>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	330c      	adds	r3, #12
 800d41e:	2204      	movs	r2, #4
 800d420:	4911      	ldr	r1, [pc, #68]	; (800d468 <hal_bridge_usb_open+0xb8>)
 800d422:	4618      	mov	r0, r3
 800d424:	f000 fd7c 	bl	800df20 <memcpy>
				hstm32usb->pusb = pstmusb;
 800d428:	4b0d      	ldr	r3, [pc, #52]	; (800d460 <hal_bridge_usb_open+0xb0>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	68ba      	ldr	r2, [r7, #8]
 800d42e:	609a      	str	r2, [r3, #8]
				hstm32usb->status = hid_status_idle;
 800d430:	4b0b      	ldr	r3, [pc, #44]	; (800d460 <hal_bridge_usb_open+0xb0>)
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	2264      	movs	r2, #100	; 0x64
 800d436:	711a      	strb	r2, [r3, #4]
				nres = vatek_success;
 800d438:	2300      	movs	r3, #0
 800d43a:	60fb      	str	r3, [r7, #12]
			}
		}
		
		if(is_vatek_success(nres))
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	db09      	blt.n	800d456 <hal_bridge_usb_open+0xa6>
		{
			nres = stm32_hal_bridge_start();
 800d442:	f000 f911 	bl	800d668 <stm32_hal_bridge_start>
 800d446:	60f8      	str	r0, [r7, #12]
			if(is_vatek_success(nres))*hbridge = hstm32usb;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	db03      	blt.n	800d456 <hal_bridge_usb_open+0xa6>
 800d44e:	4b04      	ldr	r3, [pc, #16]	; (800d460 <hal_bridge_usb_open+0xb0>)
 800d450:	681a      	ldr	r2, [r3, #0]
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	601a      	str	r2, [r3, #0]
		}
	}
	return nres;
 800d456:	68fb      	ldr	r3, [r7, #12]

}
 800d458:	4618      	mov	r0, r3
 800d45a:	3710      	adds	r7, #16
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}
 800d460:	20000aec 	.word	0x20000aec
 800d464:	0800d55d 	.word	0x0800d55d
 800d468:	08010128 	.word	0x08010128

0800d46c <hal_bridge_usb_get_status>:

bridge_device_status hal_bridge_usb_get_status(hhal_bridge hbridge,Phid_bridge_cmd* pcmd)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b084      	sub	sp, #16
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
 800d474:	6039      	str	r1, [r7, #0]
	Pstm32_bridge_handle pbridge = (Pstm32_bridge_handle)hbridge;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	60fb      	str	r3, [r7, #12]
	if(pcmd && pbridge->recv_cmd)
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d009      	beq.n	800d494 <hal_bridge_usb_get_status+0x28>
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d005      	beq.n	800d494 <hal_bridge_usb_get_status+0x28>
	{
		*pcmd = hal_bridge_usb_get_command(hbridge);
 800d488:	6878      	ldr	r0, [r7, #4]
 800d48a:	f000 f809 	bl	800d4a0 <hal_bridge_usb_get_command>
 800d48e:	4602      	mov	r2, r0
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	601a      	str	r2, [r3, #0]
	}
	return pbridge->status;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	791b      	ldrb	r3, [r3, #4]
}
 800d498:	4618      	mov	r0, r3
 800d49a:	3710      	adds	r7, #16
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}

0800d4a0 <hal_bridge_usb_get_command>:

Phid_bridge_cmd hal_bridge_usb_get_command(hhal_bridge hbridge)
{
 800d4a0:	b480      	push	{r7}
 800d4a2:	b085      	sub	sp, #20
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
	Pstm32_bridge_handle pbridge = (Pstm32_bridge_handle)hbridge;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	60fb      	str	r3, [r7, #12]
	if(pbridge->recv_cmd)
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d002      	beq.n	800d4ba <hal_bridge_usb_get_command+0x1a>
		return (Phid_bridge_cmd)&pbridge->rx_buf[0];
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	334c      	adds	r3, #76	; 0x4c
 800d4b8:	e000      	b.n	800d4bc <hal_bridge_usb_get_command+0x1c>
	return NULL;
 800d4ba:	2300      	movs	r3, #0
}
 800d4bc:	4618      	mov	r0, r3
 800d4be:	3714      	adds	r7, #20
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c6:	4770      	bx	lr

0800d4c8 <hal_bridge_usb_get_result>:

Phid_bridge_result hal_bridge_usb_get_result(hhal_bridge hbridge)
{
 800d4c8:	b480      	push	{r7}
 800d4ca:	b085      	sub	sp, #20
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
	Pstm32_bridge_handle pbridge = (Pstm32_bridge_handle)hbridge;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	60fb      	str	r3, [r7, #12]
	if(pbridge->recv_cmd)
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d002      	beq.n	800d4e2 <hal_bridge_usb_get_result+0x1a>
		return (Phid_bridge_result)&pbridge->tx_buf[0];
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	330c      	adds	r3, #12
 800d4e0:	e000      	b.n	800d4e4 <hal_bridge_usb_get_result+0x1c>
	return NULL;	
 800d4e2:	2300      	movs	r3, #0
}
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	3714      	adds	r7, #20
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ee:	4770      	bx	lr

0800d4f0 <hal_bridge_usb_commit>:

vatek_result hal_bridge_usb_commit(hhal_bridge hbridge)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b086      	sub	sp, #24
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
	Pstm32_bridge_handle pbridge = (Pstm32_bridge_handle)hbridge;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	613b      	str	r3, [r7, #16]
	vatek_result nres = vatek_badstatus;
 800d4fc:	f06f 0304 	mvn.w	r3, #4
 800d500:	617b      	str	r3, [r7, #20]
	if(pbridge->recv_cmd)
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d019      	beq.n	800d53e <hal_bridge_usb_commit+0x4e>
	{
		Pstm32_bridge_usb pusb = pbridge->pusb;
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	689b      	ldr	r3, [r3, #8]
 800d50e:	60fb      	str	r3, [r7, #12]
		nres = pusb->send(pusb->hbridge, &pbridge->tx_buf[0], HALBRIDGE_CMDBUF_LEN);
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	68db      	ldr	r3, [r3, #12]
 800d514:	68fa      	ldr	r2, [r7, #12]
 800d516:	6810      	ldr	r0, [r2, #0]
 800d518:	693a      	ldr	r2, [r7, #16]
 800d51a:	f102 010c 	add.w	r1, r2, #12
 800d51e:	2240      	movs	r2, #64	; 0x40
 800d520:	4798      	blx	r3
 800d522:	6178      	str	r0, [r7, #20]
		if (is_vatek_success(nres))nres = pusb->setready(pusb->hbridge);
 800d524:	697b      	ldr	r3, [r7, #20]
 800d526:	2b00      	cmp	r3, #0
 800d528:	db06      	blt.n	800d538 <hal_bridge_usb_commit+0x48>
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	689b      	ldr	r3, [r3, #8]
 800d52e:	68fa      	ldr	r2, [r7, #12]
 800d530:	6812      	ldr	r2, [r2, #0]
 800d532:	4610      	mov	r0, r2
 800d534:	4798      	blx	r3
 800d536:	6178      	str	r0, [r7, #20]
		pbridge->recv_cmd = 0;
 800d538:	693b      	ldr	r3, [r7, #16]
 800d53a:	2200      	movs	r2, #0
 800d53c:	601a      	str	r2, [r3, #0]
	}
	return nres;
 800d53e:	697b      	ldr	r3, [r7, #20]
}
 800d540:	4618      	mov	r0, r3
 800d542:	3718      	adds	r7, #24
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}

0800d548 <hal_bridge_usb_close>:

void hal_bridge_usb_close(hhal_bridge hbridge)
{
 800d548:	b480      	push	{r7}
 800d54a:	b083      	sub	sp, #12
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
	
}
 800d550:	bf00      	nop
 800d552:	370c      	adds	r7, #12
 800d554:	46bd      	mov	sp, r7
 800d556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55a:	4770      	bx	lr

0800d55c <stm32_bridge_recv_handler>:

vatek_result stm32_bridge_recv_handler(uint8_t* pbuf, int32_t len)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b088      	sub	sp, #32
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
 800d564:	6039      	str	r1, [r7, #0]
	vatek_result res = vatek_badparam;
 800d566:	f06f 0302 	mvn.w	r3, #2
 800d56a:	61fb      	str	r3, [r7, #28]
	if (len != HALBRIDGE_CMDBUF_LEN)return res;
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	2b40      	cmp	r3, #64	; 0x40
 800d570:	d001      	beq.n	800d576 <stm32_bridge_recv_handler+0x1a>
 800d572:	69fb      	ldr	r3, [r7, #28]
 800d574:	e06b      	b.n	800d64e <stm32_bridge_recv_handler+0xf2>
	else if(!hstm32usb)res = vatek_badstatus;
 800d576:	4b38      	ldr	r3, [pc, #224]	; (800d658 <stm32_bridge_recv_handler+0xfc>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d103      	bne.n	800d586 <stm32_bridge_recv_handler+0x2a>
 800d57e:	f06f 0304 	mvn.w	r3, #4
 800d582:	61fb      	str	r3, [r7, #28]
 800d584:	e062      	b.n	800d64c <stm32_bridge_recv_handler+0xf0>
	else
	{
		Phid_bridge_cmd pcmd = (Phid_bridge_cmd)&pbuf[0];
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	61bb      	str	r3, [r7, #24]
		Pstm32_bridge_usb pusb = hstm32usb->pusb;
 800d58a:	4b33      	ldr	r3, [pc, #204]	; (800d658 <stm32_bridge_recv_handler+0xfc>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	689b      	ldr	r3, [r3, #8]
 800d590:	617b      	str	r3, [r7, #20]
		Phid_bridge_result presult = (Phid_bridge_result)&hstm32usb->tx_buf[0];
 800d592:	4b31      	ldr	r3, [pc, #196]	; (800d658 <stm32_bridge_recv_handler+0xfc>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	330c      	adds	r3, #12
 800d598:	613b      	str	r3, [r7, #16]
		uint32_t usbcmd = vatek_buffer_2_uint32((uint8_t*)&pcmd->cmd);
 800d59a:	69bb      	ldr	r3, [r7, #24]
 800d59c:	3304      	adds	r3, #4
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f7ff fec5 	bl	800d32e <vatek_buffer_2_uint32>
 800d5a4:	60f8      	str	r0, [r7, #12]
		if (strncmp((const char*)&pcmd->tag[0], hid_bridge_tag, 4) != 0)return res;
 800d5a6:	69bb      	ldr	r3, [r7, #24]
 800d5a8:	2204      	movs	r2, #4
 800d5aa:	492c      	ldr	r1, [pc, #176]	; (800d65c <stm32_bridge_recv_handler+0x100>)
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	f000 fe8e 	bl	800e2ce <strncmp>
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d001      	beq.n	800d5bc <stm32_bridge_recv_handler+0x60>
 800d5b8:	69fb      	ldr	r3, [r7, #28]
 800d5ba:	e048      	b.n	800d64e <stm32_bridge_recv_handler+0xf2>
		else 
		{
            res = vatek_success;
 800d5bc:	2300      	movs	r3, #0
 800d5be:	61fb      	str	r3, [r7, #28]
			if (IS_USB_CMD(usbcmd))
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	da36      	bge.n	800d634 <stm32_bridge_recv_handler+0xd8>
			{
				if (usbcmd == USB_CMD_LOCK)hstm32usb->status = hid_status_locked;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	4a25      	ldr	r2, [pc, #148]	; (800d660 <stm32_bridge_recv_handler+0x104>)
 800d5ca:	4293      	cmp	r3, r2
 800d5cc:	d104      	bne.n	800d5d8 <stm32_bridge_recv_handler+0x7c>
 800d5ce:	4b22      	ldr	r3, [pc, #136]	; (800d658 <stm32_bridge_recv_handler+0xfc>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	2266      	movs	r2, #102	; 0x66
 800d5d4:	711a      	strb	r2, [r3, #4]
 800d5d6:	e007      	b.n	800d5e8 <stm32_bridge_recv_handler+0x8c>
				else if(usbcmd == USB_CMD_UNLOCK)hstm32usb->status = hid_status_idle;
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	4a22      	ldr	r2, [pc, #136]	; (800d664 <stm32_bridge_recv_handler+0x108>)
 800d5dc:	4293      	cmp	r3, r2
 800d5de:	d103      	bne.n	800d5e8 <stm32_bridge_recv_handler+0x8c>
 800d5e0:	4b1d      	ldr	r3, [pc, #116]	; (800d658 <stm32_bridge_recv_handler+0xfc>)
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	2264      	movs	r2, #100	; 0x64
 800d5e6:	711a      	strb	r2, [r3, #4]
				presult->result = res;
 800d5e8:	693b      	ldr	r3, [r7, #16]
 800d5ea:	69fa      	ldr	r2, [r7, #28]
 800d5ec:	609a      	str	r2, [r3, #8]
				presult->cmd = usbcmd;
 800d5ee:	693b      	ldr	r3, [r7, #16]
 800d5f0:	68fa      	ldr	r2, [r7, #12]
 800d5f2:	605a      	str	r2, [r3, #4]

				vatek_uint32_2_buffer((uint8_t*)&presult->result,(uint32_t)hstm32usb->status);
 800d5f4:	693b      	ldr	r3, [r7, #16]
 800d5f6:	f103 0208 	add.w	r2, r3, #8
 800d5fa:	4b17      	ldr	r3, [pc, #92]	; (800d658 <stm32_bridge_recv_handler+0xfc>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	791b      	ldrb	r3, [r3, #4]
 800d600:	4619      	mov	r1, r3
 800d602:	4610      	mov	r0, r2
 800d604:	f7ff feae 	bl	800d364 <vatek_uint32_2_buffer>
				res = pusb->send(pusb->hbridge, &hstm32usb->tx_buf[0], HALBRIDGE_CMDBUF_LEN);
 800d608:	697b      	ldr	r3, [r7, #20]
 800d60a:	68db      	ldr	r3, [r3, #12]
 800d60c:	697a      	ldr	r2, [r7, #20]
 800d60e:	6810      	ldr	r0, [r2, #0]
 800d610:	4a11      	ldr	r2, [pc, #68]	; (800d658 <stm32_bridge_recv_handler+0xfc>)
 800d612:	6812      	ldr	r2, [r2, #0]
 800d614:	f102 010c 	add.w	r1, r2, #12
 800d618:	2240      	movs	r2, #64	; 0x40
 800d61a:	4798      	blx	r3
 800d61c:	61f8      	str	r0, [r7, #28]
				if (is_vatek_success(res))
 800d61e:	69fb      	ldr	r3, [r7, #28]
 800d620:	2b00      	cmp	r3, #0
 800d622:	db13      	blt.n	800d64c <stm32_bridge_recv_handler+0xf0>
					res = pusb->setready(pusb->hbridge);
 800d624:	697b      	ldr	r3, [r7, #20]
 800d626:	689b      	ldr	r3, [r3, #8]
 800d628:	697a      	ldr	r2, [r7, #20]
 800d62a:	6812      	ldr	r2, [r2, #0]
 800d62c:	4610      	mov	r0, r2
 800d62e:	4798      	blx	r3
 800d630:	61f8      	str	r0, [r7, #28]
 800d632:	e00b      	b.n	800d64c <stm32_bridge_recv_handler+0xf0>
			}
			else
			{
				memcpy(&hstm32usb->rx_buf[0], pcmd, sizeof(hid_bridge_cmd));
 800d634:	4b08      	ldr	r3, [pc, #32]	; (800d658 <stm32_bridge_recv_handler+0xfc>)
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	334c      	adds	r3, #76	; 0x4c
 800d63a:	2240      	movs	r2, #64	; 0x40
 800d63c:	69b9      	ldr	r1, [r7, #24]
 800d63e:	4618      	mov	r0, r3
 800d640:	f000 fc6e 	bl	800df20 <memcpy>
				hstm32usb->recv_cmd = 1;
 800d644:	4b04      	ldr	r3, [pc, #16]	; (800d658 <stm32_bridge_recv_handler+0xfc>)
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	2201      	movs	r2, #1
 800d64a:	601a      	str	r2, [r3, #0]
			}
		}
	}

	return res;
 800d64c:	69fb      	ldr	r3, [r7, #28]
}
 800d64e:	4618      	mov	r0, r3
 800d650:	3720      	adds	r7, #32
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}
 800d656:	bf00      	nop
 800d658:	20000aec 	.word	0x20000aec
 800d65c:	08010128 	.word	0x08010128
 800d660:	80001000 	.word	0x80001000
 800d664:	80001001 	.word	0x80001001

0800d668 <stm32_hal_bridge_start>:
static Pstm32_hw_ip bridge_usb_ip = NULL;
static int32_t bridge_usb_start = 0;
static USBD_HandleTypeDef* bridge_usb_handle = NULL;

vatek_result stm32_hal_bridge_start(void)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b082      	sub	sp, #8
 800d66c:	af00      	add	r7, sp, #0
    vatek_result nres = vatek_unsupport;
 800d66e:	f06f 0301 	mvn.w	r3, #1
 800d672:	607b      	str	r3, [r7, #4]
    if(bridge_usb_ip == NULL)_S_ERR("stm32 usb not support.");
 800d674:	4b0e      	ldr	r3, [pc, #56]	; (800d6b0 <stm32_hal_bridge_start+0x48>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d014      	beq.n	800d6a6 <stm32_hal_bridge_start+0x3e>
    else
    {
        nres = vatek_badstatus;
 800d67c:	f06f 0304 	mvn.w	r3, #4
 800d680:	607b      	str	r3, [r7, #4]
        if(bridge_usb_start)_S_ERR("usb bridge alredy start.");
 800d682:	4b0c      	ldr	r3, [pc, #48]	; (800d6b4 <stm32_hal_bridge_start+0x4c>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d10d      	bne.n	800d6a6 <stm32_hal_bridge_start+0x3e>
        else{
            nres = vatek_success;
 800d68a:	2300      	movs	r3, #0
 800d68c:	607b      	str	r3, [r7, #4]
            bridge_usb_ip->init();   
 800d68e:	4b08      	ldr	r3, [pc, #32]	; (800d6b0 <stm32_hal_bridge_start+0x48>)
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	685b      	ldr	r3, [r3, #4]
 800d694:	4798      	blx	r3
            bridge_usb_handle = (USBD_HandleTypeDef*)bridge_usb_ip->handle;
 800d696:	4b06      	ldr	r3, [pc, #24]	; (800d6b0 <stm32_hal_bridge_start+0x48>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	68db      	ldr	r3, [r3, #12]
 800d69c:	4a06      	ldr	r2, [pc, #24]	; (800d6b8 <stm32_hal_bridge_start+0x50>)
 800d69e:	6013      	str	r3, [r2, #0]
            bridge_usb_start = 1;
 800d6a0:	4b04      	ldr	r3, [pc, #16]	; (800d6b4 <stm32_hal_bridge_start+0x4c>)
 800d6a2:	2201      	movs	r2, #1
 800d6a4:	601a      	str	r2, [r3, #0]
        }
    }
    return nres;
 800d6a6:	687b      	ldr	r3, [r7, #4]
}
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	3708      	adds	r7, #8
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	bd80      	pop	{r7, pc}
 800d6b0:	20000af0 	.word	0x20000af0
 800d6b4:	20000af4 	.word	0x20000af4
 800d6b8:	20000af8 	.word	0x20000af8

0800d6bc <stm32_usb_bridge_get>:

Pstm32_bridge_usb stm32_usb_bridge_get(void)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b082      	sub	sp, #8
 800d6c0:	af00      	add	r7, sp, #0
        .setrecv = stm32_usb_set_recv,
        .setready = stm32_usb_out_ready,
        .send = stm32_usb_send,
    };
    
    if(bridge_usb_ip == NULL)
 800d6c2:	4b1a      	ldr	r3, [pc, #104]	; (800d72c <stm32_usb_bridge_get+0x70>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d124      	bne.n	800d714 <stm32_usb_bridge_get+0x58>
    {
        vatek_result nres = vatek_unsupport;
 800d6ca:	f06f 0301 	mvn.w	r3, #1
 800d6ce:	607b      	str	r3, [r7, #4]
        Pstm32_hw_ip phwip = stm32_core_get_hwip(stm32_ip_bridge_usb);
 800d6d0:	2007      	movs	r0, #7
 800d6d2:	f7ff f95f 	bl	800c994 <stm32_core_get_hwip>
 800d6d6:	6038      	str	r0, [r7, #0]
        if(phwip == NULL)_S_ERR("bridge usb not supported");
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d01a      	beq.n	800d714 <stm32_usb_bridge_get+0x58>
        else
        {
            nres = hooked_stm32_custom_hid_class();
 800d6de:	f000 f82b 	bl	800d738 <hooked_stm32_custom_hid_class>
 800d6e2:	6078      	str	r0, [r7, #4]
            if(!is_vatek_success(nres))_S_ERR("modify bridge usb hid class fail : %d",nres);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	db14      	blt.n	800d714 <stm32_usb_bridge_get+0x58>
            else 
            {
                bridge_usb_ip = phwip;
 800d6ea:	4a10      	ldr	r2, [pc, #64]	; (800d72c <stm32_usb_bridge_get+0x70>)
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	6013      	str	r3, [r2, #0]
                bridge_usb.hbridge = phwip->handle;
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	68db      	ldr	r3, [r3, #12]
 800d6f4:	4a0e      	ldr	r2, [pc, #56]	; (800d730 <stm32_usb_bridge_get+0x74>)
 800d6f6:	6013      	str	r3, [r2, #0]
                stm32_usb_disable_pin(&phwip->pins[STM32_USB_IO_DM]);
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	689b      	ldr	r3, [r3, #8]
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	f000 f993 	bl	800da28 <stm32_usb_disable_pin>
                stm32_usb_disable_pin(&phwip->pins[STM32_USB_IO_DP]);
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	689b      	ldr	r3, [r3, #8]
 800d706:	3308      	adds	r3, #8
 800d708:	4618      	mov	r0, r3
 800d70a:	f000 f98d 	bl	800da28 <stm32_usb_disable_pin>
                bridge_usb_start = 0;
 800d70e:	4b09      	ldr	r3, [pc, #36]	; (800d734 <stm32_usb_bridge_get+0x78>)
 800d710:	2200      	movs	r2, #0
 800d712:	601a      	str	r2, [r3, #0]
            }
        }     
    }
    
    if(bridge_usb_ip == NULL)return NULL;
 800d714:	4b05      	ldr	r3, [pc, #20]	; (800d72c <stm32_usb_bridge_get+0x70>)
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d101      	bne.n	800d720 <stm32_usb_bridge_get+0x64>
 800d71c:	2300      	movs	r3, #0
 800d71e:	e000      	b.n	800d722 <stm32_usb_bridge_get+0x66>
    else return &bridge_usb;
 800d720:	4b03      	ldr	r3, [pc, #12]	; (800d730 <stm32_usb_bridge_get+0x74>)
}
 800d722:	4618      	mov	r0, r3
 800d724:	3708      	adds	r7, #8
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}
 800d72a:	bf00      	nop
 800d72c:	20000af0 	.word	0x20000af0
 800d730:	200001a4 	.word	0x200001a4
 800d734:	20000af4 	.word	0x20000af4

0800d738 <hooked_stm32_custom_hid_class>:
extern vatek_result usb_hid_modify_cfg_desc(void);
extern uint8_t hooked_hid_dataout(USBD_HandleTypeDef *pdev, uint8_t epnum);
extern uint8_t hooked_custom_hid_init(USBD_HandleTypeDef *pdev, uint8_t cfgidx);

vatek_result hooked_stm32_custom_hid_class(void)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b082      	sub	sp, #8
 800d73c:	af00      	add	r7, sp, #0
    vatek_result nres = vatek_badstatus;
 800d73e:	f06f 0304 	mvn.w	r3, #4
 800d742:	607b      	str	r3, [r7, #4]
    if(USBD_CUSTOM_HID_REPORT_DESC_SIZE != BRIDGE_REPORT_DESC_SIZE)_S_ERR("bad hid report desc len");
    else if(USB_CUSTOM_HID_CONFIG_DESC_SIZ != BRIDGE_DEVICE_DESC_SIZE)_S_ERR("bad device desc len");
    else if(USBD_CUSTOMHID_OUTREPORT_BUF_SIZE != STM32_HID_PACKET_LEN)_S_ERR("bad hid report buffer size");
    else 
    {
        nres = usb_hid_modify_cfg_desc();
 800d744:	f000 f81c 	bl	800d780 <usb_hid_modify_cfg_desc>
 800d748:	6078      	str	r0, [r7, #4]
        if(is_vatek_success(nres))
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	db08      	blt.n	800d762 <hooked_stm32_custom_hid_class+0x2a>
        {
            USBD_CustomHID_fops_FS.pReport = &stm32_bridge_hid_report[0];
 800d750:	4b06      	ldr	r3, [pc, #24]	; (800d76c <hooked_stm32_custom_hid_class+0x34>)
 800d752:	4a07      	ldr	r2, [pc, #28]	; (800d770 <hooked_stm32_custom_hid_class+0x38>)
 800d754:	601a      	str	r2, [r3, #0]
            USBD_CUSTOM_HID.DataOut = hooked_hid_dataout;
 800d756:	4b07      	ldr	r3, [pc, #28]	; (800d774 <hooked_stm32_custom_hid_class+0x3c>)
 800d758:	4a07      	ldr	r2, [pc, #28]	; (800d778 <hooked_stm32_custom_hid_class+0x40>)
 800d75a:	619a      	str	r2, [r3, #24]
            USBD_CUSTOM_HID.Init = hooked_custom_hid_init;
 800d75c:	4b05      	ldr	r3, [pc, #20]	; (800d774 <hooked_stm32_custom_hid_class+0x3c>)
 800d75e:	4a07      	ldr	r2, [pc, #28]	; (800d77c <hooked_stm32_custom_hid_class+0x44>)
 800d760:	601a      	str	r2, [r3, #0]
        }
    }
    return nres;
 800d762:	687b      	ldr	r3, [r7, #4]
}
 800d764:	4618      	mov	r0, r3
 800d766:	3708      	adds	r7, #8
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}
 800d76c:	20000104 	.word	0x20000104
 800d770:	20000180 	.word	0x20000180
 800d774:	2000000c 	.word	0x2000000c
 800d778:	0800d8d5 	.word	0x0800d8d5
 800d77c:	0800d84f 	.word	0x0800d84f

0800d780 <usb_hid_modify_cfg_desc>:
#if (__CM_CMSIS_VERSION_MAIN == 5)

extern vatek_result hid_cfg_desc_modified(uint8_t* pbuf,uint16_t len);

vatek_result usb_hid_modify_cfg_desc(void)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b084      	sub	sp, #16
 800d784:	af00      	add	r7, sp, #0
    uint16_t nlen = 0;
 800d786:	2300      	movs	r3, #0
 800d788:	80fb      	strh	r3, [r7, #6]
    uint8_t* pbuf = USBD_CUSTOM_HID.GetHSConfigDescriptor(&nlen);
 800d78a:	4b10      	ldr	r3, [pc, #64]	; (800d7cc <usb_hid_modify_cfg_desc+0x4c>)
 800d78c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d78e:	1dba      	adds	r2, r7, #6
 800d790:	4610      	mov	r0, r2
 800d792:	4798      	blx	r3
 800d794:	60b8      	str	r0, [r7, #8]
    vatek_result nres = hid_cfg_desc_modified(pbuf,nlen);
 800d796:	88fb      	ldrh	r3, [r7, #6]
 800d798:	4619      	mov	r1, r3
 800d79a:	68b8      	ldr	r0, [r7, #8]
 800d79c:	f000 f818 	bl	800d7d0 <hid_cfg_desc_modified>
 800d7a0:	60f8      	str	r0, [r7, #12]
    if(is_vatek_success(nres))
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	db0b      	blt.n	800d7c0 <usb_hid_modify_cfg_desc+0x40>
    {
        pbuf = USBD_CUSTOM_HID.GetFSConfigDescriptor(&nlen);
 800d7a8:	4b08      	ldr	r3, [pc, #32]	; (800d7cc <usb_hid_modify_cfg_desc+0x4c>)
 800d7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7ac:	1dba      	adds	r2, r7, #6
 800d7ae:	4610      	mov	r0, r2
 800d7b0:	4798      	blx	r3
 800d7b2:	60b8      	str	r0, [r7, #8]
        nres = hid_cfg_desc_modified(pbuf,nlen);
 800d7b4:	88fb      	ldrh	r3, [r7, #6]
 800d7b6:	4619      	mov	r1, r3
 800d7b8:	68b8      	ldr	r0, [r7, #8]
 800d7ba:	f000 f809 	bl	800d7d0 <hid_cfg_desc_modified>
 800d7be:	60f8      	str	r0, [r7, #12]
    }
    return nres;
 800d7c0:	68fb      	ldr	r3, [r7, #12]
}
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	3710      	adds	r7, #16
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}
 800d7ca:	bf00      	nop
 800d7cc:	2000000c 	.word	0x2000000c

0800d7d0 <hid_cfg_desc_modified>:

vatek_result hid_cfg_desc_modified(uint8_t* pbuf,uint16_t nlen)
{
 800d7d0:	b480      	push	{r7}
 800d7d2:	b087      	sub	sp, #28
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
 800d7d8:	460b      	mov	r3, r1
 800d7da:	807b      	strh	r3, [r7, #2]
    int32_t npos = 0;
 800d7dc:	2300      	movs	r3, #0
 800d7de:	617b      	str	r3, [r7, #20]
    int32_t bfound = 0;
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	613b      	str	r3, [r7, #16]
    vatek_result nres = vatek_success;
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	60fb      	str	r3, [r7, #12]
    
    while(npos < nlen)
 800d7e8:	e020      	b.n	800d82c <hid_cfg_desc_modified+0x5c>
    {
        uint8_t nlen = pbuf[npos];
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	687a      	ldr	r2, [r7, #4]
 800d7ee:	4413      	add	r3, r2
 800d7f0:	781b      	ldrb	r3, [r3, #0]
 800d7f2:	72fb      	strb	r3, [r7, #11]
        uint8_t ntype = pbuf[npos + 1];
 800d7f4:	697b      	ldr	r3, [r7, #20]
 800d7f6:	3301      	adds	r3, #1
 800d7f8:	687a      	ldr	r2, [r7, #4]
 800d7fa:	4413      	add	r3, r2
 800d7fc:	781b      	ldrb	r3, [r3, #0]
 800d7fe:	72bb      	strb	r3, [r7, #10]
        
        if(ntype == USB_DESC_TYPE_ENDPOINT)
 800d800:	7abb      	ldrb	r3, [r7, #10]
 800d802:	2b05      	cmp	r3, #5
 800d804:	d10e      	bne.n	800d824 <hid_cfg_desc_modified+0x54>
        {
            pbuf[npos + 4] = STM32_HID_PACKET_LEN;
 800d806:	697b      	ldr	r3, [r7, #20]
 800d808:	3304      	adds	r3, #4
 800d80a:	687a      	ldr	r2, [r7, #4]
 800d80c:	4413      	add	r3, r2
 800d80e:	2240      	movs	r2, #64	; 0x40
 800d810:	701a      	strb	r2, [r3, #0]
            pbuf[npos + 6] = STM32_HID_INTERVAL_MS;
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	3306      	adds	r3, #6
 800d816:	687a      	ldr	r2, [r7, #4]
 800d818:	4413      	add	r3, r2
 800d81a:	2201      	movs	r2, #1
 800d81c:	701a      	strb	r2, [r3, #0]
            bfound++;
 800d81e:	693b      	ldr	r3, [r7, #16]
 800d820:	3301      	adds	r3, #1
 800d822:	613b      	str	r3, [r7, #16]
        }
        
        npos += nlen;
 800d824:	7afb      	ldrb	r3, [r7, #11]
 800d826:	697a      	ldr	r2, [r7, #20]
 800d828:	4413      	add	r3, r2
 800d82a:	617b      	str	r3, [r7, #20]
    while(npos < nlen)
 800d82c:	887b      	ldrh	r3, [r7, #2]
 800d82e:	697a      	ldr	r2, [r7, #20]
 800d830:	429a      	cmp	r2, r3
 800d832:	dbda      	blt.n	800d7ea <hid_cfg_desc_modified+0x1a>
    }
    
    if(bfound != 2)
 800d834:	693b      	ldr	r3, [r7, #16]
 800d836:	2b02      	cmp	r3, #2
 800d838:	d002      	beq.n	800d840 <hid_cfg_desc_modified+0x70>
    {
        nres = vatek_badstatus;
 800d83a:	f06f 0304 	mvn.w	r3, #4
 800d83e:	60fb      	str	r3, [r7, #12]
        _S_ERR("usb endpoint desc fail : %d",bfound);
    }
    return nres;
 800d840:	68fb      	ldr	r3, [r7, #12]
}
 800d842:	4618      	mov	r0, r3
 800d844:	371c      	adds	r7, #28
 800d846:	46bd      	mov	sp, r7
 800d848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84c:	4770      	bx	lr

0800d84e <hooked_custom_hid_init>:

uint8_t hooked_custom_hid_init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d84e:	b580      	push	{r7, lr}
 800d850:	b084      	sub	sp, #16
 800d852:	af00      	add	r7, sp, #0
 800d854:	6078      	str	r0, [r7, #4]
 800d856:	460b      	mov	r3, r1
 800d858:	70fb      	strb	r3, [r7, #3]
    uint8_t ret = 0U;
 800d85a:	2300      	movs	r3, #0
 800d85c:	73fb      	strb	r3, [r7, #15]
    USBD_CUSTOM_HID_HandleTypeDef *hhid;

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,STM32_HID_PACKET_LEN);
 800d85e:	2340      	movs	r3, #64	; 0x40
 800d860:	2203      	movs	r2, #3
 800d862:	2181      	movs	r1, #129	; 0x81
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	f7fa fbae 	bl	8007fc6 <USBD_LL_OpenEP>
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2201      	movs	r2, #1
 800d86e:	871a      	strh	r2, [r3, #56]	; 0x38
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,STM32_HID_PACKET_LEN);
 800d870:	2340      	movs	r3, #64	; 0x40
 800d872:	2203      	movs	r2, #3
 800d874:	2101      	movs	r1, #1
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	f7fa fba5 	bl	8007fc6 <USBD_LL_OpenEP>
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2201      	movs	r2, #1
 800d880:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
    pdev->pClassData = USBD_malloc(sizeof (USBD_CUSTOM_HID_HandleTypeDef));
 800d884:	2054      	movs	r0, #84	; 0x54
 800d886:	f7fa fcaf 	bl	80081e8 <USBD_static_malloc>
 800d88a:	4602      	mov	r2, r0
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

    if(pdev->pClassData == NULL)ret = 1U;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d102      	bne.n	800d8a2 <hooked_custom_hid_init+0x54>
 800d89c:	2301      	movs	r3, #1
 800d89e:	73fb      	strb	r3, [r7, #15]
 800d8a0:	e012      	b.n	800d8c8 <hooked_custom_hid_init+0x7a>
    else
    {
        hhid = (USBD_CUSTOM_HID_HandleTypeDef*) pdev->pClassData;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d8a8:	60bb      	str	r3, [r7, #8]
        hhid->state = CUSTOM_HID_IDLE;
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d8b8:	685b      	ldr	r3, [r3, #4]
 800d8ba:	4798      	blx	r3
        /* Prepare Out endpoint to receive 1st packet */
        USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800d8bc:	68ba      	ldr	r2, [r7, #8]
 800d8be:	2340      	movs	r3, #64	; 0x40
 800d8c0:	2101      	movs	r1, #1
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	f7fa fc6e 	bl	80081a4 <USBD_LL_PrepareReceive>
    }
    return ret;
 800d8c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	3710      	adds	r7, #16
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}
	...

0800d8d4 <hooked_hid_dataout>:
static fpbridge_recv bridge_usb_handler = NULL;
static int32_t handle_locked = 0;
static USBD_CUSTOM_HID_HandleTypeDef *bridge_hid = NULL;

uint8_t hooked_hid_dataout(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b082      	sub	sp, #8
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
 800d8dc:	460b      	mov	r3, r1
 800d8de:	70fb      	strb	r3, [r7, #3]
    bridge_hid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d8e6:	4a0c      	ldr	r2, [pc, #48]	; (800d918 <hooked_hid_dataout+0x44>)
 800d8e8:	6013      	str	r3, [r2, #0]
    handle_locked = 1;
 800d8ea:	4b0c      	ldr	r3, [pc, #48]	; (800d91c <hooked_hid_dataout+0x48>)
 800d8ec:	2201      	movs	r2, #1
 800d8ee:	601a      	str	r2, [r3, #0]
    if(bridge_usb_handler != NULL)
 800d8f0:	4b0b      	ldr	r3, [pc, #44]	; (800d920 <hooked_hid_dataout+0x4c>)
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d006      	beq.n	800d906 <hooked_hid_dataout+0x32>
        bridge_usb_handler(&bridge_hid->Report_buf[0],USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800d8f8:	4b09      	ldr	r3, [pc, #36]	; (800d920 <hooked_hid_dataout+0x4c>)
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	4a06      	ldr	r2, [pc, #24]	; (800d918 <hooked_hid_dataout+0x44>)
 800d8fe:	6812      	ldr	r2, [r2, #0]
 800d900:	2140      	movs	r1, #64	; 0x40
 800d902:	4610      	mov	r0, r2
 800d904:	4798      	blx	r3
    handle_locked = 0;
 800d906:	4b05      	ldr	r3, [pc, #20]	; (800d91c <hooked_hid_dataout+0x48>)
 800d908:	2200      	movs	r2, #0
 800d90a:	601a      	str	r2, [r3, #0]
    return USBD_OK;
 800d90c:	2300      	movs	r3, #0
}
 800d90e:	4618      	mov	r0, r3
 800d910:	3708      	adds	r7, #8
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}
 800d916:	bf00      	nop
 800d918:	20000b04 	.word	0x20000b04
 800d91c:	20000b00 	.word	0x20000b00
 800d920:	20000afc 	.word	0x20000afc

0800d924 <stm32_usb_set_recv>:

vatek_result stm32_usb_set_recv(hstm32_usb hbridge,fpbridge_recv fprecv)
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b084      	sub	sp, #16
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
 800d92c:	6039      	str	r1, [r7, #0]
    vatek_result res = vatek_badstatus;
 800d92e:	f06f 0304 	mvn.w	r3, #4
 800d932:	60fb      	str	r3, [r7, #12]
    uint32_t tick = HAL_GetTick();
 800d934:	f7f3 fb5e 	bl	8000ff4 <HAL_GetTick>
 800d938:	60b8      	str	r0, [r7, #8]
    while(handle_locked && ((HAL_GetTick() - tick)< 1000));
 800d93a:	bf00      	nop
 800d93c:	4b0e      	ldr	r3, [pc, #56]	; (800d978 <stm32_usb_set_recv+0x54>)
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d007      	beq.n	800d954 <stm32_usb_set_recv+0x30>
 800d944:	f7f3 fb56 	bl	8000ff4 <HAL_GetTick>
 800d948:	4602      	mov	r2, r0
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	1ad3      	subs	r3, r2, r3
 800d94e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d952:	d3f3      	bcc.n	800d93c <stm32_usb_set_recv+0x18>
    bridge_usb_handler = fprecv;
 800d954:	4a09      	ldr	r2, [pc, #36]	; (800d97c <stm32_usb_set_recv+0x58>)
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	6013      	str	r3, [r2, #0]
    
    if((HAL_GetTick() - tick) > 1000)_S_ERR("set recv handle timeout.");
 800d95a:	f7f3 fb4b 	bl	8000ff4 <HAL_GetTick>
 800d95e:	4602      	mov	r2, r0
 800d960:	68bb      	ldr	r3, [r7, #8]
 800d962:	1ad3      	subs	r3, r2, r3
 800d964:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d968:	d801      	bhi.n	800d96e <stm32_usb_set_recv+0x4a>
    else res = vatek_success;
 800d96a:	2300      	movs	r3, #0
 800d96c:	60fb      	str	r3, [r7, #12]
    return res;
 800d96e:	68fb      	ldr	r3, [r7, #12]
}
 800d970:	4618      	mov	r0, r3
 800d972:	3710      	adds	r7, #16
 800d974:	46bd      	mov	sp, r7
 800d976:	bd80      	pop	{r7, pc}
 800d978:	20000b00 	.word	0x20000b00
 800d97c:	20000afc 	.word	0x20000afc

0800d980 <stm32_usb_out_ready>:

vatek_result stm32_usb_out_ready(hstm32_usb hbridge)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b084      	sub	sp, #16
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
    vatek_result nres = vatek_badstatus;
 800d988:	f06f 0304 	mvn.w	r3, #4
 800d98c:	60fb      	str	r3, [r7, #12]
    if(!bridge_usb_start)_S_ERR("usb bridged not start.");
 800d98e:	4b0e      	ldr	r3, [pc, #56]	; (800d9c8 <stm32_usb_out_ready+0x48>)
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d013      	beq.n	800d9be <stm32_usb_out_ready+0x3e>
    else{
        if(bridge_usb_handle != NULL)
 800d996:	4b0d      	ldr	r3, [pc, #52]	; (800d9cc <stm32_usb_out_ready+0x4c>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d00f      	beq.n	800d9be <stm32_usb_out_ready+0x3e>
        {
            USBD_StatusTypeDef res = USBD_LL_PrepareReceive(bridge_usb_handle, 
 800d99e:	4b0b      	ldr	r3, [pc, #44]	; (800d9cc <stm32_usb_out_ready+0x4c>)
 800d9a0:	6818      	ldr	r0, [r3, #0]
                                                            CUSTOM_HID_EPOUT_ADDR ,
                                                            bridge_hid->Report_buf, 
 800d9a2:	4b0b      	ldr	r3, [pc, #44]	; (800d9d0 <stm32_usb_out_ready+0x50>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	461a      	mov	r2, r3
            USBD_StatusTypeDef res = USBD_LL_PrepareReceive(bridge_usb_handle, 
 800d9a8:	2340      	movs	r3, #64	; 0x40
 800d9aa:	2101      	movs	r1, #1
 800d9ac:	f7fa fbfa 	bl	80081a4 <USBD_LL_PrepareReceive>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	72fb      	strb	r3, [r7, #11]
                                                            USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
            if(res != USBD_OK)_S_ERR("prepare recv fail : %d",res);
 800d9b4:	7afb      	ldrb	r3, [r7, #11]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d101      	bne.n	800d9be <stm32_usb_out_ready+0x3e>
            else nres = vatek_success;  
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	60fb      	str	r3, [r7, #12]
        }else _S_ERR("usb handle NULL"); 
    }
    return nres;
 800d9be:	68fb      	ldr	r3, [r7, #12]
}
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	3710      	adds	r7, #16
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}
 800d9c8:	20000af4 	.word	0x20000af4
 800d9cc:	20000af8 	.word	0x20000af8
 800d9d0:	20000b04 	.word	0x20000b04

0800d9d4 <stm32_usb_send>:

vatek_result stm32_usb_send(hstm32_usb hbridge,uint8_t* pbuf, int32_t len)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b086      	sub	sp, #24
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	60f8      	str	r0, [r7, #12]
 800d9dc:	60b9      	str	r1, [r7, #8]
 800d9de:	607a      	str	r2, [r7, #4]
    vatek_result nres = vatek_badstatus;
 800d9e0:	f06f 0304 	mvn.w	r3, #4
 800d9e4:	617b      	str	r3, [r7, #20]
    if(!bridge_usb_start)_S_ERR("usb bridged not start.");
 800d9e6:	4b0e      	ldr	r3, [pc, #56]	; (800da20 <stm32_usb_send+0x4c>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d012      	beq.n	800da14 <stm32_usb_send+0x40>
    else
    {
       if(bridge_usb_handle != NULL)
 800d9ee:	4b0d      	ldr	r3, [pc, #52]	; (800da24 <stm32_usb_send+0x50>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d00e      	beq.n	800da14 <stm32_usb_send+0x40>
        {
            uint8_t res = USBD_CUSTOM_HID_SendReport(bridge_usb_handle,pbuf,len);
 800d9f6:	4b0b      	ldr	r3, [pc, #44]	; (800da24 <stm32_usb_send+0x50>)
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	687a      	ldr	r2, [r7, #4]
 800d9fc:	b292      	uxth	r2, r2
 800d9fe:	68b9      	ldr	r1, [r7, #8]
 800da00:	4618      	mov	r0, r3
 800da02:	f7f8 fd7d 	bl	8006500 <USBD_CUSTOM_HID_SendReport>
 800da06:	4603      	mov	r3, r0
 800da08:	74fb      	strb	r3, [r7, #19]
            if(res == USBD_OK)nres = vatek_success;
 800da0a:	7cfb      	ldrb	r3, [r7, #19]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d101      	bne.n	800da14 <stm32_usb_send+0x40>
 800da10:	2300      	movs	r3, #0
 800da12:	617b      	str	r3, [r7, #20]
            else _S_ERR("usb send report fail : %d",res);
        }else _S_ERR("usb handle NULL");     
    }


    return nres;
 800da14:	697b      	ldr	r3, [r7, #20]
}
 800da16:	4618      	mov	r0, r3
 800da18:	3718      	adds	r7, #24
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}
 800da1e:	bf00      	nop
 800da20:	20000af4 	.word	0x20000af4
 800da24:	20000af8 	.word	0x20000af8

0800da28 <stm32_usb_disable_pin>:

void stm32_usb_disable_pin(Pstm32_pin pin)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b088      	sub	sp, #32
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;
    GPIO_InitStruct.Pin = pin->index;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	889b      	ldrh	r3, [r3, #4]
 800da34:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800da36:	2301      	movs	r3, #1
 800da38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da3a:	2300      	movs	r3, #0
 800da3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800da3e:	2303      	movs	r3, #3
 800da40:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800da42:	f107 030c 	add.w	r3, r7, #12
 800da46:	4619      	mov	r1, r3
 800da48:	4807      	ldr	r0, [pc, #28]	; (800da68 <stm32_usb_disable_pin+0x40>)
 800da4a:	f7f3 fc43 	bl	80012d4 <HAL_GPIO_Init>
    
    HAL_GPIO_WritePin(pin->port,pin->index,GPIO_PIN_RESET);    
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6818      	ldr	r0, [r3, #0]
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	889b      	ldrh	r3, [r3, #4]
 800da56:	2200      	movs	r2, #0
 800da58:	4619      	mov	r1, r3
 800da5a:	f7f3 fecf 	bl	80017fc <HAL_GPIO_WritePin>
}
 800da5e:	bf00      	nop
 800da60:	3720      	adds	r7, #32
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}
 800da66:	bf00      	nop
 800da68:	40020000 	.word	0x40020000

0800da6c <__errno>:
 800da6c:	4b01      	ldr	r3, [pc, #4]	; (800da74 <__errno+0x8>)
 800da6e:	6818      	ldr	r0, [r3, #0]
 800da70:	4770      	bx	lr
 800da72:	bf00      	nop
 800da74:	200001b4 	.word	0x200001b4

0800da78 <__sflush_r>:
 800da78:	898a      	ldrh	r2, [r1, #12]
 800da7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da7e:	4605      	mov	r5, r0
 800da80:	0710      	lsls	r0, r2, #28
 800da82:	460c      	mov	r4, r1
 800da84:	d458      	bmi.n	800db38 <__sflush_r+0xc0>
 800da86:	684b      	ldr	r3, [r1, #4]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	dc05      	bgt.n	800da98 <__sflush_r+0x20>
 800da8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800da8e:	2b00      	cmp	r3, #0
 800da90:	dc02      	bgt.n	800da98 <__sflush_r+0x20>
 800da92:	2000      	movs	r0, #0
 800da94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800da9a:	2e00      	cmp	r6, #0
 800da9c:	d0f9      	beq.n	800da92 <__sflush_r+0x1a>
 800da9e:	2300      	movs	r3, #0
 800daa0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800daa4:	682f      	ldr	r7, [r5, #0]
 800daa6:	602b      	str	r3, [r5, #0]
 800daa8:	d032      	beq.n	800db10 <__sflush_r+0x98>
 800daaa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800daac:	89a3      	ldrh	r3, [r4, #12]
 800daae:	075a      	lsls	r2, r3, #29
 800dab0:	d505      	bpl.n	800dabe <__sflush_r+0x46>
 800dab2:	6863      	ldr	r3, [r4, #4]
 800dab4:	1ac0      	subs	r0, r0, r3
 800dab6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dab8:	b10b      	cbz	r3, 800dabe <__sflush_r+0x46>
 800daba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dabc:	1ac0      	subs	r0, r0, r3
 800dabe:	2300      	movs	r3, #0
 800dac0:	4602      	mov	r2, r0
 800dac2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dac4:	6a21      	ldr	r1, [r4, #32]
 800dac6:	4628      	mov	r0, r5
 800dac8:	47b0      	blx	r6
 800daca:	1c43      	adds	r3, r0, #1
 800dacc:	89a3      	ldrh	r3, [r4, #12]
 800dace:	d106      	bne.n	800dade <__sflush_r+0x66>
 800dad0:	6829      	ldr	r1, [r5, #0]
 800dad2:	291d      	cmp	r1, #29
 800dad4:	d82c      	bhi.n	800db30 <__sflush_r+0xb8>
 800dad6:	4a2a      	ldr	r2, [pc, #168]	; (800db80 <__sflush_r+0x108>)
 800dad8:	40ca      	lsrs	r2, r1
 800dada:	07d6      	lsls	r6, r2, #31
 800dadc:	d528      	bpl.n	800db30 <__sflush_r+0xb8>
 800dade:	2200      	movs	r2, #0
 800dae0:	6062      	str	r2, [r4, #4]
 800dae2:	04d9      	lsls	r1, r3, #19
 800dae4:	6922      	ldr	r2, [r4, #16]
 800dae6:	6022      	str	r2, [r4, #0]
 800dae8:	d504      	bpl.n	800daf4 <__sflush_r+0x7c>
 800daea:	1c42      	adds	r2, r0, #1
 800daec:	d101      	bne.n	800daf2 <__sflush_r+0x7a>
 800daee:	682b      	ldr	r3, [r5, #0]
 800daf0:	b903      	cbnz	r3, 800daf4 <__sflush_r+0x7c>
 800daf2:	6560      	str	r0, [r4, #84]	; 0x54
 800daf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800daf6:	602f      	str	r7, [r5, #0]
 800daf8:	2900      	cmp	r1, #0
 800dafa:	d0ca      	beq.n	800da92 <__sflush_r+0x1a>
 800dafc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db00:	4299      	cmp	r1, r3
 800db02:	d002      	beq.n	800db0a <__sflush_r+0x92>
 800db04:	4628      	mov	r0, r5
 800db06:	f000 fa21 	bl	800df4c <_free_r>
 800db0a:	2000      	movs	r0, #0
 800db0c:	6360      	str	r0, [r4, #52]	; 0x34
 800db0e:	e7c1      	b.n	800da94 <__sflush_r+0x1c>
 800db10:	6a21      	ldr	r1, [r4, #32]
 800db12:	2301      	movs	r3, #1
 800db14:	4628      	mov	r0, r5
 800db16:	47b0      	blx	r6
 800db18:	1c41      	adds	r1, r0, #1
 800db1a:	d1c7      	bne.n	800daac <__sflush_r+0x34>
 800db1c:	682b      	ldr	r3, [r5, #0]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d0c4      	beq.n	800daac <__sflush_r+0x34>
 800db22:	2b1d      	cmp	r3, #29
 800db24:	d001      	beq.n	800db2a <__sflush_r+0xb2>
 800db26:	2b16      	cmp	r3, #22
 800db28:	d101      	bne.n	800db2e <__sflush_r+0xb6>
 800db2a:	602f      	str	r7, [r5, #0]
 800db2c:	e7b1      	b.n	800da92 <__sflush_r+0x1a>
 800db2e:	89a3      	ldrh	r3, [r4, #12]
 800db30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db34:	81a3      	strh	r3, [r4, #12]
 800db36:	e7ad      	b.n	800da94 <__sflush_r+0x1c>
 800db38:	690f      	ldr	r7, [r1, #16]
 800db3a:	2f00      	cmp	r7, #0
 800db3c:	d0a9      	beq.n	800da92 <__sflush_r+0x1a>
 800db3e:	0793      	lsls	r3, r2, #30
 800db40:	680e      	ldr	r6, [r1, #0]
 800db42:	bf08      	it	eq
 800db44:	694b      	ldreq	r3, [r1, #20]
 800db46:	600f      	str	r7, [r1, #0]
 800db48:	bf18      	it	ne
 800db4a:	2300      	movne	r3, #0
 800db4c:	eba6 0807 	sub.w	r8, r6, r7
 800db50:	608b      	str	r3, [r1, #8]
 800db52:	f1b8 0f00 	cmp.w	r8, #0
 800db56:	dd9c      	ble.n	800da92 <__sflush_r+0x1a>
 800db58:	6a21      	ldr	r1, [r4, #32]
 800db5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800db5c:	4643      	mov	r3, r8
 800db5e:	463a      	mov	r2, r7
 800db60:	4628      	mov	r0, r5
 800db62:	47b0      	blx	r6
 800db64:	2800      	cmp	r0, #0
 800db66:	dc06      	bgt.n	800db76 <__sflush_r+0xfe>
 800db68:	89a3      	ldrh	r3, [r4, #12]
 800db6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db6e:	81a3      	strh	r3, [r4, #12]
 800db70:	f04f 30ff 	mov.w	r0, #4294967295
 800db74:	e78e      	b.n	800da94 <__sflush_r+0x1c>
 800db76:	4407      	add	r7, r0
 800db78:	eba8 0800 	sub.w	r8, r8, r0
 800db7c:	e7e9      	b.n	800db52 <__sflush_r+0xda>
 800db7e:	bf00      	nop
 800db80:	20400001 	.word	0x20400001

0800db84 <_fflush_r>:
 800db84:	b538      	push	{r3, r4, r5, lr}
 800db86:	690b      	ldr	r3, [r1, #16]
 800db88:	4605      	mov	r5, r0
 800db8a:	460c      	mov	r4, r1
 800db8c:	b913      	cbnz	r3, 800db94 <_fflush_r+0x10>
 800db8e:	2500      	movs	r5, #0
 800db90:	4628      	mov	r0, r5
 800db92:	bd38      	pop	{r3, r4, r5, pc}
 800db94:	b118      	cbz	r0, 800db9e <_fflush_r+0x1a>
 800db96:	6983      	ldr	r3, [r0, #24]
 800db98:	b90b      	cbnz	r3, 800db9e <_fflush_r+0x1a>
 800db9a:	f000 f887 	bl	800dcac <__sinit>
 800db9e:	4b14      	ldr	r3, [pc, #80]	; (800dbf0 <_fflush_r+0x6c>)
 800dba0:	429c      	cmp	r4, r3
 800dba2:	d11b      	bne.n	800dbdc <_fflush_r+0x58>
 800dba4:	686c      	ldr	r4, [r5, #4]
 800dba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d0ef      	beq.n	800db8e <_fflush_r+0xa>
 800dbae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dbb0:	07d0      	lsls	r0, r2, #31
 800dbb2:	d404      	bmi.n	800dbbe <_fflush_r+0x3a>
 800dbb4:	0599      	lsls	r1, r3, #22
 800dbb6:	d402      	bmi.n	800dbbe <_fflush_r+0x3a>
 800dbb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dbba:	f000 f93a 	bl	800de32 <__retarget_lock_acquire_recursive>
 800dbbe:	4628      	mov	r0, r5
 800dbc0:	4621      	mov	r1, r4
 800dbc2:	f7ff ff59 	bl	800da78 <__sflush_r>
 800dbc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dbc8:	07da      	lsls	r2, r3, #31
 800dbca:	4605      	mov	r5, r0
 800dbcc:	d4e0      	bmi.n	800db90 <_fflush_r+0xc>
 800dbce:	89a3      	ldrh	r3, [r4, #12]
 800dbd0:	059b      	lsls	r3, r3, #22
 800dbd2:	d4dd      	bmi.n	800db90 <_fflush_r+0xc>
 800dbd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dbd6:	f000 f92d 	bl	800de34 <__retarget_lock_release_recursive>
 800dbda:	e7d9      	b.n	800db90 <_fflush_r+0xc>
 800dbdc:	4b05      	ldr	r3, [pc, #20]	; (800dbf4 <_fflush_r+0x70>)
 800dbde:	429c      	cmp	r4, r3
 800dbe0:	d101      	bne.n	800dbe6 <_fflush_r+0x62>
 800dbe2:	68ac      	ldr	r4, [r5, #8]
 800dbe4:	e7df      	b.n	800dba6 <_fflush_r+0x22>
 800dbe6:	4b04      	ldr	r3, [pc, #16]	; (800dbf8 <_fflush_r+0x74>)
 800dbe8:	429c      	cmp	r4, r3
 800dbea:	bf08      	it	eq
 800dbec:	68ec      	ldreq	r4, [r5, #12]
 800dbee:	e7da      	b.n	800dba6 <_fflush_r+0x22>
 800dbf0:	0801014c 	.word	0x0801014c
 800dbf4:	0801016c 	.word	0x0801016c
 800dbf8:	0801012c 	.word	0x0801012c

0800dbfc <std>:
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	b510      	push	{r4, lr}
 800dc00:	4604      	mov	r4, r0
 800dc02:	e9c0 3300 	strd	r3, r3, [r0]
 800dc06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dc0a:	6083      	str	r3, [r0, #8]
 800dc0c:	8181      	strh	r1, [r0, #12]
 800dc0e:	6643      	str	r3, [r0, #100]	; 0x64
 800dc10:	81c2      	strh	r2, [r0, #14]
 800dc12:	6183      	str	r3, [r0, #24]
 800dc14:	4619      	mov	r1, r3
 800dc16:	2208      	movs	r2, #8
 800dc18:	305c      	adds	r0, #92	; 0x5c
 800dc1a:	f000 f98f 	bl	800df3c <memset>
 800dc1e:	4b05      	ldr	r3, [pc, #20]	; (800dc34 <std+0x38>)
 800dc20:	6263      	str	r3, [r4, #36]	; 0x24
 800dc22:	4b05      	ldr	r3, [pc, #20]	; (800dc38 <std+0x3c>)
 800dc24:	62a3      	str	r3, [r4, #40]	; 0x28
 800dc26:	4b05      	ldr	r3, [pc, #20]	; (800dc3c <std+0x40>)
 800dc28:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dc2a:	4b05      	ldr	r3, [pc, #20]	; (800dc40 <std+0x44>)
 800dc2c:	6224      	str	r4, [r4, #32]
 800dc2e:	6323      	str	r3, [r4, #48]	; 0x30
 800dc30:	bd10      	pop	{r4, pc}
 800dc32:	bf00      	nop
 800dc34:	0800e249 	.word	0x0800e249
 800dc38:	0800e26b 	.word	0x0800e26b
 800dc3c:	0800e2a3 	.word	0x0800e2a3
 800dc40:	0800e2c7 	.word	0x0800e2c7

0800dc44 <_cleanup_r>:
 800dc44:	4901      	ldr	r1, [pc, #4]	; (800dc4c <_cleanup_r+0x8>)
 800dc46:	f000 b8af 	b.w	800dda8 <_fwalk_reent>
 800dc4a:	bf00      	nop
 800dc4c:	0800db85 	.word	0x0800db85

0800dc50 <__sfmoreglue>:
 800dc50:	b570      	push	{r4, r5, r6, lr}
 800dc52:	2268      	movs	r2, #104	; 0x68
 800dc54:	1e4d      	subs	r5, r1, #1
 800dc56:	4355      	muls	r5, r2
 800dc58:	460e      	mov	r6, r1
 800dc5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dc5e:	f000 f9e1 	bl	800e024 <_malloc_r>
 800dc62:	4604      	mov	r4, r0
 800dc64:	b140      	cbz	r0, 800dc78 <__sfmoreglue+0x28>
 800dc66:	2100      	movs	r1, #0
 800dc68:	e9c0 1600 	strd	r1, r6, [r0]
 800dc6c:	300c      	adds	r0, #12
 800dc6e:	60a0      	str	r0, [r4, #8]
 800dc70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dc74:	f000 f962 	bl	800df3c <memset>
 800dc78:	4620      	mov	r0, r4
 800dc7a:	bd70      	pop	{r4, r5, r6, pc}

0800dc7c <__sfp_lock_acquire>:
 800dc7c:	4801      	ldr	r0, [pc, #4]	; (800dc84 <__sfp_lock_acquire+0x8>)
 800dc7e:	f000 b8d8 	b.w	800de32 <__retarget_lock_acquire_recursive>
 800dc82:	bf00      	nop
 800dc84:	20000b09 	.word	0x20000b09

0800dc88 <__sfp_lock_release>:
 800dc88:	4801      	ldr	r0, [pc, #4]	; (800dc90 <__sfp_lock_release+0x8>)
 800dc8a:	f000 b8d3 	b.w	800de34 <__retarget_lock_release_recursive>
 800dc8e:	bf00      	nop
 800dc90:	20000b09 	.word	0x20000b09

0800dc94 <__sinit_lock_acquire>:
 800dc94:	4801      	ldr	r0, [pc, #4]	; (800dc9c <__sinit_lock_acquire+0x8>)
 800dc96:	f000 b8cc 	b.w	800de32 <__retarget_lock_acquire_recursive>
 800dc9a:	bf00      	nop
 800dc9c:	20000b0a 	.word	0x20000b0a

0800dca0 <__sinit_lock_release>:
 800dca0:	4801      	ldr	r0, [pc, #4]	; (800dca8 <__sinit_lock_release+0x8>)
 800dca2:	f000 b8c7 	b.w	800de34 <__retarget_lock_release_recursive>
 800dca6:	bf00      	nop
 800dca8:	20000b0a 	.word	0x20000b0a

0800dcac <__sinit>:
 800dcac:	b510      	push	{r4, lr}
 800dcae:	4604      	mov	r4, r0
 800dcb0:	f7ff fff0 	bl	800dc94 <__sinit_lock_acquire>
 800dcb4:	69a3      	ldr	r3, [r4, #24]
 800dcb6:	b11b      	cbz	r3, 800dcc0 <__sinit+0x14>
 800dcb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dcbc:	f7ff bff0 	b.w	800dca0 <__sinit_lock_release>
 800dcc0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800dcc4:	6523      	str	r3, [r4, #80]	; 0x50
 800dcc6:	4b13      	ldr	r3, [pc, #76]	; (800dd14 <__sinit+0x68>)
 800dcc8:	4a13      	ldr	r2, [pc, #76]	; (800dd18 <__sinit+0x6c>)
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	62a2      	str	r2, [r4, #40]	; 0x28
 800dcce:	42a3      	cmp	r3, r4
 800dcd0:	bf04      	itt	eq
 800dcd2:	2301      	moveq	r3, #1
 800dcd4:	61a3      	streq	r3, [r4, #24]
 800dcd6:	4620      	mov	r0, r4
 800dcd8:	f000 f820 	bl	800dd1c <__sfp>
 800dcdc:	6060      	str	r0, [r4, #4]
 800dcde:	4620      	mov	r0, r4
 800dce0:	f000 f81c 	bl	800dd1c <__sfp>
 800dce4:	60a0      	str	r0, [r4, #8]
 800dce6:	4620      	mov	r0, r4
 800dce8:	f000 f818 	bl	800dd1c <__sfp>
 800dcec:	2200      	movs	r2, #0
 800dcee:	60e0      	str	r0, [r4, #12]
 800dcf0:	2104      	movs	r1, #4
 800dcf2:	6860      	ldr	r0, [r4, #4]
 800dcf4:	f7ff ff82 	bl	800dbfc <std>
 800dcf8:	68a0      	ldr	r0, [r4, #8]
 800dcfa:	2201      	movs	r2, #1
 800dcfc:	2109      	movs	r1, #9
 800dcfe:	f7ff ff7d 	bl	800dbfc <std>
 800dd02:	68e0      	ldr	r0, [r4, #12]
 800dd04:	2202      	movs	r2, #2
 800dd06:	2112      	movs	r1, #18
 800dd08:	f7ff ff78 	bl	800dbfc <std>
 800dd0c:	2301      	movs	r3, #1
 800dd0e:	61a3      	str	r3, [r4, #24]
 800dd10:	e7d2      	b.n	800dcb8 <__sinit+0xc>
 800dd12:	bf00      	nop
 800dd14:	0801018c 	.word	0x0801018c
 800dd18:	0800dc45 	.word	0x0800dc45

0800dd1c <__sfp>:
 800dd1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd1e:	4607      	mov	r7, r0
 800dd20:	f7ff ffac 	bl	800dc7c <__sfp_lock_acquire>
 800dd24:	4b1e      	ldr	r3, [pc, #120]	; (800dda0 <__sfp+0x84>)
 800dd26:	681e      	ldr	r6, [r3, #0]
 800dd28:	69b3      	ldr	r3, [r6, #24]
 800dd2a:	b913      	cbnz	r3, 800dd32 <__sfp+0x16>
 800dd2c:	4630      	mov	r0, r6
 800dd2e:	f7ff ffbd 	bl	800dcac <__sinit>
 800dd32:	3648      	adds	r6, #72	; 0x48
 800dd34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dd38:	3b01      	subs	r3, #1
 800dd3a:	d503      	bpl.n	800dd44 <__sfp+0x28>
 800dd3c:	6833      	ldr	r3, [r6, #0]
 800dd3e:	b30b      	cbz	r3, 800dd84 <__sfp+0x68>
 800dd40:	6836      	ldr	r6, [r6, #0]
 800dd42:	e7f7      	b.n	800dd34 <__sfp+0x18>
 800dd44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dd48:	b9d5      	cbnz	r5, 800dd80 <__sfp+0x64>
 800dd4a:	4b16      	ldr	r3, [pc, #88]	; (800dda4 <__sfp+0x88>)
 800dd4c:	60e3      	str	r3, [r4, #12]
 800dd4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dd52:	6665      	str	r5, [r4, #100]	; 0x64
 800dd54:	f000 f86c 	bl	800de30 <__retarget_lock_init_recursive>
 800dd58:	f7ff ff96 	bl	800dc88 <__sfp_lock_release>
 800dd5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dd60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dd64:	6025      	str	r5, [r4, #0]
 800dd66:	61a5      	str	r5, [r4, #24]
 800dd68:	2208      	movs	r2, #8
 800dd6a:	4629      	mov	r1, r5
 800dd6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dd70:	f000 f8e4 	bl	800df3c <memset>
 800dd74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dd78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dd7c:	4620      	mov	r0, r4
 800dd7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd80:	3468      	adds	r4, #104	; 0x68
 800dd82:	e7d9      	b.n	800dd38 <__sfp+0x1c>
 800dd84:	2104      	movs	r1, #4
 800dd86:	4638      	mov	r0, r7
 800dd88:	f7ff ff62 	bl	800dc50 <__sfmoreglue>
 800dd8c:	4604      	mov	r4, r0
 800dd8e:	6030      	str	r0, [r6, #0]
 800dd90:	2800      	cmp	r0, #0
 800dd92:	d1d5      	bne.n	800dd40 <__sfp+0x24>
 800dd94:	f7ff ff78 	bl	800dc88 <__sfp_lock_release>
 800dd98:	230c      	movs	r3, #12
 800dd9a:	603b      	str	r3, [r7, #0]
 800dd9c:	e7ee      	b.n	800dd7c <__sfp+0x60>
 800dd9e:	bf00      	nop
 800dda0:	0801018c 	.word	0x0801018c
 800dda4:	ffff0001 	.word	0xffff0001

0800dda8 <_fwalk_reent>:
 800dda8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddac:	4606      	mov	r6, r0
 800ddae:	4688      	mov	r8, r1
 800ddb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ddb4:	2700      	movs	r7, #0
 800ddb6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ddba:	f1b9 0901 	subs.w	r9, r9, #1
 800ddbe:	d505      	bpl.n	800ddcc <_fwalk_reent+0x24>
 800ddc0:	6824      	ldr	r4, [r4, #0]
 800ddc2:	2c00      	cmp	r4, #0
 800ddc4:	d1f7      	bne.n	800ddb6 <_fwalk_reent+0xe>
 800ddc6:	4638      	mov	r0, r7
 800ddc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddcc:	89ab      	ldrh	r3, [r5, #12]
 800ddce:	2b01      	cmp	r3, #1
 800ddd0:	d907      	bls.n	800dde2 <_fwalk_reent+0x3a>
 800ddd2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ddd6:	3301      	adds	r3, #1
 800ddd8:	d003      	beq.n	800dde2 <_fwalk_reent+0x3a>
 800ddda:	4629      	mov	r1, r5
 800dddc:	4630      	mov	r0, r6
 800ddde:	47c0      	blx	r8
 800dde0:	4307      	orrs	r7, r0
 800dde2:	3568      	adds	r5, #104	; 0x68
 800dde4:	e7e9      	b.n	800ddba <_fwalk_reent+0x12>
	...

0800dde8 <__libc_init_array>:
 800dde8:	b570      	push	{r4, r5, r6, lr}
 800ddea:	4d0d      	ldr	r5, [pc, #52]	; (800de20 <__libc_init_array+0x38>)
 800ddec:	4c0d      	ldr	r4, [pc, #52]	; (800de24 <__libc_init_array+0x3c>)
 800ddee:	1b64      	subs	r4, r4, r5
 800ddf0:	10a4      	asrs	r4, r4, #2
 800ddf2:	2600      	movs	r6, #0
 800ddf4:	42a6      	cmp	r6, r4
 800ddf6:	d109      	bne.n	800de0c <__libc_init_array+0x24>
 800ddf8:	4d0b      	ldr	r5, [pc, #44]	; (800de28 <__libc_init_array+0x40>)
 800ddfa:	4c0c      	ldr	r4, [pc, #48]	; (800de2c <__libc_init_array+0x44>)
 800ddfc:	f000 feb6 	bl	800eb6c <_init>
 800de00:	1b64      	subs	r4, r4, r5
 800de02:	10a4      	asrs	r4, r4, #2
 800de04:	2600      	movs	r6, #0
 800de06:	42a6      	cmp	r6, r4
 800de08:	d105      	bne.n	800de16 <__libc_init_array+0x2e>
 800de0a:	bd70      	pop	{r4, r5, r6, pc}
 800de0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800de10:	4798      	blx	r3
 800de12:	3601      	adds	r6, #1
 800de14:	e7ee      	b.n	800ddf4 <__libc_init_array+0xc>
 800de16:	f855 3b04 	ldr.w	r3, [r5], #4
 800de1a:	4798      	blx	r3
 800de1c:	3601      	adds	r6, #1
 800de1e:	e7f2      	b.n	800de06 <__libc_init_array+0x1e>
 800de20:	080101cc 	.word	0x080101cc
 800de24:	080101cc 	.word	0x080101cc
 800de28:	080101cc 	.word	0x080101cc
 800de2c:	080101d0 	.word	0x080101d0

0800de30 <__retarget_lock_init_recursive>:
 800de30:	4770      	bx	lr

0800de32 <__retarget_lock_acquire_recursive>:
 800de32:	4770      	bx	lr

0800de34 <__retarget_lock_release_recursive>:
 800de34:	4770      	bx	lr

0800de36 <__swhatbuf_r>:
 800de36:	b570      	push	{r4, r5, r6, lr}
 800de38:	460e      	mov	r6, r1
 800de3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de3e:	2900      	cmp	r1, #0
 800de40:	b096      	sub	sp, #88	; 0x58
 800de42:	4614      	mov	r4, r2
 800de44:	461d      	mov	r5, r3
 800de46:	da08      	bge.n	800de5a <__swhatbuf_r+0x24>
 800de48:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800de4c:	2200      	movs	r2, #0
 800de4e:	602a      	str	r2, [r5, #0]
 800de50:	061a      	lsls	r2, r3, #24
 800de52:	d410      	bmi.n	800de76 <__swhatbuf_r+0x40>
 800de54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de58:	e00e      	b.n	800de78 <__swhatbuf_r+0x42>
 800de5a:	466a      	mov	r2, sp
 800de5c:	f000 fb46 	bl	800e4ec <_fstat_r>
 800de60:	2800      	cmp	r0, #0
 800de62:	dbf1      	blt.n	800de48 <__swhatbuf_r+0x12>
 800de64:	9a01      	ldr	r2, [sp, #4]
 800de66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800de6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800de6e:	425a      	negs	r2, r3
 800de70:	415a      	adcs	r2, r3
 800de72:	602a      	str	r2, [r5, #0]
 800de74:	e7ee      	b.n	800de54 <__swhatbuf_r+0x1e>
 800de76:	2340      	movs	r3, #64	; 0x40
 800de78:	2000      	movs	r0, #0
 800de7a:	6023      	str	r3, [r4, #0]
 800de7c:	b016      	add	sp, #88	; 0x58
 800de7e:	bd70      	pop	{r4, r5, r6, pc}

0800de80 <__smakebuf_r>:
 800de80:	898b      	ldrh	r3, [r1, #12]
 800de82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800de84:	079d      	lsls	r5, r3, #30
 800de86:	4606      	mov	r6, r0
 800de88:	460c      	mov	r4, r1
 800de8a:	d507      	bpl.n	800de9c <__smakebuf_r+0x1c>
 800de8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800de90:	6023      	str	r3, [r4, #0]
 800de92:	6123      	str	r3, [r4, #16]
 800de94:	2301      	movs	r3, #1
 800de96:	6163      	str	r3, [r4, #20]
 800de98:	b002      	add	sp, #8
 800de9a:	bd70      	pop	{r4, r5, r6, pc}
 800de9c:	ab01      	add	r3, sp, #4
 800de9e:	466a      	mov	r2, sp
 800dea0:	f7ff ffc9 	bl	800de36 <__swhatbuf_r>
 800dea4:	9900      	ldr	r1, [sp, #0]
 800dea6:	4605      	mov	r5, r0
 800dea8:	4630      	mov	r0, r6
 800deaa:	f000 f8bb 	bl	800e024 <_malloc_r>
 800deae:	b948      	cbnz	r0, 800dec4 <__smakebuf_r+0x44>
 800deb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800deb4:	059a      	lsls	r2, r3, #22
 800deb6:	d4ef      	bmi.n	800de98 <__smakebuf_r+0x18>
 800deb8:	f023 0303 	bic.w	r3, r3, #3
 800debc:	f043 0302 	orr.w	r3, r3, #2
 800dec0:	81a3      	strh	r3, [r4, #12]
 800dec2:	e7e3      	b.n	800de8c <__smakebuf_r+0xc>
 800dec4:	4b0d      	ldr	r3, [pc, #52]	; (800defc <__smakebuf_r+0x7c>)
 800dec6:	62b3      	str	r3, [r6, #40]	; 0x28
 800dec8:	89a3      	ldrh	r3, [r4, #12]
 800deca:	6020      	str	r0, [r4, #0]
 800decc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ded0:	81a3      	strh	r3, [r4, #12]
 800ded2:	9b00      	ldr	r3, [sp, #0]
 800ded4:	6163      	str	r3, [r4, #20]
 800ded6:	9b01      	ldr	r3, [sp, #4]
 800ded8:	6120      	str	r0, [r4, #16]
 800deda:	b15b      	cbz	r3, 800def4 <__smakebuf_r+0x74>
 800dedc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dee0:	4630      	mov	r0, r6
 800dee2:	f000 fb15 	bl	800e510 <_isatty_r>
 800dee6:	b128      	cbz	r0, 800def4 <__smakebuf_r+0x74>
 800dee8:	89a3      	ldrh	r3, [r4, #12]
 800deea:	f023 0303 	bic.w	r3, r3, #3
 800deee:	f043 0301 	orr.w	r3, r3, #1
 800def2:	81a3      	strh	r3, [r4, #12]
 800def4:	89a0      	ldrh	r0, [r4, #12]
 800def6:	4305      	orrs	r5, r0
 800def8:	81a5      	strh	r5, [r4, #12]
 800defa:	e7cd      	b.n	800de98 <__smakebuf_r+0x18>
 800defc:	0800dc45 	.word	0x0800dc45

0800df00 <malloc>:
 800df00:	4b02      	ldr	r3, [pc, #8]	; (800df0c <malloc+0xc>)
 800df02:	4601      	mov	r1, r0
 800df04:	6818      	ldr	r0, [r3, #0]
 800df06:	f000 b88d 	b.w	800e024 <_malloc_r>
 800df0a:	bf00      	nop
 800df0c:	200001b4 	.word	0x200001b4

0800df10 <free>:
 800df10:	4b02      	ldr	r3, [pc, #8]	; (800df1c <free+0xc>)
 800df12:	4601      	mov	r1, r0
 800df14:	6818      	ldr	r0, [r3, #0]
 800df16:	f000 b819 	b.w	800df4c <_free_r>
 800df1a:	bf00      	nop
 800df1c:	200001b4 	.word	0x200001b4

0800df20 <memcpy>:
 800df20:	440a      	add	r2, r1
 800df22:	4291      	cmp	r1, r2
 800df24:	f100 33ff 	add.w	r3, r0, #4294967295
 800df28:	d100      	bne.n	800df2c <memcpy+0xc>
 800df2a:	4770      	bx	lr
 800df2c:	b510      	push	{r4, lr}
 800df2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df32:	f803 4f01 	strb.w	r4, [r3, #1]!
 800df36:	4291      	cmp	r1, r2
 800df38:	d1f9      	bne.n	800df2e <memcpy+0xe>
 800df3a:	bd10      	pop	{r4, pc}

0800df3c <memset>:
 800df3c:	4402      	add	r2, r0
 800df3e:	4603      	mov	r3, r0
 800df40:	4293      	cmp	r3, r2
 800df42:	d100      	bne.n	800df46 <memset+0xa>
 800df44:	4770      	bx	lr
 800df46:	f803 1b01 	strb.w	r1, [r3], #1
 800df4a:	e7f9      	b.n	800df40 <memset+0x4>

0800df4c <_free_r>:
 800df4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df4e:	2900      	cmp	r1, #0
 800df50:	d044      	beq.n	800dfdc <_free_r+0x90>
 800df52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df56:	9001      	str	r0, [sp, #4]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	f1a1 0404 	sub.w	r4, r1, #4
 800df5e:	bfb8      	it	lt
 800df60:	18e4      	addlt	r4, r4, r3
 800df62:	f000 faf7 	bl	800e554 <__malloc_lock>
 800df66:	4a1e      	ldr	r2, [pc, #120]	; (800dfe0 <_free_r+0x94>)
 800df68:	9801      	ldr	r0, [sp, #4]
 800df6a:	6813      	ldr	r3, [r2, #0]
 800df6c:	b933      	cbnz	r3, 800df7c <_free_r+0x30>
 800df6e:	6063      	str	r3, [r4, #4]
 800df70:	6014      	str	r4, [r2, #0]
 800df72:	b003      	add	sp, #12
 800df74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800df78:	f000 baf2 	b.w	800e560 <__malloc_unlock>
 800df7c:	42a3      	cmp	r3, r4
 800df7e:	d908      	bls.n	800df92 <_free_r+0x46>
 800df80:	6825      	ldr	r5, [r4, #0]
 800df82:	1961      	adds	r1, r4, r5
 800df84:	428b      	cmp	r3, r1
 800df86:	bf01      	itttt	eq
 800df88:	6819      	ldreq	r1, [r3, #0]
 800df8a:	685b      	ldreq	r3, [r3, #4]
 800df8c:	1949      	addeq	r1, r1, r5
 800df8e:	6021      	streq	r1, [r4, #0]
 800df90:	e7ed      	b.n	800df6e <_free_r+0x22>
 800df92:	461a      	mov	r2, r3
 800df94:	685b      	ldr	r3, [r3, #4]
 800df96:	b10b      	cbz	r3, 800df9c <_free_r+0x50>
 800df98:	42a3      	cmp	r3, r4
 800df9a:	d9fa      	bls.n	800df92 <_free_r+0x46>
 800df9c:	6811      	ldr	r1, [r2, #0]
 800df9e:	1855      	adds	r5, r2, r1
 800dfa0:	42a5      	cmp	r5, r4
 800dfa2:	d10b      	bne.n	800dfbc <_free_r+0x70>
 800dfa4:	6824      	ldr	r4, [r4, #0]
 800dfa6:	4421      	add	r1, r4
 800dfa8:	1854      	adds	r4, r2, r1
 800dfaa:	42a3      	cmp	r3, r4
 800dfac:	6011      	str	r1, [r2, #0]
 800dfae:	d1e0      	bne.n	800df72 <_free_r+0x26>
 800dfb0:	681c      	ldr	r4, [r3, #0]
 800dfb2:	685b      	ldr	r3, [r3, #4]
 800dfb4:	6053      	str	r3, [r2, #4]
 800dfb6:	4421      	add	r1, r4
 800dfb8:	6011      	str	r1, [r2, #0]
 800dfba:	e7da      	b.n	800df72 <_free_r+0x26>
 800dfbc:	d902      	bls.n	800dfc4 <_free_r+0x78>
 800dfbe:	230c      	movs	r3, #12
 800dfc0:	6003      	str	r3, [r0, #0]
 800dfc2:	e7d6      	b.n	800df72 <_free_r+0x26>
 800dfc4:	6825      	ldr	r5, [r4, #0]
 800dfc6:	1961      	adds	r1, r4, r5
 800dfc8:	428b      	cmp	r3, r1
 800dfca:	bf04      	itt	eq
 800dfcc:	6819      	ldreq	r1, [r3, #0]
 800dfce:	685b      	ldreq	r3, [r3, #4]
 800dfd0:	6063      	str	r3, [r4, #4]
 800dfd2:	bf04      	itt	eq
 800dfd4:	1949      	addeq	r1, r1, r5
 800dfd6:	6021      	streq	r1, [r4, #0]
 800dfd8:	6054      	str	r4, [r2, #4]
 800dfda:	e7ca      	b.n	800df72 <_free_r+0x26>
 800dfdc:	b003      	add	sp, #12
 800dfde:	bd30      	pop	{r4, r5, pc}
 800dfe0:	20000b0c 	.word	0x20000b0c

0800dfe4 <sbrk_aligned>:
 800dfe4:	b570      	push	{r4, r5, r6, lr}
 800dfe6:	4e0e      	ldr	r6, [pc, #56]	; (800e020 <sbrk_aligned+0x3c>)
 800dfe8:	460c      	mov	r4, r1
 800dfea:	6831      	ldr	r1, [r6, #0]
 800dfec:	4605      	mov	r5, r0
 800dfee:	b911      	cbnz	r1, 800dff6 <sbrk_aligned+0x12>
 800dff0:	f000 f91a 	bl	800e228 <_sbrk_r>
 800dff4:	6030      	str	r0, [r6, #0]
 800dff6:	4621      	mov	r1, r4
 800dff8:	4628      	mov	r0, r5
 800dffa:	f000 f915 	bl	800e228 <_sbrk_r>
 800dffe:	1c43      	adds	r3, r0, #1
 800e000:	d00a      	beq.n	800e018 <sbrk_aligned+0x34>
 800e002:	1cc4      	adds	r4, r0, #3
 800e004:	f024 0403 	bic.w	r4, r4, #3
 800e008:	42a0      	cmp	r0, r4
 800e00a:	d007      	beq.n	800e01c <sbrk_aligned+0x38>
 800e00c:	1a21      	subs	r1, r4, r0
 800e00e:	4628      	mov	r0, r5
 800e010:	f000 f90a 	bl	800e228 <_sbrk_r>
 800e014:	3001      	adds	r0, #1
 800e016:	d101      	bne.n	800e01c <sbrk_aligned+0x38>
 800e018:	f04f 34ff 	mov.w	r4, #4294967295
 800e01c:	4620      	mov	r0, r4
 800e01e:	bd70      	pop	{r4, r5, r6, pc}
 800e020:	20000b10 	.word	0x20000b10

0800e024 <_malloc_r>:
 800e024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e028:	1ccd      	adds	r5, r1, #3
 800e02a:	f025 0503 	bic.w	r5, r5, #3
 800e02e:	3508      	adds	r5, #8
 800e030:	2d0c      	cmp	r5, #12
 800e032:	bf38      	it	cc
 800e034:	250c      	movcc	r5, #12
 800e036:	2d00      	cmp	r5, #0
 800e038:	4607      	mov	r7, r0
 800e03a:	db01      	blt.n	800e040 <_malloc_r+0x1c>
 800e03c:	42a9      	cmp	r1, r5
 800e03e:	d905      	bls.n	800e04c <_malloc_r+0x28>
 800e040:	230c      	movs	r3, #12
 800e042:	603b      	str	r3, [r7, #0]
 800e044:	2600      	movs	r6, #0
 800e046:	4630      	mov	r0, r6
 800e048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e04c:	4e2e      	ldr	r6, [pc, #184]	; (800e108 <_malloc_r+0xe4>)
 800e04e:	f000 fa81 	bl	800e554 <__malloc_lock>
 800e052:	6833      	ldr	r3, [r6, #0]
 800e054:	461c      	mov	r4, r3
 800e056:	bb34      	cbnz	r4, 800e0a6 <_malloc_r+0x82>
 800e058:	4629      	mov	r1, r5
 800e05a:	4638      	mov	r0, r7
 800e05c:	f7ff ffc2 	bl	800dfe4 <sbrk_aligned>
 800e060:	1c43      	adds	r3, r0, #1
 800e062:	4604      	mov	r4, r0
 800e064:	d14d      	bne.n	800e102 <_malloc_r+0xde>
 800e066:	6834      	ldr	r4, [r6, #0]
 800e068:	4626      	mov	r6, r4
 800e06a:	2e00      	cmp	r6, #0
 800e06c:	d140      	bne.n	800e0f0 <_malloc_r+0xcc>
 800e06e:	6823      	ldr	r3, [r4, #0]
 800e070:	4631      	mov	r1, r6
 800e072:	4638      	mov	r0, r7
 800e074:	eb04 0803 	add.w	r8, r4, r3
 800e078:	f000 f8d6 	bl	800e228 <_sbrk_r>
 800e07c:	4580      	cmp	r8, r0
 800e07e:	d13a      	bne.n	800e0f6 <_malloc_r+0xd2>
 800e080:	6821      	ldr	r1, [r4, #0]
 800e082:	3503      	adds	r5, #3
 800e084:	1a6d      	subs	r5, r5, r1
 800e086:	f025 0503 	bic.w	r5, r5, #3
 800e08a:	3508      	adds	r5, #8
 800e08c:	2d0c      	cmp	r5, #12
 800e08e:	bf38      	it	cc
 800e090:	250c      	movcc	r5, #12
 800e092:	4629      	mov	r1, r5
 800e094:	4638      	mov	r0, r7
 800e096:	f7ff ffa5 	bl	800dfe4 <sbrk_aligned>
 800e09a:	3001      	adds	r0, #1
 800e09c:	d02b      	beq.n	800e0f6 <_malloc_r+0xd2>
 800e09e:	6823      	ldr	r3, [r4, #0]
 800e0a0:	442b      	add	r3, r5
 800e0a2:	6023      	str	r3, [r4, #0]
 800e0a4:	e00e      	b.n	800e0c4 <_malloc_r+0xa0>
 800e0a6:	6822      	ldr	r2, [r4, #0]
 800e0a8:	1b52      	subs	r2, r2, r5
 800e0aa:	d41e      	bmi.n	800e0ea <_malloc_r+0xc6>
 800e0ac:	2a0b      	cmp	r2, #11
 800e0ae:	d916      	bls.n	800e0de <_malloc_r+0xba>
 800e0b0:	1961      	adds	r1, r4, r5
 800e0b2:	42a3      	cmp	r3, r4
 800e0b4:	6025      	str	r5, [r4, #0]
 800e0b6:	bf18      	it	ne
 800e0b8:	6059      	strne	r1, [r3, #4]
 800e0ba:	6863      	ldr	r3, [r4, #4]
 800e0bc:	bf08      	it	eq
 800e0be:	6031      	streq	r1, [r6, #0]
 800e0c0:	5162      	str	r2, [r4, r5]
 800e0c2:	604b      	str	r3, [r1, #4]
 800e0c4:	4638      	mov	r0, r7
 800e0c6:	f104 060b 	add.w	r6, r4, #11
 800e0ca:	f000 fa49 	bl	800e560 <__malloc_unlock>
 800e0ce:	f026 0607 	bic.w	r6, r6, #7
 800e0d2:	1d23      	adds	r3, r4, #4
 800e0d4:	1af2      	subs	r2, r6, r3
 800e0d6:	d0b6      	beq.n	800e046 <_malloc_r+0x22>
 800e0d8:	1b9b      	subs	r3, r3, r6
 800e0da:	50a3      	str	r3, [r4, r2]
 800e0dc:	e7b3      	b.n	800e046 <_malloc_r+0x22>
 800e0de:	6862      	ldr	r2, [r4, #4]
 800e0e0:	42a3      	cmp	r3, r4
 800e0e2:	bf0c      	ite	eq
 800e0e4:	6032      	streq	r2, [r6, #0]
 800e0e6:	605a      	strne	r2, [r3, #4]
 800e0e8:	e7ec      	b.n	800e0c4 <_malloc_r+0xa0>
 800e0ea:	4623      	mov	r3, r4
 800e0ec:	6864      	ldr	r4, [r4, #4]
 800e0ee:	e7b2      	b.n	800e056 <_malloc_r+0x32>
 800e0f0:	4634      	mov	r4, r6
 800e0f2:	6876      	ldr	r6, [r6, #4]
 800e0f4:	e7b9      	b.n	800e06a <_malloc_r+0x46>
 800e0f6:	230c      	movs	r3, #12
 800e0f8:	603b      	str	r3, [r7, #0]
 800e0fa:	4638      	mov	r0, r7
 800e0fc:	f000 fa30 	bl	800e560 <__malloc_unlock>
 800e100:	e7a1      	b.n	800e046 <_malloc_r+0x22>
 800e102:	6025      	str	r5, [r4, #0]
 800e104:	e7de      	b.n	800e0c4 <_malloc_r+0xa0>
 800e106:	bf00      	nop
 800e108:	20000b0c 	.word	0x20000b0c

0800e10c <iprintf>:
 800e10c:	b40f      	push	{r0, r1, r2, r3}
 800e10e:	4b0a      	ldr	r3, [pc, #40]	; (800e138 <iprintf+0x2c>)
 800e110:	b513      	push	{r0, r1, r4, lr}
 800e112:	681c      	ldr	r4, [r3, #0]
 800e114:	b124      	cbz	r4, 800e120 <iprintf+0x14>
 800e116:	69a3      	ldr	r3, [r4, #24]
 800e118:	b913      	cbnz	r3, 800e120 <iprintf+0x14>
 800e11a:	4620      	mov	r0, r4
 800e11c:	f7ff fdc6 	bl	800dcac <__sinit>
 800e120:	ab05      	add	r3, sp, #20
 800e122:	9a04      	ldr	r2, [sp, #16]
 800e124:	68a1      	ldr	r1, [r4, #8]
 800e126:	9301      	str	r3, [sp, #4]
 800e128:	4620      	mov	r0, r4
 800e12a:	f000 fa49 	bl	800e5c0 <_vfiprintf_r>
 800e12e:	b002      	add	sp, #8
 800e130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e134:	b004      	add	sp, #16
 800e136:	4770      	bx	lr
 800e138:	200001b4 	.word	0x200001b4

0800e13c <_puts_r>:
 800e13c:	b570      	push	{r4, r5, r6, lr}
 800e13e:	460e      	mov	r6, r1
 800e140:	4605      	mov	r5, r0
 800e142:	b118      	cbz	r0, 800e14c <_puts_r+0x10>
 800e144:	6983      	ldr	r3, [r0, #24]
 800e146:	b90b      	cbnz	r3, 800e14c <_puts_r+0x10>
 800e148:	f7ff fdb0 	bl	800dcac <__sinit>
 800e14c:	69ab      	ldr	r3, [r5, #24]
 800e14e:	68ac      	ldr	r4, [r5, #8]
 800e150:	b913      	cbnz	r3, 800e158 <_puts_r+0x1c>
 800e152:	4628      	mov	r0, r5
 800e154:	f7ff fdaa 	bl	800dcac <__sinit>
 800e158:	4b2c      	ldr	r3, [pc, #176]	; (800e20c <_puts_r+0xd0>)
 800e15a:	429c      	cmp	r4, r3
 800e15c:	d120      	bne.n	800e1a0 <_puts_r+0x64>
 800e15e:	686c      	ldr	r4, [r5, #4]
 800e160:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e162:	07db      	lsls	r3, r3, #31
 800e164:	d405      	bmi.n	800e172 <_puts_r+0x36>
 800e166:	89a3      	ldrh	r3, [r4, #12]
 800e168:	0598      	lsls	r0, r3, #22
 800e16a:	d402      	bmi.n	800e172 <_puts_r+0x36>
 800e16c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e16e:	f7ff fe60 	bl	800de32 <__retarget_lock_acquire_recursive>
 800e172:	89a3      	ldrh	r3, [r4, #12]
 800e174:	0719      	lsls	r1, r3, #28
 800e176:	d51d      	bpl.n	800e1b4 <_puts_r+0x78>
 800e178:	6923      	ldr	r3, [r4, #16]
 800e17a:	b1db      	cbz	r3, 800e1b4 <_puts_r+0x78>
 800e17c:	3e01      	subs	r6, #1
 800e17e:	68a3      	ldr	r3, [r4, #8]
 800e180:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e184:	3b01      	subs	r3, #1
 800e186:	60a3      	str	r3, [r4, #8]
 800e188:	bb39      	cbnz	r1, 800e1da <_puts_r+0x9e>
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	da38      	bge.n	800e200 <_puts_r+0xc4>
 800e18e:	4622      	mov	r2, r4
 800e190:	210a      	movs	r1, #10
 800e192:	4628      	mov	r0, r5
 800e194:	f000 f8c8 	bl	800e328 <__swbuf_r>
 800e198:	3001      	adds	r0, #1
 800e19a:	d011      	beq.n	800e1c0 <_puts_r+0x84>
 800e19c:	250a      	movs	r5, #10
 800e19e:	e011      	b.n	800e1c4 <_puts_r+0x88>
 800e1a0:	4b1b      	ldr	r3, [pc, #108]	; (800e210 <_puts_r+0xd4>)
 800e1a2:	429c      	cmp	r4, r3
 800e1a4:	d101      	bne.n	800e1aa <_puts_r+0x6e>
 800e1a6:	68ac      	ldr	r4, [r5, #8]
 800e1a8:	e7da      	b.n	800e160 <_puts_r+0x24>
 800e1aa:	4b1a      	ldr	r3, [pc, #104]	; (800e214 <_puts_r+0xd8>)
 800e1ac:	429c      	cmp	r4, r3
 800e1ae:	bf08      	it	eq
 800e1b0:	68ec      	ldreq	r4, [r5, #12]
 800e1b2:	e7d5      	b.n	800e160 <_puts_r+0x24>
 800e1b4:	4621      	mov	r1, r4
 800e1b6:	4628      	mov	r0, r5
 800e1b8:	f000 f91a 	bl	800e3f0 <__swsetup_r>
 800e1bc:	2800      	cmp	r0, #0
 800e1be:	d0dd      	beq.n	800e17c <_puts_r+0x40>
 800e1c0:	f04f 35ff 	mov.w	r5, #4294967295
 800e1c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e1c6:	07da      	lsls	r2, r3, #31
 800e1c8:	d405      	bmi.n	800e1d6 <_puts_r+0x9a>
 800e1ca:	89a3      	ldrh	r3, [r4, #12]
 800e1cc:	059b      	lsls	r3, r3, #22
 800e1ce:	d402      	bmi.n	800e1d6 <_puts_r+0x9a>
 800e1d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e1d2:	f7ff fe2f 	bl	800de34 <__retarget_lock_release_recursive>
 800e1d6:	4628      	mov	r0, r5
 800e1d8:	bd70      	pop	{r4, r5, r6, pc}
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	da04      	bge.n	800e1e8 <_puts_r+0xac>
 800e1de:	69a2      	ldr	r2, [r4, #24]
 800e1e0:	429a      	cmp	r2, r3
 800e1e2:	dc06      	bgt.n	800e1f2 <_puts_r+0xb6>
 800e1e4:	290a      	cmp	r1, #10
 800e1e6:	d004      	beq.n	800e1f2 <_puts_r+0xb6>
 800e1e8:	6823      	ldr	r3, [r4, #0]
 800e1ea:	1c5a      	adds	r2, r3, #1
 800e1ec:	6022      	str	r2, [r4, #0]
 800e1ee:	7019      	strb	r1, [r3, #0]
 800e1f0:	e7c5      	b.n	800e17e <_puts_r+0x42>
 800e1f2:	4622      	mov	r2, r4
 800e1f4:	4628      	mov	r0, r5
 800e1f6:	f000 f897 	bl	800e328 <__swbuf_r>
 800e1fa:	3001      	adds	r0, #1
 800e1fc:	d1bf      	bne.n	800e17e <_puts_r+0x42>
 800e1fe:	e7df      	b.n	800e1c0 <_puts_r+0x84>
 800e200:	6823      	ldr	r3, [r4, #0]
 800e202:	250a      	movs	r5, #10
 800e204:	1c5a      	adds	r2, r3, #1
 800e206:	6022      	str	r2, [r4, #0]
 800e208:	701d      	strb	r5, [r3, #0]
 800e20a:	e7db      	b.n	800e1c4 <_puts_r+0x88>
 800e20c:	0801014c 	.word	0x0801014c
 800e210:	0801016c 	.word	0x0801016c
 800e214:	0801012c 	.word	0x0801012c

0800e218 <puts>:
 800e218:	4b02      	ldr	r3, [pc, #8]	; (800e224 <puts+0xc>)
 800e21a:	4601      	mov	r1, r0
 800e21c:	6818      	ldr	r0, [r3, #0]
 800e21e:	f7ff bf8d 	b.w	800e13c <_puts_r>
 800e222:	bf00      	nop
 800e224:	200001b4 	.word	0x200001b4

0800e228 <_sbrk_r>:
 800e228:	b538      	push	{r3, r4, r5, lr}
 800e22a:	4d06      	ldr	r5, [pc, #24]	; (800e244 <_sbrk_r+0x1c>)
 800e22c:	2300      	movs	r3, #0
 800e22e:	4604      	mov	r4, r0
 800e230:	4608      	mov	r0, r1
 800e232:	602b      	str	r3, [r5, #0]
 800e234:	f7f2 fd98 	bl	8000d68 <_sbrk>
 800e238:	1c43      	adds	r3, r0, #1
 800e23a:	d102      	bne.n	800e242 <_sbrk_r+0x1a>
 800e23c:	682b      	ldr	r3, [r5, #0]
 800e23e:	b103      	cbz	r3, 800e242 <_sbrk_r+0x1a>
 800e240:	6023      	str	r3, [r4, #0]
 800e242:	bd38      	pop	{r3, r4, r5, pc}
 800e244:	20000b14 	.word	0x20000b14

0800e248 <__sread>:
 800e248:	b510      	push	{r4, lr}
 800e24a:	460c      	mov	r4, r1
 800e24c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e250:	f000 fc7a 	bl	800eb48 <_read_r>
 800e254:	2800      	cmp	r0, #0
 800e256:	bfab      	itete	ge
 800e258:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e25a:	89a3      	ldrhlt	r3, [r4, #12]
 800e25c:	181b      	addge	r3, r3, r0
 800e25e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e262:	bfac      	ite	ge
 800e264:	6563      	strge	r3, [r4, #84]	; 0x54
 800e266:	81a3      	strhlt	r3, [r4, #12]
 800e268:	bd10      	pop	{r4, pc}

0800e26a <__swrite>:
 800e26a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e26e:	461f      	mov	r7, r3
 800e270:	898b      	ldrh	r3, [r1, #12]
 800e272:	05db      	lsls	r3, r3, #23
 800e274:	4605      	mov	r5, r0
 800e276:	460c      	mov	r4, r1
 800e278:	4616      	mov	r6, r2
 800e27a:	d505      	bpl.n	800e288 <__swrite+0x1e>
 800e27c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e280:	2302      	movs	r3, #2
 800e282:	2200      	movs	r2, #0
 800e284:	f000 f954 	bl	800e530 <_lseek_r>
 800e288:	89a3      	ldrh	r3, [r4, #12]
 800e28a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e28e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e292:	81a3      	strh	r3, [r4, #12]
 800e294:	4632      	mov	r2, r6
 800e296:	463b      	mov	r3, r7
 800e298:	4628      	mov	r0, r5
 800e29a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e29e:	f000 b895 	b.w	800e3cc <_write_r>

0800e2a2 <__sseek>:
 800e2a2:	b510      	push	{r4, lr}
 800e2a4:	460c      	mov	r4, r1
 800e2a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2aa:	f000 f941 	bl	800e530 <_lseek_r>
 800e2ae:	1c43      	adds	r3, r0, #1
 800e2b0:	89a3      	ldrh	r3, [r4, #12]
 800e2b2:	bf15      	itete	ne
 800e2b4:	6560      	strne	r0, [r4, #84]	; 0x54
 800e2b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e2ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e2be:	81a3      	strheq	r3, [r4, #12]
 800e2c0:	bf18      	it	ne
 800e2c2:	81a3      	strhne	r3, [r4, #12]
 800e2c4:	bd10      	pop	{r4, pc}

0800e2c6 <__sclose>:
 800e2c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2ca:	f000 b8ff 	b.w	800e4cc <_close_r>

0800e2ce <strncmp>:
 800e2ce:	b510      	push	{r4, lr}
 800e2d0:	b17a      	cbz	r2, 800e2f2 <strncmp+0x24>
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	3901      	subs	r1, #1
 800e2d6:	1884      	adds	r4, r0, r2
 800e2d8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e2dc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e2e0:	4290      	cmp	r0, r2
 800e2e2:	d101      	bne.n	800e2e8 <strncmp+0x1a>
 800e2e4:	42a3      	cmp	r3, r4
 800e2e6:	d101      	bne.n	800e2ec <strncmp+0x1e>
 800e2e8:	1a80      	subs	r0, r0, r2
 800e2ea:	bd10      	pop	{r4, pc}
 800e2ec:	2800      	cmp	r0, #0
 800e2ee:	d1f3      	bne.n	800e2d8 <strncmp+0xa>
 800e2f0:	e7fa      	b.n	800e2e8 <strncmp+0x1a>
 800e2f2:	4610      	mov	r0, r2
 800e2f4:	e7f9      	b.n	800e2ea <strncmp+0x1c>
	...

0800e2f8 <viprintf>:
 800e2f8:	b513      	push	{r0, r1, r4, lr}
 800e2fa:	460b      	mov	r3, r1
 800e2fc:	4909      	ldr	r1, [pc, #36]	; (800e324 <viprintf+0x2c>)
 800e2fe:	680c      	ldr	r4, [r1, #0]
 800e300:	4602      	mov	r2, r0
 800e302:	b144      	cbz	r4, 800e316 <viprintf+0x1e>
 800e304:	69a1      	ldr	r1, [r4, #24]
 800e306:	b931      	cbnz	r1, 800e316 <viprintf+0x1e>
 800e308:	e9cd 0300 	strd	r0, r3, [sp]
 800e30c:	4620      	mov	r0, r4
 800e30e:	f7ff fccd 	bl	800dcac <__sinit>
 800e312:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e316:	68a1      	ldr	r1, [r4, #8]
 800e318:	4620      	mov	r0, r4
 800e31a:	b002      	add	sp, #8
 800e31c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e320:	f000 b94e 	b.w	800e5c0 <_vfiprintf_r>
 800e324:	200001b4 	.word	0x200001b4

0800e328 <__swbuf_r>:
 800e328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e32a:	460e      	mov	r6, r1
 800e32c:	4614      	mov	r4, r2
 800e32e:	4605      	mov	r5, r0
 800e330:	b118      	cbz	r0, 800e33a <__swbuf_r+0x12>
 800e332:	6983      	ldr	r3, [r0, #24]
 800e334:	b90b      	cbnz	r3, 800e33a <__swbuf_r+0x12>
 800e336:	f7ff fcb9 	bl	800dcac <__sinit>
 800e33a:	4b21      	ldr	r3, [pc, #132]	; (800e3c0 <__swbuf_r+0x98>)
 800e33c:	429c      	cmp	r4, r3
 800e33e:	d12b      	bne.n	800e398 <__swbuf_r+0x70>
 800e340:	686c      	ldr	r4, [r5, #4]
 800e342:	69a3      	ldr	r3, [r4, #24]
 800e344:	60a3      	str	r3, [r4, #8]
 800e346:	89a3      	ldrh	r3, [r4, #12]
 800e348:	071a      	lsls	r2, r3, #28
 800e34a:	d52f      	bpl.n	800e3ac <__swbuf_r+0x84>
 800e34c:	6923      	ldr	r3, [r4, #16]
 800e34e:	b36b      	cbz	r3, 800e3ac <__swbuf_r+0x84>
 800e350:	6923      	ldr	r3, [r4, #16]
 800e352:	6820      	ldr	r0, [r4, #0]
 800e354:	1ac0      	subs	r0, r0, r3
 800e356:	6963      	ldr	r3, [r4, #20]
 800e358:	b2f6      	uxtb	r6, r6
 800e35a:	4283      	cmp	r3, r0
 800e35c:	4637      	mov	r7, r6
 800e35e:	dc04      	bgt.n	800e36a <__swbuf_r+0x42>
 800e360:	4621      	mov	r1, r4
 800e362:	4628      	mov	r0, r5
 800e364:	f7ff fc0e 	bl	800db84 <_fflush_r>
 800e368:	bb30      	cbnz	r0, 800e3b8 <__swbuf_r+0x90>
 800e36a:	68a3      	ldr	r3, [r4, #8]
 800e36c:	3b01      	subs	r3, #1
 800e36e:	60a3      	str	r3, [r4, #8]
 800e370:	6823      	ldr	r3, [r4, #0]
 800e372:	1c5a      	adds	r2, r3, #1
 800e374:	6022      	str	r2, [r4, #0]
 800e376:	701e      	strb	r6, [r3, #0]
 800e378:	6963      	ldr	r3, [r4, #20]
 800e37a:	3001      	adds	r0, #1
 800e37c:	4283      	cmp	r3, r0
 800e37e:	d004      	beq.n	800e38a <__swbuf_r+0x62>
 800e380:	89a3      	ldrh	r3, [r4, #12]
 800e382:	07db      	lsls	r3, r3, #31
 800e384:	d506      	bpl.n	800e394 <__swbuf_r+0x6c>
 800e386:	2e0a      	cmp	r6, #10
 800e388:	d104      	bne.n	800e394 <__swbuf_r+0x6c>
 800e38a:	4621      	mov	r1, r4
 800e38c:	4628      	mov	r0, r5
 800e38e:	f7ff fbf9 	bl	800db84 <_fflush_r>
 800e392:	b988      	cbnz	r0, 800e3b8 <__swbuf_r+0x90>
 800e394:	4638      	mov	r0, r7
 800e396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e398:	4b0a      	ldr	r3, [pc, #40]	; (800e3c4 <__swbuf_r+0x9c>)
 800e39a:	429c      	cmp	r4, r3
 800e39c:	d101      	bne.n	800e3a2 <__swbuf_r+0x7a>
 800e39e:	68ac      	ldr	r4, [r5, #8]
 800e3a0:	e7cf      	b.n	800e342 <__swbuf_r+0x1a>
 800e3a2:	4b09      	ldr	r3, [pc, #36]	; (800e3c8 <__swbuf_r+0xa0>)
 800e3a4:	429c      	cmp	r4, r3
 800e3a6:	bf08      	it	eq
 800e3a8:	68ec      	ldreq	r4, [r5, #12]
 800e3aa:	e7ca      	b.n	800e342 <__swbuf_r+0x1a>
 800e3ac:	4621      	mov	r1, r4
 800e3ae:	4628      	mov	r0, r5
 800e3b0:	f000 f81e 	bl	800e3f0 <__swsetup_r>
 800e3b4:	2800      	cmp	r0, #0
 800e3b6:	d0cb      	beq.n	800e350 <__swbuf_r+0x28>
 800e3b8:	f04f 37ff 	mov.w	r7, #4294967295
 800e3bc:	e7ea      	b.n	800e394 <__swbuf_r+0x6c>
 800e3be:	bf00      	nop
 800e3c0:	0801014c 	.word	0x0801014c
 800e3c4:	0801016c 	.word	0x0801016c
 800e3c8:	0801012c 	.word	0x0801012c

0800e3cc <_write_r>:
 800e3cc:	b538      	push	{r3, r4, r5, lr}
 800e3ce:	4d07      	ldr	r5, [pc, #28]	; (800e3ec <_write_r+0x20>)
 800e3d0:	4604      	mov	r4, r0
 800e3d2:	4608      	mov	r0, r1
 800e3d4:	4611      	mov	r1, r2
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	602a      	str	r2, [r5, #0]
 800e3da:	461a      	mov	r2, r3
 800e3dc:	f7f2 fc73 	bl	8000cc6 <_write>
 800e3e0:	1c43      	adds	r3, r0, #1
 800e3e2:	d102      	bne.n	800e3ea <_write_r+0x1e>
 800e3e4:	682b      	ldr	r3, [r5, #0]
 800e3e6:	b103      	cbz	r3, 800e3ea <_write_r+0x1e>
 800e3e8:	6023      	str	r3, [r4, #0]
 800e3ea:	bd38      	pop	{r3, r4, r5, pc}
 800e3ec:	20000b14 	.word	0x20000b14

0800e3f0 <__swsetup_r>:
 800e3f0:	4b32      	ldr	r3, [pc, #200]	; (800e4bc <__swsetup_r+0xcc>)
 800e3f2:	b570      	push	{r4, r5, r6, lr}
 800e3f4:	681d      	ldr	r5, [r3, #0]
 800e3f6:	4606      	mov	r6, r0
 800e3f8:	460c      	mov	r4, r1
 800e3fa:	b125      	cbz	r5, 800e406 <__swsetup_r+0x16>
 800e3fc:	69ab      	ldr	r3, [r5, #24]
 800e3fe:	b913      	cbnz	r3, 800e406 <__swsetup_r+0x16>
 800e400:	4628      	mov	r0, r5
 800e402:	f7ff fc53 	bl	800dcac <__sinit>
 800e406:	4b2e      	ldr	r3, [pc, #184]	; (800e4c0 <__swsetup_r+0xd0>)
 800e408:	429c      	cmp	r4, r3
 800e40a:	d10f      	bne.n	800e42c <__swsetup_r+0x3c>
 800e40c:	686c      	ldr	r4, [r5, #4]
 800e40e:	89a3      	ldrh	r3, [r4, #12]
 800e410:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e414:	0719      	lsls	r1, r3, #28
 800e416:	d42c      	bmi.n	800e472 <__swsetup_r+0x82>
 800e418:	06dd      	lsls	r5, r3, #27
 800e41a:	d411      	bmi.n	800e440 <__swsetup_r+0x50>
 800e41c:	2309      	movs	r3, #9
 800e41e:	6033      	str	r3, [r6, #0]
 800e420:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e424:	81a3      	strh	r3, [r4, #12]
 800e426:	f04f 30ff 	mov.w	r0, #4294967295
 800e42a:	e03e      	b.n	800e4aa <__swsetup_r+0xba>
 800e42c:	4b25      	ldr	r3, [pc, #148]	; (800e4c4 <__swsetup_r+0xd4>)
 800e42e:	429c      	cmp	r4, r3
 800e430:	d101      	bne.n	800e436 <__swsetup_r+0x46>
 800e432:	68ac      	ldr	r4, [r5, #8]
 800e434:	e7eb      	b.n	800e40e <__swsetup_r+0x1e>
 800e436:	4b24      	ldr	r3, [pc, #144]	; (800e4c8 <__swsetup_r+0xd8>)
 800e438:	429c      	cmp	r4, r3
 800e43a:	bf08      	it	eq
 800e43c:	68ec      	ldreq	r4, [r5, #12]
 800e43e:	e7e6      	b.n	800e40e <__swsetup_r+0x1e>
 800e440:	0758      	lsls	r0, r3, #29
 800e442:	d512      	bpl.n	800e46a <__swsetup_r+0x7a>
 800e444:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e446:	b141      	cbz	r1, 800e45a <__swsetup_r+0x6a>
 800e448:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e44c:	4299      	cmp	r1, r3
 800e44e:	d002      	beq.n	800e456 <__swsetup_r+0x66>
 800e450:	4630      	mov	r0, r6
 800e452:	f7ff fd7b 	bl	800df4c <_free_r>
 800e456:	2300      	movs	r3, #0
 800e458:	6363      	str	r3, [r4, #52]	; 0x34
 800e45a:	89a3      	ldrh	r3, [r4, #12]
 800e45c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e460:	81a3      	strh	r3, [r4, #12]
 800e462:	2300      	movs	r3, #0
 800e464:	6063      	str	r3, [r4, #4]
 800e466:	6923      	ldr	r3, [r4, #16]
 800e468:	6023      	str	r3, [r4, #0]
 800e46a:	89a3      	ldrh	r3, [r4, #12]
 800e46c:	f043 0308 	orr.w	r3, r3, #8
 800e470:	81a3      	strh	r3, [r4, #12]
 800e472:	6923      	ldr	r3, [r4, #16]
 800e474:	b94b      	cbnz	r3, 800e48a <__swsetup_r+0x9a>
 800e476:	89a3      	ldrh	r3, [r4, #12]
 800e478:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e47c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e480:	d003      	beq.n	800e48a <__swsetup_r+0x9a>
 800e482:	4621      	mov	r1, r4
 800e484:	4630      	mov	r0, r6
 800e486:	f7ff fcfb 	bl	800de80 <__smakebuf_r>
 800e48a:	89a0      	ldrh	r0, [r4, #12]
 800e48c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e490:	f010 0301 	ands.w	r3, r0, #1
 800e494:	d00a      	beq.n	800e4ac <__swsetup_r+0xbc>
 800e496:	2300      	movs	r3, #0
 800e498:	60a3      	str	r3, [r4, #8]
 800e49a:	6963      	ldr	r3, [r4, #20]
 800e49c:	425b      	negs	r3, r3
 800e49e:	61a3      	str	r3, [r4, #24]
 800e4a0:	6923      	ldr	r3, [r4, #16]
 800e4a2:	b943      	cbnz	r3, 800e4b6 <__swsetup_r+0xc6>
 800e4a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e4a8:	d1ba      	bne.n	800e420 <__swsetup_r+0x30>
 800e4aa:	bd70      	pop	{r4, r5, r6, pc}
 800e4ac:	0781      	lsls	r1, r0, #30
 800e4ae:	bf58      	it	pl
 800e4b0:	6963      	ldrpl	r3, [r4, #20]
 800e4b2:	60a3      	str	r3, [r4, #8]
 800e4b4:	e7f4      	b.n	800e4a0 <__swsetup_r+0xb0>
 800e4b6:	2000      	movs	r0, #0
 800e4b8:	e7f7      	b.n	800e4aa <__swsetup_r+0xba>
 800e4ba:	bf00      	nop
 800e4bc:	200001b4 	.word	0x200001b4
 800e4c0:	0801014c 	.word	0x0801014c
 800e4c4:	0801016c 	.word	0x0801016c
 800e4c8:	0801012c 	.word	0x0801012c

0800e4cc <_close_r>:
 800e4cc:	b538      	push	{r3, r4, r5, lr}
 800e4ce:	4d06      	ldr	r5, [pc, #24]	; (800e4e8 <_close_r+0x1c>)
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	4604      	mov	r4, r0
 800e4d4:	4608      	mov	r0, r1
 800e4d6:	602b      	str	r3, [r5, #0]
 800e4d8:	f7f2 fc11 	bl	8000cfe <_close>
 800e4dc:	1c43      	adds	r3, r0, #1
 800e4de:	d102      	bne.n	800e4e6 <_close_r+0x1a>
 800e4e0:	682b      	ldr	r3, [r5, #0]
 800e4e2:	b103      	cbz	r3, 800e4e6 <_close_r+0x1a>
 800e4e4:	6023      	str	r3, [r4, #0]
 800e4e6:	bd38      	pop	{r3, r4, r5, pc}
 800e4e8:	20000b14 	.word	0x20000b14

0800e4ec <_fstat_r>:
 800e4ec:	b538      	push	{r3, r4, r5, lr}
 800e4ee:	4d07      	ldr	r5, [pc, #28]	; (800e50c <_fstat_r+0x20>)
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	4604      	mov	r4, r0
 800e4f4:	4608      	mov	r0, r1
 800e4f6:	4611      	mov	r1, r2
 800e4f8:	602b      	str	r3, [r5, #0]
 800e4fa:	f7f2 fc0c 	bl	8000d16 <_fstat>
 800e4fe:	1c43      	adds	r3, r0, #1
 800e500:	d102      	bne.n	800e508 <_fstat_r+0x1c>
 800e502:	682b      	ldr	r3, [r5, #0]
 800e504:	b103      	cbz	r3, 800e508 <_fstat_r+0x1c>
 800e506:	6023      	str	r3, [r4, #0]
 800e508:	bd38      	pop	{r3, r4, r5, pc}
 800e50a:	bf00      	nop
 800e50c:	20000b14 	.word	0x20000b14

0800e510 <_isatty_r>:
 800e510:	b538      	push	{r3, r4, r5, lr}
 800e512:	4d06      	ldr	r5, [pc, #24]	; (800e52c <_isatty_r+0x1c>)
 800e514:	2300      	movs	r3, #0
 800e516:	4604      	mov	r4, r0
 800e518:	4608      	mov	r0, r1
 800e51a:	602b      	str	r3, [r5, #0]
 800e51c:	f7f2 fc0b 	bl	8000d36 <_isatty>
 800e520:	1c43      	adds	r3, r0, #1
 800e522:	d102      	bne.n	800e52a <_isatty_r+0x1a>
 800e524:	682b      	ldr	r3, [r5, #0]
 800e526:	b103      	cbz	r3, 800e52a <_isatty_r+0x1a>
 800e528:	6023      	str	r3, [r4, #0]
 800e52a:	bd38      	pop	{r3, r4, r5, pc}
 800e52c:	20000b14 	.word	0x20000b14

0800e530 <_lseek_r>:
 800e530:	b538      	push	{r3, r4, r5, lr}
 800e532:	4d07      	ldr	r5, [pc, #28]	; (800e550 <_lseek_r+0x20>)
 800e534:	4604      	mov	r4, r0
 800e536:	4608      	mov	r0, r1
 800e538:	4611      	mov	r1, r2
 800e53a:	2200      	movs	r2, #0
 800e53c:	602a      	str	r2, [r5, #0]
 800e53e:	461a      	mov	r2, r3
 800e540:	f7f2 fc04 	bl	8000d4c <_lseek>
 800e544:	1c43      	adds	r3, r0, #1
 800e546:	d102      	bne.n	800e54e <_lseek_r+0x1e>
 800e548:	682b      	ldr	r3, [r5, #0]
 800e54a:	b103      	cbz	r3, 800e54e <_lseek_r+0x1e>
 800e54c:	6023      	str	r3, [r4, #0]
 800e54e:	bd38      	pop	{r3, r4, r5, pc}
 800e550:	20000b14 	.word	0x20000b14

0800e554 <__malloc_lock>:
 800e554:	4801      	ldr	r0, [pc, #4]	; (800e55c <__malloc_lock+0x8>)
 800e556:	f7ff bc6c 	b.w	800de32 <__retarget_lock_acquire_recursive>
 800e55a:	bf00      	nop
 800e55c:	20000b08 	.word	0x20000b08

0800e560 <__malloc_unlock>:
 800e560:	4801      	ldr	r0, [pc, #4]	; (800e568 <__malloc_unlock+0x8>)
 800e562:	f7ff bc67 	b.w	800de34 <__retarget_lock_release_recursive>
 800e566:	bf00      	nop
 800e568:	20000b08 	.word	0x20000b08

0800e56c <__sfputc_r>:
 800e56c:	6893      	ldr	r3, [r2, #8]
 800e56e:	3b01      	subs	r3, #1
 800e570:	2b00      	cmp	r3, #0
 800e572:	b410      	push	{r4}
 800e574:	6093      	str	r3, [r2, #8]
 800e576:	da08      	bge.n	800e58a <__sfputc_r+0x1e>
 800e578:	6994      	ldr	r4, [r2, #24]
 800e57a:	42a3      	cmp	r3, r4
 800e57c:	db01      	blt.n	800e582 <__sfputc_r+0x16>
 800e57e:	290a      	cmp	r1, #10
 800e580:	d103      	bne.n	800e58a <__sfputc_r+0x1e>
 800e582:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e586:	f7ff becf 	b.w	800e328 <__swbuf_r>
 800e58a:	6813      	ldr	r3, [r2, #0]
 800e58c:	1c58      	adds	r0, r3, #1
 800e58e:	6010      	str	r0, [r2, #0]
 800e590:	7019      	strb	r1, [r3, #0]
 800e592:	4608      	mov	r0, r1
 800e594:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e598:	4770      	bx	lr

0800e59a <__sfputs_r>:
 800e59a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e59c:	4606      	mov	r6, r0
 800e59e:	460f      	mov	r7, r1
 800e5a0:	4614      	mov	r4, r2
 800e5a2:	18d5      	adds	r5, r2, r3
 800e5a4:	42ac      	cmp	r4, r5
 800e5a6:	d101      	bne.n	800e5ac <__sfputs_r+0x12>
 800e5a8:	2000      	movs	r0, #0
 800e5aa:	e007      	b.n	800e5bc <__sfputs_r+0x22>
 800e5ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5b0:	463a      	mov	r2, r7
 800e5b2:	4630      	mov	r0, r6
 800e5b4:	f7ff ffda 	bl	800e56c <__sfputc_r>
 800e5b8:	1c43      	adds	r3, r0, #1
 800e5ba:	d1f3      	bne.n	800e5a4 <__sfputs_r+0xa>
 800e5bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e5c0 <_vfiprintf_r>:
 800e5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5c4:	460d      	mov	r5, r1
 800e5c6:	b09d      	sub	sp, #116	; 0x74
 800e5c8:	4614      	mov	r4, r2
 800e5ca:	4698      	mov	r8, r3
 800e5cc:	4606      	mov	r6, r0
 800e5ce:	b118      	cbz	r0, 800e5d8 <_vfiprintf_r+0x18>
 800e5d0:	6983      	ldr	r3, [r0, #24]
 800e5d2:	b90b      	cbnz	r3, 800e5d8 <_vfiprintf_r+0x18>
 800e5d4:	f7ff fb6a 	bl	800dcac <__sinit>
 800e5d8:	4b89      	ldr	r3, [pc, #548]	; (800e800 <_vfiprintf_r+0x240>)
 800e5da:	429d      	cmp	r5, r3
 800e5dc:	d11b      	bne.n	800e616 <_vfiprintf_r+0x56>
 800e5de:	6875      	ldr	r5, [r6, #4]
 800e5e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e5e2:	07d9      	lsls	r1, r3, #31
 800e5e4:	d405      	bmi.n	800e5f2 <_vfiprintf_r+0x32>
 800e5e6:	89ab      	ldrh	r3, [r5, #12]
 800e5e8:	059a      	lsls	r2, r3, #22
 800e5ea:	d402      	bmi.n	800e5f2 <_vfiprintf_r+0x32>
 800e5ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e5ee:	f7ff fc20 	bl	800de32 <__retarget_lock_acquire_recursive>
 800e5f2:	89ab      	ldrh	r3, [r5, #12]
 800e5f4:	071b      	lsls	r3, r3, #28
 800e5f6:	d501      	bpl.n	800e5fc <_vfiprintf_r+0x3c>
 800e5f8:	692b      	ldr	r3, [r5, #16]
 800e5fa:	b9eb      	cbnz	r3, 800e638 <_vfiprintf_r+0x78>
 800e5fc:	4629      	mov	r1, r5
 800e5fe:	4630      	mov	r0, r6
 800e600:	f7ff fef6 	bl	800e3f0 <__swsetup_r>
 800e604:	b1c0      	cbz	r0, 800e638 <_vfiprintf_r+0x78>
 800e606:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e608:	07dc      	lsls	r4, r3, #31
 800e60a:	d50e      	bpl.n	800e62a <_vfiprintf_r+0x6a>
 800e60c:	f04f 30ff 	mov.w	r0, #4294967295
 800e610:	b01d      	add	sp, #116	; 0x74
 800e612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e616:	4b7b      	ldr	r3, [pc, #492]	; (800e804 <_vfiprintf_r+0x244>)
 800e618:	429d      	cmp	r5, r3
 800e61a:	d101      	bne.n	800e620 <_vfiprintf_r+0x60>
 800e61c:	68b5      	ldr	r5, [r6, #8]
 800e61e:	e7df      	b.n	800e5e0 <_vfiprintf_r+0x20>
 800e620:	4b79      	ldr	r3, [pc, #484]	; (800e808 <_vfiprintf_r+0x248>)
 800e622:	429d      	cmp	r5, r3
 800e624:	bf08      	it	eq
 800e626:	68f5      	ldreq	r5, [r6, #12]
 800e628:	e7da      	b.n	800e5e0 <_vfiprintf_r+0x20>
 800e62a:	89ab      	ldrh	r3, [r5, #12]
 800e62c:	0598      	lsls	r0, r3, #22
 800e62e:	d4ed      	bmi.n	800e60c <_vfiprintf_r+0x4c>
 800e630:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e632:	f7ff fbff 	bl	800de34 <__retarget_lock_release_recursive>
 800e636:	e7e9      	b.n	800e60c <_vfiprintf_r+0x4c>
 800e638:	2300      	movs	r3, #0
 800e63a:	9309      	str	r3, [sp, #36]	; 0x24
 800e63c:	2320      	movs	r3, #32
 800e63e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e642:	f8cd 800c 	str.w	r8, [sp, #12]
 800e646:	2330      	movs	r3, #48	; 0x30
 800e648:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e80c <_vfiprintf_r+0x24c>
 800e64c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e650:	f04f 0901 	mov.w	r9, #1
 800e654:	4623      	mov	r3, r4
 800e656:	469a      	mov	sl, r3
 800e658:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e65c:	b10a      	cbz	r2, 800e662 <_vfiprintf_r+0xa2>
 800e65e:	2a25      	cmp	r2, #37	; 0x25
 800e660:	d1f9      	bne.n	800e656 <_vfiprintf_r+0x96>
 800e662:	ebba 0b04 	subs.w	fp, sl, r4
 800e666:	d00b      	beq.n	800e680 <_vfiprintf_r+0xc0>
 800e668:	465b      	mov	r3, fp
 800e66a:	4622      	mov	r2, r4
 800e66c:	4629      	mov	r1, r5
 800e66e:	4630      	mov	r0, r6
 800e670:	f7ff ff93 	bl	800e59a <__sfputs_r>
 800e674:	3001      	adds	r0, #1
 800e676:	f000 80aa 	beq.w	800e7ce <_vfiprintf_r+0x20e>
 800e67a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e67c:	445a      	add	r2, fp
 800e67e:	9209      	str	r2, [sp, #36]	; 0x24
 800e680:	f89a 3000 	ldrb.w	r3, [sl]
 800e684:	2b00      	cmp	r3, #0
 800e686:	f000 80a2 	beq.w	800e7ce <_vfiprintf_r+0x20e>
 800e68a:	2300      	movs	r3, #0
 800e68c:	f04f 32ff 	mov.w	r2, #4294967295
 800e690:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e694:	f10a 0a01 	add.w	sl, sl, #1
 800e698:	9304      	str	r3, [sp, #16]
 800e69a:	9307      	str	r3, [sp, #28]
 800e69c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e6a0:	931a      	str	r3, [sp, #104]	; 0x68
 800e6a2:	4654      	mov	r4, sl
 800e6a4:	2205      	movs	r2, #5
 800e6a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6aa:	4858      	ldr	r0, [pc, #352]	; (800e80c <_vfiprintf_r+0x24c>)
 800e6ac:	f7f1 fd98 	bl	80001e0 <memchr>
 800e6b0:	9a04      	ldr	r2, [sp, #16]
 800e6b2:	b9d8      	cbnz	r0, 800e6ec <_vfiprintf_r+0x12c>
 800e6b4:	06d1      	lsls	r1, r2, #27
 800e6b6:	bf44      	itt	mi
 800e6b8:	2320      	movmi	r3, #32
 800e6ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e6be:	0713      	lsls	r3, r2, #28
 800e6c0:	bf44      	itt	mi
 800e6c2:	232b      	movmi	r3, #43	; 0x2b
 800e6c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e6c8:	f89a 3000 	ldrb.w	r3, [sl]
 800e6cc:	2b2a      	cmp	r3, #42	; 0x2a
 800e6ce:	d015      	beq.n	800e6fc <_vfiprintf_r+0x13c>
 800e6d0:	9a07      	ldr	r2, [sp, #28]
 800e6d2:	4654      	mov	r4, sl
 800e6d4:	2000      	movs	r0, #0
 800e6d6:	f04f 0c0a 	mov.w	ip, #10
 800e6da:	4621      	mov	r1, r4
 800e6dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e6e0:	3b30      	subs	r3, #48	; 0x30
 800e6e2:	2b09      	cmp	r3, #9
 800e6e4:	d94e      	bls.n	800e784 <_vfiprintf_r+0x1c4>
 800e6e6:	b1b0      	cbz	r0, 800e716 <_vfiprintf_r+0x156>
 800e6e8:	9207      	str	r2, [sp, #28]
 800e6ea:	e014      	b.n	800e716 <_vfiprintf_r+0x156>
 800e6ec:	eba0 0308 	sub.w	r3, r0, r8
 800e6f0:	fa09 f303 	lsl.w	r3, r9, r3
 800e6f4:	4313      	orrs	r3, r2
 800e6f6:	9304      	str	r3, [sp, #16]
 800e6f8:	46a2      	mov	sl, r4
 800e6fa:	e7d2      	b.n	800e6a2 <_vfiprintf_r+0xe2>
 800e6fc:	9b03      	ldr	r3, [sp, #12]
 800e6fe:	1d19      	adds	r1, r3, #4
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	9103      	str	r1, [sp, #12]
 800e704:	2b00      	cmp	r3, #0
 800e706:	bfbb      	ittet	lt
 800e708:	425b      	neglt	r3, r3
 800e70a:	f042 0202 	orrlt.w	r2, r2, #2
 800e70e:	9307      	strge	r3, [sp, #28]
 800e710:	9307      	strlt	r3, [sp, #28]
 800e712:	bfb8      	it	lt
 800e714:	9204      	strlt	r2, [sp, #16]
 800e716:	7823      	ldrb	r3, [r4, #0]
 800e718:	2b2e      	cmp	r3, #46	; 0x2e
 800e71a:	d10c      	bne.n	800e736 <_vfiprintf_r+0x176>
 800e71c:	7863      	ldrb	r3, [r4, #1]
 800e71e:	2b2a      	cmp	r3, #42	; 0x2a
 800e720:	d135      	bne.n	800e78e <_vfiprintf_r+0x1ce>
 800e722:	9b03      	ldr	r3, [sp, #12]
 800e724:	1d1a      	adds	r2, r3, #4
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	9203      	str	r2, [sp, #12]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	bfb8      	it	lt
 800e72e:	f04f 33ff 	movlt.w	r3, #4294967295
 800e732:	3402      	adds	r4, #2
 800e734:	9305      	str	r3, [sp, #20]
 800e736:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e81c <_vfiprintf_r+0x25c>
 800e73a:	7821      	ldrb	r1, [r4, #0]
 800e73c:	2203      	movs	r2, #3
 800e73e:	4650      	mov	r0, sl
 800e740:	f7f1 fd4e 	bl	80001e0 <memchr>
 800e744:	b140      	cbz	r0, 800e758 <_vfiprintf_r+0x198>
 800e746:	2340      	movs	r3, #64	; 0x40
 800e748:	eba0 000a 	sub.w	r0, r0, sl
 800e74c:	fa03 f000 	lsl.w	r0, r3, r0
 800e750:	9b04      	ldr	r3, [sp, #16]
 800e752:	4303      	orrs	r3, r0
 800e754:	3401      	adds	r4, #1
 800e756:	9304      	str	r3, [sp, #16]
 800e758:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e75c:	482c      	ldr	r0, [pc, #176]	; (800e810 <_vfiprintf_r+0x250>)
 800e75e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e762:	2206      	movs	r2, #6
 800e764:	f7f1 fd3c 	bl	80001e0 <memchr>
 800e768:	2800      	cmp	r0, #0
 800e76a:	d03f      	beq.n	800e7ec <_vfiprintf_r+0x22c>
 800e76c:	4b29      	ldr	r3, [pc, #164]	; (800e814 <_vfiprintf_r+0x254>)
 800e76e:	bb1b      	cbnz	r3, 800e7b8 <_vfiprintf_r+0x1f8>
 800e770:	9b03      	ldr	r3, [sp, #12]
 800e772:	3307      	adds	r3, #7
 800e774:	f023 0307 	bic.w	r3, r3, #7
 800e778:	3308      	adds	r3, #8
 800e77a:	9303      	str	r3, [sp, #12]
 800e77c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e77e:	443b      	add	r3, r7
 800e780:	9309      	str	r3, [sp, #36]	; 0x24
 800e782:	e767      	b.n	800e654 <_vfiprintf_r+0x94>
 800e784:	fb0c 3202 	mla	r2, ip, r2, r3
 800e788:	460c      	mov	r4, r1
 800e78a:	2001      	movs	r0, #1
 800e78c:	e7a5      	b.n	800e6da <_vfiprintf_r+0x11a>
 800e78e:	2300      	movs	r3, #0
 800e790:	3401      	adds	r4, #1
 800e792:	9305      	str	r3, [sp, #20]
 800e794:	4619      	mov	r1, r3
 800e796:	f04f 0c0a 	mov.w	ip, #10
 800e79a:	4620      	mov	r0, r4
 800e79c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e7a0:	3a30      	subs	r2, #48	; 0x30
 800e7a2:	2a09      	cmp	r2, #9
 800e7a4:	d903      	bls.n	800e7ae <_vfiprintf_r+0x1ee>
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d0c5      	beq.n	800e736 <_vfiprintf_r+0x176>
 800e7aa:	9105      	str	r1, [sp, #20]
 800e7ac:	e7c3      	b.n	800e736 <_vfiprintf_r+0x176>
 800e7ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800e7b2:	4604      	mov	r4, r0
 800e7b4:	2301      	movs	r3, #1
 800e7b6:	e7f0      	b.n	800e79a <_vfiprintf_r+0x1da>
 800e7b8:	ab03      	add	r3, sp, #12
 800e7ba:	9300      	str	r3, [sp, #0]
 800e7bc:	462a      	mov	r2, r5
 800e7be:	4b16      	ldr	r3, [pc, #88]	; (800e818 <_vfiprintf_r+0x258>)
 800e7c0:	a904      	add	r1, sp, #16
 800e7c2:	4630      	mov	r0, r6
 800e7c4:	f3af 8000 	nop.w
 800e7c8:	4607      	mov	r7, r0
 800e7ca:	1c78      	adds	r0, r7, #1
 800e7cc:	d1d6      	bne.n	800e77c <_vfiprintf_r+0x1bc>
 800e7ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e7d0:	07d9      	lsls	r1, r3, #31
 800e7d2:	d405      	bmi.n	800e7e0 <_vfiprintf_r+0x220>
 800e7d4:	89ab      	ldrh	r3, [r5, #12]
 800e7d6:	059a      	lsls	r2, r3, #22
 800e7d8:	d402      	bmi.n	800e7e0 <_vfiprintf_r+0x220>
 800e7da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e7dc:	f7ff fb2a 	bl	800de34 <__retarget_lock_release_recursive>
 800e7e0:	89ab      	ldrh	r3, [r5, #12]
 800e7e2:	065b      	lsls	r3, r3, #25
 800e7e4:	f53f af12 	bmi.w	800e60c <_vfiprintf_r+0x4c>
 800e7e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e7ea:	e711      	b.n	800e610 <_vfiprintf_r+0x50>
 800e7ec:	ab03      	add	r3, sp, #12
 800e7ee:	9300      	str	r3, [sp, #0]
 800e7f0:	462a      	mov	r2, r5
 800e7f2:	4b09      	ldr	r3, [pc, #36]	; (800e818 <_vfiprintf_r+0x258>)
 800e7f4:	a904      	add	r1, sp, #16
 800e7f6:	4630      	mov	r0, r6
 800e7f8:	f000 f880 	bl	800e8fc <_printf_i>
 800e7fc:	e7e4      	b.n	800e7c8 <_vfiprintf_r+0x208>
 800e7fe:	bf00      	nop
 800e800:	0801014c 	.word	0x0801014c
 800e804:	0801016c 	.word	0x0801016c
 800e808:	0801012c 	.word	0x0801012c
 800e80c:	08010190 	.word	0x08010190
 800e810:	0801019a 	.word	0x0801019a
 800e814:	00000000 	.word	0x00000000
 800e818:	0800e59b 	.word	0x0800e59b
 800e81c:	08010196 	.word	0x08010196

0800e820 <_printf_common>:
 800e820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e824:	4616      	mov	r6, r2
 800e826:	4699      	mov	r9, r3
 800e828:	688a      	ldr	r2, [r1, #8]
 800e82a:	690b      	ldr	r3, [r1, #16]
 800e82c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e830:	4293      	cmp	r3, r2
 800e832:	bfb8      	it	lt
 800e834:	4613      	movlt	r3, r2
 800e836:	6033      	str	r3, [r6, #0]
 800e838:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e83c:	4607      	mov	r7, r0
 800e83e:	460c      	mov	r4, r1
 800e840:	b10a      	cbz	r2, 800e846 <_printf_common+0x26>
 800e842:	3301      	adds	r3, #1
 800e844:	6033      	str	r3, [r6, #0]
 800e846:	6823      	ldr	r3, [r4, #0]
 800e848:	0699      	lsls	r1, r3, #26
 800e84a:	bf42      	ittt	mi
 800e84c:	6833      	ldrmi	r3, [r6, #0]
 800e84e:	3302      	addmi	r3, #2
 800e850:	6033      	strmi	r3, [r6, #0]
 800e852:	6825      	ldr	r5, [r4, #0]
 800e854:	f015 0506 	ands.w	r5, r5, #6
 800e858:	d106      	bne.n	800e868 <_printf_common+0x48>
 800e85a:	f104 0a19 	add.w	sl, r4, #25
 800e85e:	68e3      	ldr	r3, [r4, #12]
 800e860:	6832      	ldr	r2, [r6, #0]
 800e862:	1a9b      	subs	r3, r3, r2
 800e864:	42ab      	cmp	r3, r5
 800e866:	dc26      	bgt.n	800e8b6 <_printf_common+0x96>
 800e868:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e86c:	1e13      	subs	r3, r2, #0
 800e86e:	6822      	ldr	r2, [r4, #0]
 800e870:	bf18      	it	ne
 800e872:	2301      	movne	r3, #1
 800e874:	0692      	lsls	r2, r2, #26
 800e876:	d42b      	bmi.n	800e8d0 <_printf_common+0xb0>
 800e878:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e87c:	4649      	mov	r1, r9
 800e87e:	4638      	mov	r0, r7
 800e880:	47c0      	blx	r8
 800e882:	3001      	adds	r0, #1
 800e884:	d01e      	beq.n	800e8c4 <_printf_common+0xa4>
 800e886:	6823      	ldr	r3, [r4, #0]
 800e888:	68e5      	ldr	r5, [r4, #12]
 800e88a:	6832      	ldr	r2, [r6, #0]
 800e88c:	f003 0306 	and.w	r3, r3, #6
 800e890:	2b04      	cmp	r3, #4
 800e892:	bf08      	it	eq
 800e894:	1aad      	subeq	r5, r5, r2
 800e896:	68a3      	ldr	r3, [r4, #8]
 800e898:	6922      	ldr	r2, [r4, #16]
 800e89a:	bf0c      	ite	eq
 800e89c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e8a0:	2500      	movne	r5, #0
 800e8a2:	4293      	cmp	r3, r2
 800e8a4:	bfc4      	itt	gt
 800e8a6:	1a9b      	subgt	r3, r3, r2
 800e8a8:	18ed      	addgt	r5, r5, r3
 800e8aa:	2600      	movs	r6, #0
 800e8ac:	341a      	adds	r4, #26
 800e8ae:	42b5      	cmp	r5, r6
 800e8b0:	d11a      	bne.n	800e8e8 <_printf_common+0xc8>
 800e8b2:	2000      	movs	r0, #0
 800e8b4:	e008      	b.n	800e8c8 <_printf_common+0xa8>
 800e8b6:	2301      	movs	r3, #1
 800e8b8:	4652      	mov	r2, sl
 800e8ba:	4649      	mov	r1, r9
 800e8bc:	4638      	mov	r0, r7
 800e8be:	47c0      	blx	r8
 800e8c0:	3001      	adds	r0, #1
 800e8c2:	d103      	bne.n	800e8cc <_printf_common+0xac>
 800e8c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e8c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8cc:	3501      	adds	r5, #1
 800e8ce:	e7c6      	b.n	800e85e <_printf_common+0x3e>
 800e8d0:	18e1      	adds	r1, r4, r3
 800e8d2:	1c5a      	adds	r2, r3, #1
 800e8d4:	2030      	movs	r0, #48	; 0x30
 800e8d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e8da:	4422      	add	r2, r4
 800e8dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e8e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e8e4:	3302      	adds	r3, #2
 800e8e6:	e7c7      	b.n	800e878 <_printf_common+0x58>
 800e8e8:	2301      	movs	r3, #1
 800e8ea:	4622      	mov	r2, r4
 800e8ec:	4649      	mov	r1, r9
 800e8ee:	4638      	mov	r0, r7
 800e8f0:	47c0      	blx	r8
 800e8f2:	3001      	adds	r0, #1
 800e8f4:	d0e6      	beq.n	800e8c4 <_printf_common+0xa4>
 800e8f6:	3601      	adds	r6, #1
 800e8f8:	e7d9      	b.n	800e8ae <_printf_common+0x8e>
	...

0800e8fc <_printf_i>:
 800e8fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e900:	7e0f      	ldrb	r7, [r1, #24]
 800e902:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e904:	2f78      	cmp	r7, #120	; 0x78
 800e906:	4691      	mov	r9, r2
 800e908:	4680      	mov	r8, r0
 800e90a:	460c      	mov	r4, r1
 800e90c:	469a      	mov	sl, r3
 800e90e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e912:	d807      	bhi.n	800e924 <_printf_i+0x28>
 800e914:	2f62      	cmp	r7, #98	; 0x62
 800e916:	d80a      	bhi.n	800e92e <_printf_i+0x32>
 800e918:	2f00      	cmp	r7, #0
 800e91a:	f000 80d8 	beq.w	800eace <_printf_i+0x1d2>
 800e91e:	2f58      	cmp	r7, #88	; 0x58
 800e920:	f000 80a3 	beq.w	800ea6a <_printf_i+0x16e>
 800e924:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e928:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e92c:	e03a      	b.n	800e9a4 <_printf_i+0xa8>
 800e92e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e932:	2b15      	cmp	r3, #21
 800e934:	d8f6      	bhi.n	800e924 <_printf_i+0x28>
 800e936:	a101      	add	r1, pc, #4	; (adr r1, 800e93c <_printf_i+0x40>)
 800e938:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e93c:	0800e995 	.word	0x0800e995
 800e940:	0800e9a9 	.word	0x0800e9a9
 800e944:	0800e925 	.word	0x0800e925
 800e948:	0800e925 	.word	0x0800e925
 800e94c:	0800e925 	.word	0x0800e925
 800e950:	0800e925 	.word	0x0800e925
 800e954:	0800e9a9 	.word	0x0800e9a9
 800e958:	0800e925 	.word	0x0800e925
 800e95c:	0800e925 	.word	0x0800e925
 800e960:	0800e925 	.word	0x0800e925
 800e964:	0800e925 	.word	0x0800e925
 800e968:	0800eab5 	.word	0x0800eab5
 800e96c:	0800e9d9 	.word	0x0800e9d9
 800e970:	0800ea97 	.word	0x0800ea97
 800e974:	0800e925 	.word	0x0800e925
 800e978:	0800e925 	.word	0x0800e925
 800e97c:	0800ead7 	.word	0x0800ead7
 800e980:	0800e925 	.word	0x0800e925
 800e984:	0800e9d9 	.word	0x0800e9d9
 800e988:	0800e925 	.word	0x0800e925
 800e98c:	0800e925 	.word	0x0800e925
 800e990:	0800ea9f 	.word	0x0800ea9f
 800e994:	682b      	ldr	r3, [r5, #0]
 800e996:	1d1a      	adds	r2, r3, #4
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	602a      	str	r2, [r5, #0]
 800e99c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e9a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e9a4:	2301      	movs	r3, #1
 800e9a6:	e0a3      	b.n	800eaf0 <_printf_i+0x1f4>
 800e9a8:	6820      	ldr	r0, [r4, #0]
 800e9aa:	6829      	ldr	r1, [r5, #0]
 800e9ac:	0606      	lsls	r6, r0, #24
 800e9ae:	f101 0304 	add.w	r3, r1, #4
 800e9b2:	d50a      	bpl.n	800e9ca <_printf_i+0xce>
 800e9b4:	680e      	ldr	r6, [r1, #0]
 800e9b6:	602b      	str	r3, [r5, #0]
 800e9b8:	2e00      	cmp	r6, #0
 800e9ba:	da03      	bge.n	800e9c4 <_printf_i+0xc8>
 800e9bc:	232d      	movs	r3, #45	; 0x2d
 800e9be:	4276      	negs	r6, r6
 800e9c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e9c4:	485e      	ldr	r0, [pc, #376]	; (800eb40 <_printf_i+0x244>)
 800e9c6:	230a      	movs	r3, #10
 800e9c8:	e019      	b.n	800e9fe <_printf_i+0x102>
 800e9ca:	680e      	ldr	r6, [r1, #0]
 800e9cc:	602b      	str	r3, [r5, #0]
 800e9ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e9d2:	bf18      	it	ne
 800e9d4:	b236      	sxthne	r6, r6
 800e9d6:	e7ef      	b.n	800e9b8 <_printf_i+0xbc>
 800e9d8:	682b      	ldr	r3, [r5, #0]
 800e9da:	6820      	ldr	r0, [r4, #0]
 800e9dc:	1d19      	adds	r1, r3, #4
 800e9de:	6029      	str	r1, [r5, #0]
 800e9e0:	0601      	lsls	r1, r0, #24
 800e9e2:	d501      	bpl.n	800e9e8 <_printf_i+0xec>
 800e9e4:	681e      	ldr	r6, [r3, #0]
 800e9e6:	e002      	b.n	800e9ee <_printf_i+0xf2>
 800e9e8:	0646      	lsls	r6, r0, #25
 800e9ea:	d5fb      	bpl.n	800e9e4 <_printf_i+0xe8>
 800e9ec:	881e      	ldrh	r6, [r3, #0]
 800e9ee:	4854      	ldr	r0, [pc, #336]	; (800eb40 <_printf_i+0x244>)
 800e9f0:	2f6f      	cmp	r7, #111	; 0x6f
 800e9f2:	bf0c      	ite	eq
 800e9f4:	2308      	moveq	r3, #8
 800e9f6:	230a      	movne	r3, #10
 800e9f8:	2100      	movs	r1, #0
 800e9fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e9fe:	6865      	ldr	r5, [r4, #4]
 800ea00:	60a5      	str	r5, [r4, #8]
 800ea02:	2d00      	cmp	r5, #0
 800ea04:	bfa2      	ittt	ge
 800ea06:	6821      	ldrge	r1, [r4, #0]
 800ea08:	f021 0104 	bicge.w	r1, r1, #4
 800ea0c:	6021      	strge	r1, [r4, #0]
 800ea0e:	b90e      	cbnz	r6, 800ea14 <_printf_i+0x118>
 800ea10:	2d00      	cmp	r5, #0
 800ea12:	d04d      	beq.n	800eab0 <_printf_i+0x1b4>
 800ea14:	4615      	mov	r5, r2
 800ea16:	fbb6 f1f3 	udiv	r1, r6, r3
 800ea1a:	fb03 6711 	mls	r7, r3, r1, r6
 800ea1e:	5dc7      	ldrb	r7, [r0, r7]
 800ea20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ea24:	4637      	mov	r7, r6
 800ea26:	42bb      	cmp	r3, r7
 800ea28:	460e      	mov	r6, r1
 800ea2a:	d9f4      	bls.n	800ea16 <_printf_i+0x11a>
 800ea2c:	2b08      	cmp	r3, #8
 800ea2e:	d10b      	bne.n	800ea48 <_printf_i+0x14c>
 800ea30:	6823      	ldr	r3, [r4, #0]
 800ea32:	07de      	lsls	r6, r3, #31
 800ea34:	d508      	bpl.n	800ea48 <_printf_i+0x14c>
 800ea36:	6923      	ldr	r3, [r4, #16]
 800ea38:	6861      	ldr	r1, [r4, #4]
 800ea3a:	4299      	cmp	r1, r3
 800ea3c:	bfde      	ittt	le
 800ea3e:	2330      	movle	r3, #48	; 0x30
 800ea40:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ea44:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ea48:	1b52      	subs	r2, r2, r5
 800ea4a:	6122      	str	r2, [r4, #16]
 800ea4c:	f8cd a000 	str.w	sl, [sp]
 800ea50:	464b      	mov	r3, r9
 800ea52:	aa03      	add	r2, sp, #12
 800ea54:	4621      	mov	r1, r4
 800ea56:	4640      	mov	r0, r8
 800ea58:	f7ff fee2 	bl	800e820 <_printf_common>
 800ea5c:	3001      	adds	r0, #1
 800ea5e:	d14c      	bne.n	800eafa <_printf_i+0x1fe>
 800ea60:	f04f 30ff 	mov.w	r0, #4294967295
 800ea64:	b004      	add	sp, #16
 800ea66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea6a:	4835      	ldr	r0, [pc, #212]	; (800eb40 <_printf_i+0x244>)
 800ea6c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ea70:	6829      	ldr	r1, [r5, #0]
 800ea72:	6823      	ldr	r3, [r4, #0]
 800ea74:	f851 6b04 	ldr.w	r6, [r1], #4
 800ea78:	6029      	str	r1, [r5, #0]
 800ea7a:	061d      	lsls	r5, r3, #24
 800ea7c:	d514      	bpl.n	800eaa8 <_printf_i+0x1ac>
 800ea7e:	07df      	lsls	r7, r3, #31
 800ea80:	bf44      	itt	mi
 800ea82:	f043 0320 	orrmi.w	r3, r3, #32
 800ea86:	6023      	strmi	r3, [r4, #0]
 800ea88:	b91e      	cbnz	r6, 800ea92 <_printf_i+0x196>
 800ea8a:	6823      	ldr	r3, [r4, #0]
 800ea8c:	f023 0320 	bic.w	r3, r3, #32
 800ea90:	6023      	str	r3, [r4, #0]
 800ea92:	2310      	movs	r3, #16
 800ea94:	e7b0      	b.n	800e9f8 <_printf_i+0xfc>
 800ea96:	6823      	ldr	r3, [r4, #0]
 800ea98:	f043 0320 	orr.w	r3, r3, #32
 800ea9c:	6023      	str	r3, [r4, #0]
 800ea9e:	2378      	movs	r3, #120	; 0x78
 800eaa0:	4828      	ldr	r0, [pc, #160]	; (800eb44 <_printf_i+0x248>)
 800eaa2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800eaa6:	e7e3      	b.n	800ea70 <_printf_i+0x174>
 800eaa8:	0659      	lsls	r1, r3, #25
 800eaaa:	bf48      	it	mi
 800eaac:	b2b6      	uxthmi	r6, r6
 800eaae:	e7e6      	b.n	800ea7e <_printf_i+0x182>
 800eab0:	4615      	mov	r5, r2
 800eab2:	e7bb      	b.n	800ea2c <_printf_i+0x130>
 800eab4:	682b      	ldr	r3, [r5, #0]
 800eab6:	6826      	ldr	r6, [r4, #0]
 800eab8:	6961      	ldr	r1, [r4, #20]
 800eaba:	1d18      	adds	r0, r3, #4
 800eabc:	6028      	str	r0, [r5, #0]
 800eabe:	0635      	lsls	r5, r6, #24
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	d501      	bpl.n	800eac8 <_printf_i+0x1cc>
 800eac4:	6019      	str	r1, [r3, #0]
 800eac6:	e002      	b.n	800eace <_printf_i+0x1d2>
 800eac8:	0670      	lsls	r0, r6, #25
 800eaca:	d5fb      	bpl.n	800eac4 <_printf_i+0x1c8>
 800eacc:	8019      	strh	r1, [r3, #0]
 800eace:	2300      	movs	r3, #0
 800ead0:	6123      	str	r3, [r4, #16]
 800ead2:	4615      	mov	r5, r2
 800ead4:	e7ba      	b.n	800ea4c <_printf_i+0x150>
 800ead6:	682b      	ldr	r3, [r5, #0]
 800ead8:	1d1a      	adds	r2, r3, #4
 800eada:	602a      	str	r2, [r5, #0]
 800eadc:	681d      	ldr	r5, [r3, #0]
 800eade:	6862      	ldr	r2, [r4, #4]
 800eae0:	2100      	movs	r1, #0
 800eae2:	4628      	mov	r0, r5
 800eae4:	f7f1 fb7c 	bl	80001e0 <memchr>
 800eae8:	b108      	cbz	r0, 800eaee <_printf_i+0x1f2>
 800eaea:	1b40      	subs	r0, r0, r5
 800eaec:	6060      	str	r0, [r4, #4]
 800eaee:	6863      	ldr	r3, [r4, #4]
 800eaf0:	6123      	str	r3, [r4, #16]
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eaf8:	e7a8      	b.n	800ea4c <_printf_i+0x150>
 800eafa:	6923      	ldr	r3, [r4, #16]
 800eafc:	462a      	mov	r2, r5
 800eafe:	4649      	mov	r1, r9
 800eb00:	4640      	mov	r0, r8
 800eb02:	47d0      	blx	sl
 800eb04:	3001      	adds	r0, #1
 800eb06:	d0ab      	beq.n	800ea60 <_printf_i+0x164>
 800eb08:	6823      	ldr	r3, [r4, #0]
 800eb0a:	079b      	lsls	r3, r3, #30
 800eb0c:	d413      	bmi.n	800eb36 <_printf_i+0x23a>
 800eb0e:	68e0      	ldr	r0, [r4, #12]
 800eb10:	9b03      	ldr	r3, [sp, #12]
 800eb12:	4298      	cmp	r0, r3
 800eb14:	bfb8      	it	lt
 800eb16:	4618      	movlt	r0, r3
 800eb18:	e7a4      	b.n	800ea64 <_printf_i+0x168>
 800eb1a:	2301      	movs	r3, #1
 800eb1c:	4632      	mov	r2, r6
 800eb1e:	4649      	mov	r1, r9
 800eb20:	4640      	mov	r0, r8
 800eb22:	47d0      	blx	sl
 800eb24:	3001      	adds	r0, #1
 800eb26:	d09b      	beq.n	800ea60 <_printf_i+0x164>
 800eb28:	3501      	adds	r5, #1
 800eb2a:	68e3      	ldr	r3, [r4, #12]
 800eb2c:	9903      	ldr	r1, [sp, #12]
 800eb2e:	1a5b      	subs	r3, r3, r1
 800eb30:	42ab      	cmp	r3, r5
 800eb32:	dcf2      	bgt.n	800eb1a <_printf_i+0x21e>
 800eb34:	e7eb      	b.n	800eb0e <_printf_i+0x212>
 800eb36:	2500      	movs	r5, #0
 800eb38:	f104 0619 	add.w	r6, r4, #25
 800eb3c:	e7f5      	b.n	800eb2a <_printf_i+0x22e>
 800eb3e:	bf00      	nop
 800eb40:	080101a1 	.word	0x080101a1
 800eb44:	080101b2 	.word	0x080101b2

0800eb48 <_read_r>:
 800eb48:	b538      	push	{r3, r4, r5, lr}
 800eb4a:	4d07      	ldr	r5, [pc, #28]	; (800eb68 <_read_r+0x20>)
 800eb4c:	4604      	mov	r4, r0
 800eb4e:	4608      	mov	r0, r1
 800eb50:	4611      	mov	r1, r2
 800eb52:	2200      	movs	r2, #0
 800eb54:	602a      	str	r2, [r5, #0]
 800eb56:	461a      	mov	r2, r3
 800eb58:	f7f2 f898 	bl	8000c8c <_read>
 800eb5c:	1c43      	adds	r3, r0, #1
 800eb5e:	d102      	bne.n	800eb66 <_read_r+0x1e>
 800eb60:	682b      	ldr	r3, [r5, #0]
 800eb62:	b103      	cbz	r3, 800eb66 <_read_r+0x1e>
 800eb64:	6023      	str	r3, [r4, #0]
 800eb66:	bd38      	pop	{r3, r4, r5, pc}
 800eb68:	20000b14 	.word	0x20000b14

0800eb6c <_init>:
 800eb6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb6e:	bf00      	nop
 800eb70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb72:	bc08      	pop	{r3}
 800eb74:	469e      	mov	lr, r3
 800eb76:	4770      	bx	lr

0800eb78 <_fini>:
 800eb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb7a:	bf00      	nop
 800eb7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb7e:	bc08      	pop	{r3}
 800eb80:	469e      	mov	lr, r3
 800eb82:	4770      	bx	lr
